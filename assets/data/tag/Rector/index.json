{"hash":"5d4d564b1c56245156a11069ec5b7b95bce96930","data":{"tag":{"id":"Rector","title":"Rector","path":"/tag/Rector/","belongsTo":{"totalCount":1,"pageInfo":{"totalPages":1,"currentPage":1},"edges":[{"node":{"id":"0bce4c63aa0e0e74f4a7d378fafdb1ae","title":"Berkenalan dengan Rector — PHP Reconstructor Tool","datetime":"2019-12-21 11:00:00","path":"/artikel/berkenalan-dengan-rector/","icon":"/images/icons/php.png","content":"<p>Basa-basi dulu ya. Pernah nggak kamu develop suatu aplikasi, udah lama banget, lalu beberapa tahun kemudian kamu ditugaskan/ingin kembangkan source code aplikasi tersebut sekaligus ingin mengubah codebasenya menggunakan bahasa pemrograman atau framework yang terbaru (saat itu). Apa yang kamu lakukan? periksa filenya satu-persatu, ubah manual? ya, cara amannya memang begitu. Untuk beberapa <em>task</em> sederhana lain, kamu mungkin akan memanfaatkan fitur dari IDE/text-editor seperti <em>refactor</em>, <em>find-and-replace</em>, dsb.</p>\n<p>Nah, sekarang di PHP ada <em>tool</em> untuk membantu kamu melakukan hal tersebut, namanya <a href=\"https://github.com/rectorphp/rector\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><em>Rector</em></a> — PHP <strong><u>Rec</u></strong>onstruc<strong><u>tor</u></strong>.\n<em>Rector</em> adalah <em>open source command line tool</em> untuk membantu developer melakukan <em>upgrade</em> dan <em>refactoring</em> <em>codebase</em> PHP mereka secara instan. Sebelum kamu berharap dan membaca terlalu jauh, ini kata dokumentasi <em>Rector</em>: <em>\"Why refactor manually if Rector can handle 80% for you?\"</em>.</p>\n<p>Jadi, ya, <em>Rector</em> ini bukan <em>tool</em> ajaib yang bisa memenuhi 100% keinginanmu. Bahkan mungkin nggak sampai 80% kebutuhanmu seperti yang dokumentasinya bilang.</p>\n<p>Ok, lanjut ya?</p>\n<h2 id=\"apa-saja-yang-bisa-dilakukan-rector\"><a href=\"#apa-saja-yang-bisa-dilakukan-rector\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Apa Saja yang Bisa Dilakukan Rector?</h2>\n<p>Secara garis besar ya itu tadi, <em>upgrading</em> dan <em>refactoring</em>.\nMisal kamu mau upgrade project PHP 5.3 kamu ke PHP 7.4, <em>Rector</em> memiliki beberapa set <em>rector</em> untuk membantu kamu melakukan perubahan yang diperlukan. Atau kamu mau upgrade Laravel 5.5 ke Laravel 6, <em>Rector</em> juga punya beberapa set <em>rector</em> untuk melakukan hal tersebut.</p>\n<p>Ok, sebelum kebingungan ini \"berkembang biak\", jadi gini:</p>\n<ul>\n<li><em>Package Rector</em> memiliki beberapa \"<em>set</em>\".</li>\n<li>Setiap \"<em>set</em>\" terdiri dari beberapa \"<em>Rector</em>\".</li>\n</ul>\n<p><img src=\"/images/posts/black-guy-question-mark.jpeg\" alt=\"Black Guy question mark\"></p>\n<p>Intinya gini, <em>package</em> <em>Rector</em> ini berisi sekumpulan <em>Rector</em> <em>(class)</em> yang dikelompokkan kedalam <em>set</em>-nya masing-masing, dimana setiap <em>Rector</em>-nya bertanggung jawab untuk menangani sebuah <em>refactoring</em>. Seperti: mengubah nama fungsi dari <code>fn_a()</code> ke <code>fn_b()</code>, atau mengubah argumen dari <code>fn($x, $y)</code> menjadi <code>fn($y, $x)</code>, dan lain sebagainya.</p>\n<p>Kembali ke subtopik \"Apa Saja yang Bisa Dilakukan Rector?\". Sebetulnya banyak, karena <em>set</em>-nya itu banyak.\nJadi disini saya sebutkan yang sekiranya \"wah\" aja.</p>\n<ul>\n<li>Rector dapat mendeteksi dan memberikan <em>return type</em> pada <em>function</em> yang belum didefinisikan <em>return type</em>-nya.</li>\n<li>Rector dapat memberikan anotasi <code>@var</code> pada <em>property</em> yang belum kamu berikan <code>@var</code>.</li>\n<li>Mengubah penggunaan <em>facade</em> menjadi <em>dependency injection</em> pada kode Laravel kamu.</li>\n<li>Mengubah kode Nette menjadi kode Symfony (saya sendiri belum coba).</li>\n<li>Mengubah <code>$value = $a ? $a : null</code> menjadi <code>$value = $a ?: null</code>.</li>\n<li>Kalau kamu pernah mengalami error <code>count(): Parameter must be an array or an object that implements Countable</code>, ada Rector <code>CountOnNullRector</code> untuk mencegah hal tersebut dengan melakukan <em>safety check</em> terlebih dahulu.</li>\n</ul>\n<p>Masih banyak lagi sebetulnya, berikut <a href=\"https://github.com/rectorphp/rector/blob/master/docs/AllRectorsOverview.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">daftar sets dan Rector</a> lainnya yang dapat kamu gunakan (kayaknya belum lengkap).</p>\n<h2 id=\"cara-kerja-rector\"><a href=\"#cara-kerja-rector\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cara Kerja Rector</h2>\n<p>Untuk detil cara kerjanya kamu bisa lihat di <a href=\"https://github.com/rectorphp/rector/blob/master/docs/HowItWorks.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">halaman ini</a>. Disini saya hanya menuliskan garis besarnya supaya kamu setidaknya mendapat gambaran cara kerjanya.</p>\n<ol>\n<li>Pertama, <em>Rector</em> membaca file yang ingin diterapkan <em>refactoring</em> menggunakan <code>file_get_contents</code>. Dapatlah si Rector <em>string</em> yang berisi <em>source code</em> kamu.</li>\n<li>Kemudian <em>string</em> yang berisi <em>source code</em> tersebut di-<em>parsing</em> menggunakan <a href=\"https://github.com/nikic/PHP-Parser\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code>nikic/php-parser</code></a> menjadi <em>AST (Abstract Syntax Tree)</em>. Kalau kamu tidak tahu apa itu <em>AST</em>, anggap aja ini <em>JSON</em> yang berisi struktur <em>tree</em> dari <em>source code</em> kamu. <em>AST</em> tersebut berisi sekumpulan <em>node</em> yang saling terhubung, dimana setiap <em>node</em>-nya memiliki definisi <em>type</em>-nya, apakah dia <em>function</em>, <em>string</em>, <em>int</em>, <em>float</em>, <em>constant</em>, dsb. </li>\n<li>Setelah diparsing ke <em>AST</em>, <em>AST</em> tersebut dibaca <em>node-per-node</em>-nya, jika ada bagian yang perlu dilakukan <em>refactoring</em>, maka <em>node</em> input tersebut direkonstruksi menjadi <em>node</em> output.</li>\n<li>Kalau sudah selesai (semua <em>node</em> sudah dicek dan <em>Rector</em> yang digunakan sudah selesai melakukan rekonstruksi), <em>AST</em> hasil rekonstruksi tersebut akan diubah kembali menjadi <em>string</em> untuk disimpan ke file tersebut, atau sekedar ditampilkan perubahannya ke layar.</li>\n</ol>\n<h2 id=\"menggunakan-rector\"><a href=\"#menggunakan-rector\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Menggunakan Rector</h2>\n<p>Ada 2 cara instalasi <em>Rector</em>, yang pertama dengan <em>Docker</em>, yang ke-2 dengan <em>Composer</em>.\nDisini saya menggunakan cara yang lebih gampang jelasinnya, yaitu dengan <em>Composer</em>.</p>\n<h4 id=\"cek-requirements\"><a href=\"#cek-requirements\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cek <em>Requirements</em></h4>\n<p>Oke, sebelum menggunakan <em>Rector</em>, pastikan kamu memenuhi kebutuhan dibawah ini:</p>\n<ol>\n<li>PHP >= 7.2 (cek dengan <code>php -v</code>).</li>\n<li>Ekstensi PHP JSON dan Tokenizer (bisa dicek dengan <code>php -m</code>).</li>\n<li><a href=\"https://getcomposer.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Composer</a> (cek dengan <code>composer --version</code>).</li>\n</ol>\n<blockquote>\n<p>Versi <em>Rector</em> yang saya gunakan disini adalah versi <code>0.6.2</code>, jika kamu adalah manusia dari masa depan yang sedang membaca artikel ini di versi <em>Rector</em> yang lebih tinggi, mungkin <em>requirement</em> diatas bisa berubah atau bertambah.</p>\n</blockquote>\n<h4 id=\"menginstall-rector\"><a href=\"#menginstall-rector\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Menginstall <em>Rector</em></h4>\n<p>Pada saat saya menulis artikel ini, <em>Rector</em> masih bermasalah jika diinstall secara global menggunakan <code>composer global require</code>, jadi kita akan menginstallnya ke direktori khusus dengan perintah <code>composer require</code> biasa. Berikut <em>step-by-step</em>-nya:</p>\n<ol>\n<li>Buka terminal/cmd.</li>\n<li>\n<p>Buat dan masuk ke direktori manapun dimana kamu ingin menginstall <em>Rector</em>.\nContoh saya akan menginstall <em>Rector</em> di <code>~/dev/tools/rector</code>, maka perintah (linux) yang saya gunakan adalah:</p>\n<ul>\n<li><code>mkdir ~/Dev/rector -P</code> (buat direktorinya).</li>\n<li><code>cd ~/Dev/rector</code> (masuk ke direktorinya).</li>\n</ul>\n</li>\n<li>Install <em>Rector</em>: <code>composer require rector/rector --dev</code>.</li>\n<li>Cek instalasi: <code>./vendor/bin/rector --version</code>. Kalu muncul output seperti ini: <code>Rector v0.6.2</code> artinya instalasinya berhasil.</li>\n</ol>\n<p>Sampai sini kita sudah dapat menggunakan <em>Rector</em>, tapi saya mau jelaskan dulu strategi seperti apa yang akan kita gunakan.\nJadi dengan cara instalasi seperti ini (menggunakan <code>composer require</code>), saya memikirkan setidaknya ada 3 strategi yang dapat kamu lakukan:</p>\n<ol>\n<li>Menginstall <em>Rector</em> di setiap project kamu.</li>\n<li>Menaruh <em>source code</em> project yang ingin dilakukan <em>refactoring</em> kedalam direktori rector.</li>\n<li>Mendaftarkan <code>~/Dev/rector/vendor/bin</code> kedalam variable <code>PATH</code> untuk mengglobalkan perintah <code>rector</code>.</li>\n</ol>\n<p>Saya tidak menyarankan cara pertama, karena buat apa juga install <em>Rector</em> banyak-banyak, toh fungsinya sama.\nSedangkan untuk cara ke-2 dan ke-3, untuk penggunaan berkepanjangan saya lebih menyarankan cara ke-3. Tapi pada artikel ini, kita akan menggunakan cara ke-2 karena lebih mudah dan <em>to-the-point</em>.</p>\n<p>Jadi kita akan menaruh <em>source code</em> yang akan kita lakukan <em>refactoring</em> kedalam direktori <code>~/Dev/rector/src</code>.\nMisal kamu ingin <em>refactor</em> project Laravel kamu, kamu bisa menaruhnya ke <code>~/Dev/rector/src/project-laravelmu</code>.</p>\n<h4 id=\"melihat-set-yang-tersedia\"><a href=\"#melihat-set-yang-tersedia\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Melihat <em>Set</em> yang Tersedia</h4>\n<p>Sebelum kita melakukan <em>refactoring</em>, kita dapat mengecek terlebih dahulu <em>set</em> yang tersedia pada instalasi <em>Rector</em> kita.\nMasih di terminal, ketikkan:</p>\n<pre class=\"shiki\" style=\"background-color: #191d21\"><code><span style=\"color: #FFFFFF\">./vendor/bin/rector sets</span></code></pre>\n<p>Outputnya kurang lebih akan seperti ini:</p>\n<pre class=\"shiki\" style=\"background-color: #191d21\"><code><span style=\"color: #FFFFFF\">Rector v0.6.2</span>\n\n<span style=\"color: #FFFFFF\">116 available sets:</span>\n<span style=\"color: #FFFFFF\">===================</span>\n\n<span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">*</span><span style=\"color: #FFFFFF\"> action-injection-to-constructor-injection</span>\n<span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">*</span><span style=\"color: #FFFFFF\"> array-str-functions-to-static-call       </span>\n<span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">*</span><span style=\"color: #FFFFFF\"> cakephp34</span>\n<span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">*</span><span style=\"color: #FFFFFF\"> cakephp35</span>\n<span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">*</span><span style=\"color: #FFFFFF\"> cakephp36</span>\n<span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">*</span><span style=\"color: #FFFFFF\"> cakephp37</span>\n<span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">*</span><span style=\"color: #FFFFFF\"> cakephp38</span>\n<span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">*</span><span style=\"color: #FFFFFF\"> cakephp40</span>\n<span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">*</span><span style=\"color: #FFFFFF\"> celebrity</span>\n<span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">*</span><span style=\"color: #FFFFFF\"> code-quality</span>\n<span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">*</span><span style=\"color: #FFFFFF\"> coding-style</span>\n<span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">*</span><span style=\"color: #FFFFFF\"> constructor-injectin-to-action-injection </span>\n<span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">*</span><span style=\"color: #FFFFFF\"> contributte-to-symfony</span>\n<span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">*</span><span style=\"color: #FFFFFF\"> dead-code</span>\n<span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">*</span><span style=\"color: #FFFFFF\"> doctrine</span>\n<span style=\"color: #FFFFFF\"> ... masih banyak lagi</span></code></pre>\n<p>Itu adalah daftar <em>set</em> yang bisa kamu gunakan untuk tahap selanjutnya. Seperti yang saya bilang sebelumnya, setiap <em>set</em> terdiri dari sekumpulan <em>Rector</em> untuk melakukan <em>refactoring</em> yang berbeda-beda.</p>\n<p>Kalau kamu ingin mengecek ketersediaan <em>set</em> tertentu, contoh kamu ingin melihat <em>set</em> yang berhubungan sama Laravel,\nkamu bisa gunakan perintah dibawah ini:</p>\n<pre class=\"shiki\" style=\"background-color: #191d21\"><code><span style=\"color: #FFFFFF\">./vendor/bin/rector sets laravel</span></code></pre>\n<p>Maka outputnya akan difiltrasi seperti ini:</p>\n<pre class=\"shiki\" style=\"background-color: #191d21\"><code><span style=\"color: #FFFFFF\">Rector v0.6.2</span>\n\n<span style=\"color: #FFFFFF\">11 available sets:</span>\n<span style=\"color: #FFFFFF\">==================</span>\n\n<span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">*</span><span style=\"color: #FFFFFF\"> laravel-static-to-injection</span>\n<span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">*</span><span style=\"color: #FFFFFF\"> laravel50</span>\n<span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">*</span><span style=\"color: #FFFFFF\"> laravel51</span>\n<span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">*</span><span style=\"color: #FFFFFF\"> laravel52</span>\n<span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">*</span><span style=\"color: #FFFFFF\"> laravel53</span>\n<span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">*</span><span style=\"color: #FFFFFF\"> laravel54</span>\n<span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">*</span><span style=\"color: #FFFFFF\"> laravel55</span>\n<span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">*</span><span style=\"color: #FFFFFF\"> laravel56</span>\n<span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">*</span><span style=\"color: #FFFFFF\"> laravel57</span>\n<span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">*</span><span style=\"color: #FFFFFF\"> laravel58</span>\n<span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">*</span><span style=\"color: #FFFFFF\"> laravel60</span></code></pre>\n<blockquote>\n<p>Sayangnya pada versi <code>0.6.2</code> yang saya install ini, kita belum bisa melihat <em>Rector</em> apa saja pada masing-masing <em>set</em> tersebut.\nJadi jika kamu ingin melihat <em>Rector</em> pada setiap <em>set</em>, untuk sementara kamu dapat melihatnya pada <a href=\"https://github.com/rectorphp/rector/blob/master/docs/AllRectorsOverview.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">halaman ini</a>.</p>\n</blockquote>\n<h4 id=\"mengaplikasikan-set-dengan-1-perintah\"><a href=\"#mengaplikasikan-set-dengan-1-perintah\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Mengaplikasikan <em>Set</em> dengan 1 Perintah</h4>\n<p>Ini adalah cara penggunaan <em>Rector</em> yang paling sederhana.\nMisalkan disini saya akan mencoba <em>set</em> <code>php70</code> dimana salah satu <em>Rector</em>-nya adalah <code>TernaryToNullCoalescingRector</code>,\nyakni mengubah <a href=\"https://www.php.net/manual/en/language.operators.comparison.php#language.operators.comparison.ternary\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><em>Ternary Operator</em></a> menjadi <a href=\"language.operators.comparison.coalesce\"><em>Null Coalescing Operator</em></a>.</p>\n<p>Pertama saya membuat file <code>src/sample.php</code>. Lalu saya isikan kode sebagai berikut:</p>\n<pre class=\"shiki\" style=\"background-color: #191d21\"><code><span style=\"color: #FFFFFF\">[filename:~/Dev/rector/src/sample.php]</span>\n<span style=\"color: #EFEFEF\">&lt;?php</span>\n\n<span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">keyword </span><span style=\"color: #EFEFEF\">=</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #FAC863\">isset</span><span style=\"color: #FFFFFF\">(</span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">_GET</span><span style=\"color: #EFEFEF\">[</span><span style=\"color: #50E3C2\">'q'</span><span style=\"color: #EFEFEF\">]</span><span style=\"color: #FFFFFF\">) ? </span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">_GET</span><span style=\"color: #EFEFEF\">[</span><span style=\"color: #50E3C2\">'q'</span><span style=\"color: #EFEFEF\">]</span><span style=\"color: #FFFFFF\"> : </span><span style=\"color: #50E3C2\">''</span><span style=\"color: #EFEFEF\">;</span></code></pre>\n<p>Untuk menerapkan <em>set</em> <code>php70</code> pada (seluruh file <code>.php</code> di) direktori <code>src</code>, kita dapat gunakan perintah dibawah ini:</p>\n<pre class=\"shiki\" style=\"background-color: #191d21\"><code><span style=\"color: #FFFFFF\">./vendor/bin/rector process --set php70 src</span></code></pre>\n<p>Maka <em>Rector</em> akan menampilkan perubahan apa saja yang dia lakukan, dan menyimpan perubahannya ke file tersebut.\nKalau kamu lihat kembali isi file <code>src/sample.php</code>, kode yang sebelumnya kita buat akan berubah menjadi seperti ini:</p>\n<pre class=\"shiki\" style=\"background-color: #191d21\"><code><span style=\"color: #FFFFFF\">[filename:~/Dev/rector/src/sample.php]</span>\n<span style=\"color: #EFEFEF\">&lt;?php</span>\n\n<span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">keyword </span><span style=\"color: #EFEFEF\">=</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">_GET</span><span style=\"color: #EFEFEF\">[</span><span style=\"color: #50E3C2\">'q'</span><span style=\"color: #EFEFEF\">]</span><span style=\"color: #FFFFFF\"> ?? </span><span style=\"color: #50E3C2\">''</span><span style=\"color: #EFEFEF\">;</span></code></pre>\n<p>Jika kamu menginginkan <em>Rector</em> hanya menampilkan perubahannya tanpa menyimpan perubahan ke masing-masing file,\nkamu dapat gunakan opsi <code>--dry-run</code> atau <code>-n</code> seperti dibawah ini:</p>\n<pre class=\"shiki\" style=\"background-color: #191d21\"><code><span style=\"color: #FFFFFF\">./vendor/bin/rector process --set php70 --dry-run src</span></code></pre>\n<p>Maka <em>Rector</em> hanya akan menampilkan perubahannya saja, tanpa menyimpan perubahan tersebut ke setiap filenya.</p>\n<h4 id=\"menerapkan-beberapa-set-sekaligus-dengan-rectoryaml\"><a href=\"#menerapkan-beberapa-set-sekaligus-dengan-rectoryaml\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Menerapkan Beberapa Set Sekaligus dengan <code>rector.yaml</code></h4>\n<p>Sebelumnya kita menerapkan <em>set</em> dengan sebuah perintah.\nBagaimana jika kita ingin menerapkan beberapa <em>set</em> sekaligus? jawabannya adalah file <code>rector.yaml</code>.</p>\n<p>File <code>rector.yaml</code> adalah file konfigurasi <em>Rector</em> yang kita siapkan untuk project tertentu.\nJadi setiap project bisa beda-beda file <code>rector.yaml</code>-nya. Untuk namanya sebetulnya tidak harus <code>rector.yaml</code>,\njadi misalkan kamu punya konfigurasi berbeda antara project A dan project B, kamu bisa bedakan namanya, misal <code>rector-a.yaml</code>, dan <code>rector-b.yaml</code>. Hanya saja secara default <em>Rector</em> akan menggunakan file <code>rector.yaml</code> yang pada direktori\ndimana kamu menjalankan perintah <code>rector</code>.</p>\n<p>Pada file <code>rector.yaml</code> ini kita bisa spesifikasikan beberapa hal, seperti <em>sets</em> yang ingin digunakan,\nfile autoloading tambahan, path pengecualian, dsb.\nTapi bakal panjang kalau saya contohin satu-persatu,\njadi disini saya contohin cara menerapkan beberapa <em>sets</em> sekaligus aja.</p>\n<p>Oke, jadi pertama-tama saya siapkan dulu contoh file yang mau di-<em>refactoring</em>-nya.\nSaya ubah <code>src/sample.php</code> menjadi seperti ini:</p>\n<pre class=\"shiki\" style=\"background-color: #191d21\"><code><span style=\"color: #FFFFFF\">[filename:~/Dev/rector/src/sample.php]</span>\n<span style=\"color: #EFEFEF\">&lt;?php</span>\n\n<span style=\"color: #FF0078\">try</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">{</span>\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">filename </span><span style=\"color: #EFEFEF\">=</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #FAC863\">isset</span><span style=\"color: #FFFFFF\">(</span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">argv</span><span style=\"color: #EFEFEF\">[</span><span style=\"color: #2BA8FF\">1</span><span style=\"color: #EFEFEF\">]</span><span style=\"color: #FFFFFF\">) ? </span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">argv</span><span style=\"color: #EFEFEF\">[</span><span style=\"color: #2BA8FF\">1</span><span style=\"color: #EFEFEF\">]</span><span style=\"color: #FFFFFF\"> : </span><span style=\"color: #2BA8FF\">null</span><span style=\"color: #EFEFEF\">;</span>\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #FF0078\">if</span><span style=\"color: #FFFFFF\"> (</span><span style=\"color: #EFEFEF\">!$</span><span style=\"color: #FFFFFF\">filename) </span><span style=\"color: #EFEFEF\">{</span>\n<span style=\"color: #FFFFFF\">        </span><span style=\"color: #FF0078\">throw</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #FF0078\">new</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #2BA8FF\">InvalidArgumentException</span><span style=\"color: #FFFFFF\">(</span><span style=\"color: #50E3C2\">\"Missing filename\"</span><span style=\"color: #FFFFFF\">)</span><span style=\"color: #EFEFEF\">;</span>\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #EFEFEF\">}</span>\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">json </span><span style=\"color: #EFEFEF\">=</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #FAC863\">json_decode</span><span style=\"color: #FFFFFF\">(</span><span style=\"color: #FAC863\">file_get_contents</span><span style=\"color: #FFFFFF\">(</span><span style=\"color: #FAC863\">dirname</span><span style=\"color: #FFFFFF\">(</span><span style=\"color: #2BA8FF\">__FILE__</span><span style=\"color: #FFFFFF\">)</span><span style=\"color: #EFEFEF\">.</span><span style=\"color: #50E3C2\">'/'</span><span style=\"color: #EFEFEF\">.</span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">filename))</span><span style=\"color: #EFEFEF\">;</span>\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #FAC863\">print_r</span><span style=\"color: #FFFFFF\">(</span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">json)</span><span style=\"color: #EFEFEF\">;</span>\n<span style=\"color: #EFEFEF\">}</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #FF0078\">catch</span><span style=\"color: #FFFFFF\"> (</span><span style=\"color: #2BA8FF\">JsonException</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">e) </span><span style=\"color: #EFEFEF\">{</span>\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #FAC863\">echo</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">e</span><span style=\"color: #EFEFEF\">-&gt;</span><span style=\"color: #FFFFFF\">getMessage()</span><span style=\"color: #EFEFEF\">;</span>\n<span style=\"color: #EFEFEF\">}</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #FF0078\">catch</span><span style=\"color: #FFFFFF\"> (</span><span style=\"color: #2BA8FF\">InvalidArgumentException</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">e) </span><span style=\"color: #EFEFEF\">{</span>\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #FAC863\">echo</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">e</span><span style=\"color: #EFEFEF\">-&gt;</span><span style=\"color: #FFFFFF\">getMessage()</span><span style=\"color: #EFEFEF\">;</span>\n<span style=\"color: #EFEFEF\">}</span></code></pre>\n<p>Misalkan saya ingin menerapkan 3 buah set, yakni set <code>php53</code>, <code>php70</code> dan <code>php71</code>.\nJadi mari kita buat file <code>rector.yaml</code> seperti dibawah ini:</p>\n<pre class=\"shiki\" style=\"background-color: #191d21\"><code><span style=\"color: #EFEFEF\">[</span><span style=\"color: #50E3C2\">filename:~/Dev/rector/rector.yaml</span><span style=\"color: #EFEFEF\">]</span>\n<span style=\"color: #2BA8FF\">parameters</span><span style=\"color: #EFEFEF\">:</span>\n<span style=\"color: #FFFFFF\">  </span><span style=\"color: #2BA8FF\">sets</span><span style=\"color: #EFEFEF\">:</span>\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #EFEFEF\">- </span><span style=\"color: #50E3C2\">php53</span>\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #EFEFEF\">- </span><span style=\"color: #50E3C2\">php70</span>\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #EFEFEF\">- </span><span style=\"color: #50E3C2\">php71</span></code></pre>\n<p>Selanjutnya mari kita cek dulu apa saja yang akan dirubah dengan perintah:</p>\n<code class=\"shiki\" style=\"background: #2e3440; color: #d8dee9\">./vendor/bin/rector process --dry-run src</code>\n<p>Outputnya akan seperti ini:</p>\n<pre class=\"shiki\" style=\"background-color: #191d21\"><code><span style=\"color: #FFFFFF\">Rector v0.6.2</span>\n<span style=\"color: #FFFFFF\">Config file: rector.yaml</span>\n\n<span style=\"color: #FFFFFF\">3/3 [============================] 100%</span>\n\n<span style=\"color: #FFFFFF\">1 file with changes</span>\n<span style=\"color: #FFFFFF\">===================</span>\n\n<span style=\"color: #FFFFFF\">1) src/sample.php</span>\n\n<span style=\"color: #FFFFFF\">  ---------- begin diff ----------</span>\n<span style=\"color: #FFFFFF\">--- Original</span>\n<span style=\"color: #FFFFFF\">+++ New</span>\n<span style=\"color: #FFFFFF\">@@ -1,13 +1,13 @@</span>\n<span style=\"color: #EFEFEF\">&lt;?php</span>\n\n<span style=\"color: #EFEFEF\">+</span><span style=\"color: #FF0078\">use</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #FF0078\">InvalidArgumentException</span><span style=\"color: #EFEFEF\">;</span>\n<span style=\"color: #EFEFEF\">+</span><span style=\"color: #FF0078\">use</span><span style=\"color: #FFFFFF\"> JsonException</span><span style=\"color: #EFEFEF\">;</span>\n<span style=\"color: #FF0078\">try</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">{</span>\n<span style=\"color: #EFEFEF\">-</span><span style=\"color: #FFFFFF\">    </span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">filename </span><span style=\"color: #EFEFEF\">=</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #FAC863\">isset</span><span style=\"color: #FFFFFF\">(</span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">argv</span><span style=\"color: #EFEFEF\">[</span><span style=\"color: #2BA8FF\">1</span><span style=\"color: #EFEFEF\">]</span><span style=\"color: #FFFFFF\">) ? </span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">argv</span><span style=\"color: #EFEFEF\">[</span><span style=\"color: #2BA8FF\">1</span><span style=\"color: #EFEFEF\">]</span><span style=\"color: #FFFFFF\"> : </span><span style=\"color: #2BA8FF\">null</span><span style=\"color: #EFEFEF\">;</span>\n<span style=\"color: #EFEFEF\">+</span><span style=\"color: #FFFFFF\">    </span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">filename </span><span style=\"color: #EFEFEF\">=</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">argv</span><span style=\"color: #EFEFEF\">[</span><span style=\"color: #2BA8FF\">1</span><span style=\"color: #EFEFEF\">]</span><span style=\"color: #FFFFFF\"> ?? </span><span style=\"color: #2BA8FF\">null</span><span style=\"color: #EFEFEF\">;</span>\n<span style=\"color: #FFFFFF\">     </span><span style=\"color: #FF0078\">if</span><span style=\"color: #FFFFFF\"> (</span><span style=\"color: #EFEFEF\">!$</span><span style=\"color: #FFFFFF\">filename) </span><span style=\"color: #EFEFEF\">{</span>\n<span style=\"color: #FFFFFF\">         </span><span style=\"color: #FF0078\">throw</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #FF0078\">new</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #2BA8FF\">InvalidArgumentException</span><span style=\"color: #FFFFFF\">(</span><span style=\"color: #50E3C2\">\"missing filename\"</span><span style=\"color: #FFFFFF\">)</span><span style=\"color: #EFEFEF\">;</span>\n<span style=\"color: #FFFFFF\">     </span><span style=\"color: #EFEFEF\">}</span>\n<span style=\"color: #EFEFEF\">-</span><span style=\"color: #FFFFFF\">    </span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">json </span><span style=\"color: #EFEFEF\">=</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #FAC863\">json_decode</span><span style=\"color: #FFFFFF\">(</span><span style=\"color: #FAC863\">file_get_contents</span><span style=\"color: #FFFFFF\">(</span><span style=\"color: #FAC863\">dirname</span><span style=\"color: #FFFFFF\">(</span><span style=\"color: #2BA8FF\">__FILE__</span><span style=\"color: #FFFFFF\">)</span><span style=\"color: #EFEFEF\">.</span><span style=\"color: #50E3C2\">'/'</span><span style=\"color: #EFEFEF\">.</span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">filename))</span><span style=\"color: #EFEFEF\">;</span>\n<span style=\"color: #EFEFEF\">-</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">}</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #FF0078\">catch</span><span style=\"color: #FFFFFF\"> (</span><span style=\"color: #2BA8FF\">JsonException</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">e) </span><span style=\"color: #EFEFEF\">{</span>\n<span style=\"color: #EFEFEF\">+</span><span style=\"color: #FFFFFF\">    </span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">json </span><span style=\"color: #EFEFEF\">=</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #FAC863\">json_decode</span><span style=\"color: #FFFFFF\">(</span><span style=\"color: #FAC863\">file_get_contents</span><span style=\"color: #FFFFFF\">(</span><span style=\"color: #2BA8FF\">__DIR__</span><span style=\"color: #EFEFEF\">.</span><span style=\"color: #50E3C2\">'/'</span><span style=\"color: #EFEFEF\">.</span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">filename))</span><span style=\"color: #EFEFEF\">;</span>\n<span style=\"color: #EFEFEF\">+</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">}</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #FF0078\">catch</span><span style=\"color: #FFFFFF\"> (JsonException|</span><span style=\"color: #2BA8FF\">InvalidArgumentException</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">e) </span><span style=\"color: #EFEFEF\">{</span>\n<span style=\"color: #FFFFFF\">     </span><span style=\"color: #FAC863\">echo</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">e</span><span style=\"color: #EFEFEF\">-&gt;</span><span style=\"color: #FFFFFF\">getMessage()</span><span style=\"color: #EFEFEF\">;</span>\n<span style=\"color: #EFEFEF\">-</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">}</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #FF0078\">catch</span><span style=\"color: #FFFFFF\"> (</span><span style=\"color: #2BA8FF\">InvalidArgumentException</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">e) </span><span style=\"color: #EFEFEF\">{</span>\n<span style=\"color: #EFEFEF\">-</span><span style=\"color: #FFFFFF\">    </span><span style=\"color: #FAC863\">echo</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">e</span><span style=\"color: #EFEFEF\">-&gt;</span><span style=\"color: #FFFFFF\">getMessage()</span><span style=\"color: #EFEFEF\">;</span>\n<span style=\"color: #EFEFEF\">-</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">}</span>\n<span style=\"color: #EFEFEF\">+</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">}</span>\n<span style=\"color: #FFFFFF\">\\ </span><span style=\"color: #2BA8FF\">No</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #5392DB\">newline</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #5392DB\">at</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #5392DB\">end</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #5392DB\">of</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #5392DB\">file</span>\n<span style=\"color: #FFFFFF\">  </span><span style=\"color: #EFEFEF\">-----------</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #5392DB\">end</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #5392DB\">diff</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">-----------</span>\n\n<span style=\"color: #5392DB\">Applied</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #5392DB\">rules</span><span style=\"color: #FFFFFF\">:</span>\n\n<span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">*</span><span style=\"color: #FFFFFF\"> Rector</span><span style=\"color: #EFEFEF\">\\</span><span style=\"color: #FFFFFF\">Php71</span><span style=\"color: #EFEFEF\">\\</span><span style=\"color: #FFFFFF\">Rector</span><span style=\"color: #EFEFEF\">\\</span><span style=\"color: #FFFFFF\">TryCatch</span><span style=\"color: #EFEFEF\">\\</span><span style=\"color: #5392DB\">MultiExceptionCatchRector</span>\n<span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">*</span><span style=\"color: #FFFFFF\"> Rector</span><span style=\"color: #EFEFEF\">\\</span><span style=\"color: #FFFFFF\">Php70</span><span style=\"color: #EFEFEF\">\\</span><span style=\"color: #FFFFFF\">Rector</span><span style=\"color: #EFEFEF\">\\</span><span style=\"color: #FFFFFF\">Ternary</span><span style=\"color: #EFEFEF\">\\</span><span style=\"color: #5392DB\">TernaryToNullCoalescingRector</span>\n<span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">*</span><span style=\"color: #FFFFFF\"> Rector</span><span style=\"color: #EFEFEF\">\\</span><span style=\"color: #FFFFFF\">Php53</span><span style=\"color: #EFEFEF\">\\</span><span style=\"color: #FFFFFF\">Rector</span><span style=\"color: #EFEFEF\">\\</span><span style=\"color: #FFFFFF\">FuncCall</span><span style=\"color: #EFEFEF\">\\</span><span style=\"color: #5392DB\">DirNameFileConstantToDirConstantRector</span>\n\n\n<span style=\"color: #EFEFEF\">[</span><span style=\"color: #5392DB\">OK</span><span style=\"color: #EFEFEF\">]</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #5392DB\">Rector</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #5392DB\">is</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #5392DB\">done</span><span style=\"color: #EFEFEF\">!</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #2BA8FF\">1</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #5392DB\">changed</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #5392DB\">files</span><span style=\"color: #FFFFFF\">                                                                         </span></code></pre>\n<p>Disitu bisa kita lihat bagian-bagian yang ditambah dan dihapus.\nJuga pada bagian bawah kita dapat lihat ada 3 <em>Rector</em> yang digunakan, yaitu:</p>\n<ol>\n<li><code>Rector\\Php71\\Rector\\TryCatch\\MultiExceptionCatchRector</code> dari set <code>php71</code>.</li>\n<li><code>Rector\\Php70\\Rector\\Ternary\\TernaryToNullCoalescingRector</code> dari set <code>php70</code>.</li>\n<li><code>Rector\\Php53\\Rector\\FuncCall\\DirNameFileConstantToDirConstantRector</code> dari set <code>php53</code>.</li>\n</ol>\n<p>Kalau sekiranya oke, mari kita aplikasikan ke filenya dengan menghapuskan <code>--dry-run</code> seperti dibawah ini:</p>\n<pre class=\"shiki\" style=\"background-color: #191d21\"><code><span style=\"color: #FFFFFF\">./vendor/bin/rector process src</span></code></pre>\n<p>Sekarang, kalau kita lihat filenya, maka akan jadi seperti ini:</p>\n<pre class=\"shiki\" style=\"background-color: #191d21\"><code><span style=\"color: #FFFFFF\">[filename:~/Dev/rector/src/sample.php]</span>\n<span style=\"color: #EFEFEF\">&lt;?php</span>\n\n<span style=\"color: #FF0078\">use</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #FF0078\">InvalidArgumentException</span><span style=\"color: #EFEFEF\">;</span>\n<span style=\"color: #FF0078\">use</span><span style=\"color: #FFFFFF\"> JsonException</span><span style=\"color: #EFEFEF\">;</span>\n<span style=\"color: #FF0078\">try</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">{</span>\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">filename </span><span style=\"color: #EFEFEF\">=</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">argv</span><span style=\"color: #EFEFEF\">[</span><span style=\"color: #2BA8FF\">1</span><span style=\"color: #EFEFEF\">]</span><span style=\"color: #FFFFFF\"> ?? </span><span style=\"color: #2BA8FF\">null</span><span style=\"color: #EFEFEF\">;</span>\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #FF0078\">if</span><span style=\"color: #FFFFFF\"> (</span><span style=\"color: #EFEFEF\">!$</span><span style=\"color: #FFFFFF\">filename) </span><span style=\"color: #EFEFEF\">{</span>\n<span style=\"color: #FFFFFF\">        </span><span style=\"color: #FF0078\">throw</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #FF0078\">new</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #2BA8FF\">InvalidArgumentException</span><span style=\"color: #FFFFFF\">(</span><span style=\"color: #50E3C2\">\"missing filename\"</span><span style=\"color: #FFFFFF\">)</span><span style=\"color: #EFEFEF\">;</span>\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #EFEFEF\">}</span>\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">json </span><span style=\"color: #EFEFEF\">=</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #FAC863\">json_decode</span><span style=\"color: #FFFFFF\">(</span><span style=\"color: #FAC863\">file_get_contents</span><span style=\"color: #FFFFFF\">(</span><span style=\"color: #2BA8FF\">__DIR__</span><span style=\"color: #EFEFEF\">.</span><span style=\"color: #50E3C2\">'/'</span><span style=\"color: #EFEFEF\">.</span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">filename))</span><span style=\"color: #EFEFEF\">;</span>\n<span style=\"color: #EFEFEF\">}</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #FF0078\">catch</span><span style=\"color: #FFFFFF\"> (JsonException|</span><span style=\"color: #2BA8FF\">InvalidArgumentException</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">e) </span><span style=\"color: #EFEFEF\">{</span>\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #FAC863\">echo</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">e</span><span style=\"color: #EFEFEF\">-&gt;</span><span style=\"color: #FFFFFF\">getMessage()</span><span style=\"color: #EFEFEF\">;</span>\n<span style=\"color: #EFEFEF\">}</span></code></pre>\n<h2 id=\"penutup\"><a href=\"#penutup\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Penutup</h2>\n<p>Oke mungkin segitu saja untuk artikel pengenalan <em>Rector</em> kali ini.\nKarena <em>tool</em> ini umurnya masih terbilang baru, jadi memang mungkin belum banyak yang bisa kita lakukan.\nTapi kedepan mungkin akan banyak tambahan-tambahan <em>Rector</em> lain yang dapat membantu <em>task</em> <em>refactoring</em> kita.\nJadi tidak ada salahnya kita pelajari sejak awal.</p>\n<p>Yaudah, sekian untuk artikel kali ini. Semoga bermanfaat. Dadah ~</p>\n","excerpt":"","description":"Upgrade dan refactoring kode PHP kamu secara instan","author":{"id":"Muhammad Syifa","title":"Muhammad Syifa","path":"/author/Muhammad%20Syifa/"}}}]}}},"context":{}}