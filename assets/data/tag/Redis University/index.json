{"hash":"1edf71e944044bc70c25b692f010f187723da530","data":{"tag":{"id":"Redis University","title":"Redis University","path":"/tag/Redis%20University/","belongsTo":{"totalCount":8,"pageInfo":{"totalPages":2,"currentPage":1},"edges":[{"node":{"id":"be8e7a02e0533f43d78409c7df8d067e","title":"Redis University RU202 - Minggu Ke-2","datetime":"2019-08-23 11:00:00","path":"/artikel/redis-university-ru202-minggu-ke-2/","icon":"/images/icons/redis.png","content":"<p>Ini adalah catatan minggu ke-2 dari apa yang saya pelajari di kelas RU202-nya <a href=\"https://university.redislabs.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Redis University</a> yang berjudul <strong>\"Redis Streams\"</strong>.</p>\n<p>Pada minggu ke-2 ini topik pembahasannya adalah:</p>\n<ol>\n<li>Producer</li>\n<li>Range Queries</li>\n<li>The Consumer</li>\n</ol>\n<h2 id=\"1-producer\"><a href=\"#1-producer\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Producer</h2>\n<p>Pada bagian ini dijelaskan panjang lebar mengenai <em>stream producer</em>, disini saya rangkum saja kedalam beberapa poin dibawah ini: </p>\n<ul>\n<li><em>Stream Producer</em> adalah software/aplikasi yang berperan sebagai pengirim data kedalam stream.</li>\n<li>Data di dalam stream disebut sebagai 'message'.</li>\n<li><em>Stream Producer</em> menggunakan Redis Client API untuk memasukkan message kedalam stream.</li>\n<li>Pada Redis CLI, kita bisa menggunakan perintah <code>XADD stream_name message_id field value [field_2 value_2 ... field_n value_n]</code> untuk menambahkan message kedalam stream. Contoh untuk mengirim data temperatur kedalam stream: <code>XADD temperature * celcius 39</code>.</li>\n</ul>\n<h4 id=\"message-id\"><a href=\"#message-id\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Message ID</h4>\n<ul>\n<li>Untuk generate message ID secara otomatis, gunakan <code>*</code> (seperti contoh diatas). </li>\n<li>Message ID tidak dapat diubah.</li>\n<li>\n<p>Contoh message ID hasil generate: <code>1566533258158-0</code></p>\n<ul>\n<li><code>1566533258158</code>: <em>millisecond-timestamp</em>.</li>\n<li><code>0</code>: <em>sub-millisecond-sequence</em>, jika terdapat pesan dalam <em>millisecond-timestamp</em> yang sama, maka angka ini bertambah. Dan angka ini akan 0 kembali pada <em>millisecond-timestamp</em> yang berbeda.</li>\n</ul>\n</li>\n<li>\n<p>Contoh membuat message ID secara manual: <code>XADD mystream 100 x 1</code>.</p>\n<ul>\n<li>Message ID harus berupa unsigned integer (paling kecil 0).</li>\n<li>Hasil ID digenerate: <code>100-0</code> dimana <code>0</code> adalah urutan dari id <code>100</code>.</li>\n<li>Catatan: setelah menambahkan message dengan ID 100 kedalam stream mystream, maka kita tidak dapat menambahkan message dengan ID dibawah 100 kedalam stream mystream tersebut.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"message-payload\"><a href=\"#message-payload\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Message Payload</h4>\n<ul>\n<li>Message payload pada Redis Stream memiliki struktur data seperti hash (<code>Map&#x3C;String, String></code>).</li>\n<li>Tidak ada batasan berapa field yang dapat disimpan didalam setiap message.</li>\n<li>\n<p>Redis akan secara otomatis melakukan kompresi pada nama field di stream yang sama, contoh:</p>\n<ul>\n<li><code>XADD coordinates * latitude 0.1 longitude 1.0</code></li>\n<li><code>XADD coordinates * latitude 0.2 longitude 1.0</code></li>\n<li><code>XADD coordinates * latitude 0.3 longitude 1.1</code></li>\n<li>Pada 3 perintah <code>XADD</code> diatas, maka redis tidak akan menyimpan nama field <code>latitude</code> dan <code>longitude</code> pada 2 perintah <code>XADD</code> bawahnya.</li>\n<li>Tapi, jika perintah <code>XADD</code> selanjutnya memiliki field yang berbeda, entah ditambah field baru, atau ada field yang berubah, maka redis akan menyimpan nama field message tersebut secara utuh.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"managing-the-length-of-a-stream\"><a href=\"#managing-the-length-of-a-stream\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Managing the Length of a Stream</h4>\n<p>Untuk membatasi banyaknya message pada stream supaya tidak terlalu bengkak, dapat gunakan beberapa cara berikut:</p>\n<ol>\n<li>Gunakan <code>XADD</code> dengan <code>MAXLEN</code>. Contoh <code>XADD mystream * foo bar MAXLEN 1000</code>, maka jika ini adalah message yang ke-1001, message paling lama akan dihapus sehingga jumlah messagenya menjadi 1000.</li>\n<li>Gunakan perintah <code>XDEL</code>. Cara ini tidak dianjurkan karena tidak efektif.</li>\n<li>Gunakan perintah <code>XTRIM</code>. Contoh <code>XTRIM mystream MAXLEN 1000</code>, maka message ke 1001 sampai dengan yang paling lama akan dihapus.</li>\n</ol>\n<p>Yang saya masih bingung setelah melakukan proses diatas, message pada stream memang betul akan hilang,\ndalam artian ketika kita gunakan <code>XRANGE mystream - +</code> message yang terhapus tidak lagi muncul. Tetapi saat digunakan <code>MEMORY USAGE mystream</code>, memori yang terpakai masih sama. Dia ngasih tau sih memang saat menghapus message pada stream, message tidak secara langsung hilang, melainkan hanya diberi flag \"deleted\". Cuma yang masih belum saya tau, kapan memori tersebut benar-benar dihapus?</p>\n<p>Selain cara diatas, sebetulnya ada cara lain yang disarankan, yaitu menggunakan <code>XTRIM mystream MAXLEN ~ 1000</code>, atau <code>XADD mystream * foo bar MAXLEN ~ 1000</code>, ini penjelasan mereka tentang tanga <code>~</code>:</p>\n<blockquote>\n<p>The ~ argument between the MAXLEN option and the actual count means that the user is not really requesting that the stream length is exactly 1000 items, but instead it could be a few tens of entries more, but never less than 1000 items. When this option modifier is used, the trimming is performed only when Redis is able to remove a whole macro node. This makes it much more efficient, and it is usually what you want.</p>\n</blockquote>\n<p>Kenapa saya tidak masukkan cara ini di list, karena saya belum mengerti betul cara kerja si <code>~</code> itu.\nDisitu tertulis \"could be a few tens of entries more\", jadi saya coba buat stream dengan 100 message, dengan harapan setelah saya coba <code>XTRIM mystream MAXLEN ~ 10</code> maka akan menghapus <code>mystream</code> menjadi 10-50 message (few tens more). Tapi ternyata tidak terjadi apa-apa, <code>XLEN mystream</code> masih tetap 100.</p>\n<p>Entahlah, mungkin kalau messagenya ribuan bakal dihapus. Mungkin.</p>\n<h2 id=\"2-range-queries\"><a href=\"#2-range-queries\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Range Queries</h2>\n<p>Untuk mengambil  message dalam range ID tertentu, dapat menggunakan perintah <code>XRANGE</code> dan <code>XREVRANGE</code>. Perbedaannya adalah <code>XRANGE</code> akan mengambil message dan mengurutkannya secara <em>ascending</em> (dari paling awal), <code>XREVRANGE</code> akan mengambil message dan mengurutkannya secara <em>descending</em> (dari paling akhir).</p>\n<p>Berikut contoh-contoh penggunaan <code>XRANGE</code> dan <code>XREVRANGE</code>:</p>\n<div class='code-container'><pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #676E95\"># Beberapa cara mengambil semua message di dalam mystream</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">XRANGE mystream - +</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">XRANGE mystream 0-0 +</span></span>\n\n<span class=\"line\"><span style=\"color: #676E95\"># Mengambil semua message dari 1526985054069-0 s/d data terakhir di dalam mystream</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">XRANGE mystream 1526985054069-0 +</span></span>\n\n<span class=\"line\"><span style=\"color: #676E95\"># Mengambil semua message diantara 1526985054069-0 s/d 1531243452312-0 terakhir di dalam mystream</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">XRANGE mystream 1526985054069-0 1531243452312-0</span></span>\n\n<span class=\"line\"><span style=\"color: #676E95\"># Mengambil 10 message PERTAMA dari mystream</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">XRANGE mystream - + COUNT 10</span></span>\n\n<span class=\"line\"><span style=\"color: #676E95\"># Mengambil 10 message TERAKHIR dari mystream</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">XREVRANGE mystream + - COUNT 10</span></span></code></pre></div>\n<p>Tanda <code>-</code> dan <code>+</code> adalah special ID, <code>-</code> adalah alias untuk ID awal (0-0), sedangkan <code>+</code> adalah alias untuk ID terakhir (18446744073709551615-18446744073709551615).</p>\n<h2 id=\"3-the-consumer\"><a href=\"#3-the-consumer\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. The Consumer</h2>\n<p>Untuk men-<em>consume</em> data pada stream, dapat menggunakan perintah <code>XREAD</code>. Berikut adalah beberapa contoh penggunaan <code>XREAD</code>.</p>\n<div class='code-container'><pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #A6ACCD\">XREAD COUNT 1 STREAMS mystream</span></span></code></pre></div>\n","excerpt":"Ini adalah catatan minggu ke-2 dari apa yang saya pelajari di kelas RU202-nya Redis University yang berjudul \"Redis Streams\". Pada minggu ke-2 ini topik pembahasannya adalah:  Producer Range Queries","description":"Catatan kelas Redis University RU102 minggu ke-2","author":{"id":"Muhammad Syifa","title":"Muhammad Syifa","path":"/author/Muhammad%20Syifa/"}}},{"node":{"id":"821c2e8957c9f9558e8a4bf1e2c0c961","title":"Redis University RU201 - Minggu Ke-2","datetime":"2019-08-20 10:00:00","path":"/artikel/redis-university-ru201-minggu-ke-2/","icon":"/images/icons/redis.png","content":"<p>Ini adalah catatan minggu ke-2 dari apa yang saya pelajari di kelas RU201-nya <a href=\"https://university.redislabs.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Redis University</a> yang berjudul <strong>\"RediSearch\"</strong>.</p>\n<p>Pada minggu ke-2 topik pembahasannya adalah seputar penggunaan query pada RediSearch.</p>\n<p>Bingung juga mau nyatetnya gimana, langsung ke contoh querynya ajalah ya.\nBtw query <code>SELECT</code> yang saya tulis pada komentar dibawah itu bukan SQL beneran, semacam <em>pseudo-code</em> SQL aja.</p>\n<div class='code-container'><pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #676E95\"># Membuat index articles, ini sama kayak buat table di RDBMS</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">FT.CREATE articles SCHEMA title TEXT WEIGHT 5.0 body TEXT author_name TEXT</span></span>\n\n<span class=\"line\"><span style=\"color: #676E95\"># Menambahkan artikel ke index articles, ini sama kayak insert data ke table</span></span>\n<span class=\"line\"><span style=\"color: #676E95\"># Syntax: FT.ADD index_name id score FIELDS field value [{field} {value}...]</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">FT.ADD articles articles 123 0.5 FIELDS title </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">Lorem Ipsum</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\"> body </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">Lorem ipsum dolor sit amet</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\"> author_name </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">John Doe</span><span style=\"color: #89DDFF\">&quot;</span></span>\n\n<span class=\"line\"><span style=\"color: #676E95\"># SELECT * FROM articles WHERE somehow match &quot;lorem&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">FT.SEARCH articles </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">lorem</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\"> LIMIT 0 10</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">1) </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">integer</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #A6ACCD\"> 1  </span><span style=\"color: #676E95\"># count</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">2) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">123</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\">        </span><span style=\"color: #676E95\"># ID</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">3) 1) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">title</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">   2) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">Lorem Ipsum</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">   3) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">body</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">   4) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">Lorem ipsum dolor sit amet</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">   5) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">author_name</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">   6) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">John Doe</span><span style=\"color: #89DDFF\">&quot;</span></span>\n\n<span class=\"line\"><span style=\"color: #676E95\"># SELECT * FROM articles WHERE somehow match &quot;lorem&quot; OR &quot;ipsum&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">FT.SEARCH articles </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">lorem|ipsum</span><span style=\"color: #89DDFF\">&quot;</span></span>\n\n<span class=\"line\"><span style=\"color: #676E95\"># SELECT * FROM articles WHERE somehow match &quot;lorem&quot; AND &quot;ipsum&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">FT.SEARCH articles </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">lorem ipsum</span><span style=\"color: #89DDFF\">&quot;</span></span>\n\n<span class=\"line\"><span style=\"color: #676E95\"># SELECT * FROM articles WHERE somehow match &quot;lorem ipsum&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">FT.SEARCH articles </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\">\\&quot;</span><span style=\"color: #C3E88D\">lorem ipsum</span><span style=\"color: #A6ACCD\">\\&quot;</span><span style=\"color: #89DDFF\">&quot;</span></span>\n\n<span class=\"line\"><span style=\"color: #676E95\"># SELECT * FROM articles WHERE somehow match &quot;lorem&quot; AND not contains &quot;ipsum&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">FT.SEARCH articles </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">lorem -ipsum</span><span style=\"color: #89DDFF\">&quot;</span></span>\n\n<span class=\"line\"><span style=\"color: #676E95\"># SELECT * FROM articles WHERE somehow match &quot;lorem&quot; OR not contains &quot;ipsum&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">FT.SEARCH articles </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">lorem|-ipsum</span><span style=\"color: #89DDFF\">&quot;</span></span>\n\n<span class=\"line\"><span style=\"color: #676E95\"># SELECT * FROM articles WHERE anyfields LIKE &quot;lorem%&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">FT.SEARCH articles </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">lorem*</span><span style=\"color: #89DDFF\">&quot;</span></span>\n\n<span class=\"line\"><span style=\"color: #676E95\"># SELECT * FROM articles WHERE levehnstein(index) sounds like &quot;lorem&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">FT.SEARCH articles </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">%lorem%</span><span style=\"color: #89DDFF\">&quot;</span></span>\n\n<span class=\"line\"><span style=\"color: #676E95\"># SELECT * FROM articles WHERE (somehow match &quot;lorem&quot; AND &quot;ipsum&quot;) OR somehow match &quot;foo&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">FT.SEARCH articles </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">(lorem ipsum)|foo</span><span style=\"color: #89DDFF\">&quot;</span></span>\n\n<span class=\"line\"><span style=\"color: #676E95\"># SELECT * FROM articles WHERE (somehow match &quot;lorem&quot; AND &quot;ipsum&quot;) OR (somehow match &quot;foo&quot; AND &quot;bar&quot;)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">FT.SEARCH articles </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">(lorem ipsum)|(foo bar)</span><span style=\"color: #89DDFF\">&quot;</span></span>\n\n<span class=\"line\"><span style=\"color: #676E95\"># SELECT * FROM articles WHERE (somehow match &quot;lorem&quot; AND &quot;ipsum&quot;) OR not contains &quot;foo&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">FT.SEARCH articles </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">(lorem ipsum)|-foo</span><span style=\"color: #89DDFF\">&quot;</span></span></code></pre></div>\n<p>Dokumentasi selengkapnya tentang <code>FT.CREATE</code>, <code>FT.ADD</code>, dan <code>FT.SEARCH</code> bisa dilihat pada link dibawah ini:</p>\n<ul>\n<li><a href=\"https://oss.redislabs.com/redisearch/Commands/#ftcreate\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FT.CREATE</a></li>\n<li><a href=\"https://oss.redislabs.com/redisearch/Commands/#ftadd\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FT.ADD</a></li>\n<li><a href=\"https://oss.redislabs.com/redisearch/Commands/#ftsearch\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FT.SEARCH</a></li>\n</ul>\n<p>Selanjutnya adalah memahami hasi dari <code>FT.EXPLAIN</code>. Buat kamu yang terbiasa dengan RDBMS mungkin sudah familiar dengan perintah <code>explain</code>, ya perintah ini digunakan untuk menjabarkan query. Di RediSearch sendiri <code>FT.EXPLAIN</code> ini digunakan untuk menjabarkan query pencarian (<code>FT.SEARCH</code>).</p>\n<p>Berikut adalah contoh penggunaan <code>FT.EXPLAIN</code> beserta penjelasannya.</p>\n<div class='code-container'><pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #A6ACCD\">FT.EXPLAIN articles </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">lorem ipsum</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">INTERSECT </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  UNION </span><span style=\"color: #89DDFF\">{</span><span style=\"color: #A6ACCD\"> </span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    lorem</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #A6ACCD\">LRM</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">expanded</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    +lorem</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">expanded</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #89DDFF\">}</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  UNION </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    ipsum</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #A6ACCD\">APSM</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">expanded</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    +ipsum</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">expanded</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #89DDFF\">}</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">}</span></span></code></pre></div>\n<p>Haduh, gimana jelasinnya ya. Mesti pakai gambar ini. Nanti deh saya buatin.\nSementara silahkan bandingin sendiri aja sama hasil explain dibawah ini:</p>\n<div class='code-container'><pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #A6ACCD\">FT.EXPLAIN articles </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">lorem</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">UNION </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  lorem</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #A6ACCD\">LRM</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">expanded</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  +lorem</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">expanded</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">}</span></span>\n\n<span class=\"line\"><span style=\"color: #A6ACCD\">FT.EXPLAIN articles </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">lorem|ipsum</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">UNION </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  UNION </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    lorem</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #A6ACCD\">LRM</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">expanded</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    +lorem</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">expanded</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #89DDFF\">}</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  UNION </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    ipsum</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #A6ACCD\">APSM</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">expanded</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    +ipsum</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">expanded</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #89DDFF\">}</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">}</span></span>\n\n<span class=\"line\"><span style=\"color: #A6ACCD\">FT.EXPLAIN articles </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\">\\&quot;</span><span style=\"color: #C3E88D\">lorem</span><span style=\"color: #A6ACCD\">\\&quot;</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">lorem</span><span style=\"color: #89DDFF\">&quot;</span></span>\n\n<span class=\"line\"><span style=\"color: #A6ACCD\">FT.EXPLAIN articles </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\">\\&quot;</span><span style=\"color: #C3E88D\">lorem</span><span style=\"color: #A6ACCD\">\\&quot;</span><span style=\"color: #C3E88D\">|ipsum</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">UNION </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  lorem</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  UNION </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    ipsum</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #A6ACCD\">APSM</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">expanded</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    +ipsum</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">expanded</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #89DDFF\">}</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">}</span></span>\n\n<span class=\"line\"><span style=\"color: #A6ACCD\">FT.EXPLAIN articles </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\">\\&quot;</span><span style=\"color: #C3E88D\">lorem</span><span style=\"color: #A6ACCD\">\\&quot;</span><span style=\"color: #C3E88D\"> ipsum</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">INTERSECT </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  lorem</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  UNION </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    ipsum</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #A6ACCD\">APSM</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">expanded</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    +ipsum</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">expanded</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #89DDFF\">}</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">}</span></span>\n\n<span class=\"line\"><span style=\"color: #A6ACCD\">FT.EXPLAIN articles </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\">\\&quot;</span><span style=\"color: #C3E88D\">lorem</span><span style=\"color: #A6ACCD\">\\&quot;</span><span style=\"color: #C3E88D\"> -ipsum</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">INTERSECT </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  lorem</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  NOT{</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    ipsum</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #89DDFF\">}</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span></code></pre></div>\n<p>Dari beberapa hasil explain diatas, saya sih ngerti ya, soalnya sambil keinget sama penjelasan di videonya.\nCuma nanti kalau ada waktu saya coba gambarin pakai <em>venn diagram</em> deh.</p>\n<hr>\n<p>Yaudah segitu aja untuk minggu ke-2 di RU201. Saat saya nulis ini sebetulnya sudah masuk minggu ke-3, tapi mungkin saya akan nulis minggu ke-3 nanti di minggu ke-4. Jadi segitu aja catatan minggu ini, bye.</p>\n","excerpt":"Ini adalah catatan minggu ke-2 dari apa yang saya pelajari di kelas RU201-nya Redis University yang berjudul \"RediSearch\". Pada minggu ke-2 topik pembahasannya adalah seputar penggunaan query pada","description":"Catatan kelas Redis University RU201 minggu ke-2","author":{"id":"Muhammad Syifa","title":"Muhammad Syifa","path":"/author/Muhammad%20Syifa/"}}},{"node":{"id":"9434f7551f62142c1b60cc06f454eb56","title":"Redis University RU102J - Minggu Ke-2","datetime":"2019-08-18 09:00:00","path":"/artikel/redis-university-ru102j-minggu-ke-2/","icon":"/images/icons/redis.png","content":"<p>Ini adalah catatan minggu ke-2 saya di kelas RU102J-nya Redis University.\nJika pada minggu pertama hanya sebatas setup java environment, java redis client dan perkenalan DAO pattern,\npada minggu ini kita mulai membuat aplikasi RediSolar.</p>\n<p>Spesifiknya, minggu ini topik pembahasannya adalah:</p>\n<ol>\n<li>Pengenalan Data Model</li>\n<li>Metrics with Sorted Sets</li>\n<li>Making Lua Script</li>\n<li>Pipelining with Jedis</li>\n<li>Transactions with Jedis</li>\n</ol>\n<h2 id=\"1-pengenalan-data-model\"><a href=\"#1-pengenalan-data-model\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Pengenalan Data Model</h2>\n<p>Data model ini sebetulnya sudah sedikit disinggung pada minggu pertama pada diagram DAO.\nCuma disini dicontohkan membuat data model untuk MeterReading (meteran).</p>\n<p>Jadi untuk membuat aplikasi RediSolar ini, kita membutuhkan data model class MeterReading dengan\nproperti seperti dibawah ini:</p>\n<div class='code-container'><pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">class</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">MeterReading</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">Long</span><span style=\"color: #A6ACCD\"> siteId</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #A6ACCD\">            </span><span style=\"color: #676E95\">// ID lokasi (rumah)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">ZonedDateTime</span><span style=\"color: #A6ACCD\"> dateTime</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #676E95\">// waktu</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">Double</span><span style=\"color: #A6ACCD\"> whUsed</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #A6ACCD\">          </span><span style=\"color: #676E95\">// daya digunakan</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">Double</span><span style=\"color: #A6ACCD\"> whGenerated</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #A6ACCD\">     </span><span style=\"color: #676E95\">// daya digenerate</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">Double</span><span style=\"color: #A6ACCD\"> tempC</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #A6ACCD\">           </span><span style=\"color: #676E95\">// suhu dalam celcius</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">}</span></span></code></pre></div>\n<h2 id=\"2-metrics-with-sorted-sets\"><a href=\"#2-metrics-with-sorted-sets\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Metrics with Sorted Sets</h2>\n<p>Kemudian untuk menyimpan metric, struktur data yang digunakan adalah sorted sets dengan\nformat key dan value seperti dibawah ini:</p>\n<p>Format key:</p>\n<div class='code-container'><pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #A6ACCD\">metrics:wHg:2020-01-01:1</span></span></code></pre></div>\n<p>Dimana:</p>\n<ul>\n<li><code>metrics</code>: prefix</li>\n<li><code>wHg</code>: unit (satuan)</li>\n<li><code>2020-01-01</code>: tanggal</li>\n<li><code>1</code>: site ID</li>\n</ul>\n<p>Sedangkan untuk struktur sorted setnya adalah sebagai berikut:</p>\n<ul>\n<li>score: menit</li>\n<li>value: nilai:menit</li>\n</ul>\n<p>Contoh, perintah <code>ZADD</code> dibawah ini maksudnya adalah:</p>\n<div class='code-container'><pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #A6ACCD\">ZADD metrics:wHg:2020-01-01:1 30 18.5:30</span></span></code></pre></div>\n<ul>\n<li>Unit: wHg (watt hours generated)</li>\n<li>Tanggal: 2020-01-01</li>\n<li>Site ID: 1</li>\n<li>Menit: 30</li>\n<li>Nilai: 18.5</li>\n</ul>\n<p>Struktur seperti diatas digunakan karena:</p>\n<ol>\n<li>Pengukuran (metrics) akan secara otomatis disortir.</li>\n<li>Efisien untuk di fetch: O((log n) + m).</li>\n<li>Efisien untuk insert: O(log n).</li>\n<li>Hemat memori.</li>\n</ol>\n<h2 id=\"3-making-lua-script\"><a href=\"#3-making-lua-script\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. Making Lua Script</h2>\n<p>Topik pembahasan selanjutnya adalah tentang tata cara menjalankan script Lua pada Java untuk melakukan atomic transaction di Redis. Kalau di MySQL atau RDBMS lain mungkin kalian familiar dengan istilah stored procedure, nah si Lua disini perannya seperti itu.</p>\n<p>Sebagai contoh, kita ingin membuat script untuk mengupdate sebuah key, hanya jika key belum ada, atau nilai yang baru lebih rendah dari nilainya saat ini.</p>\n<p>Pertama kita harus persiapkan class <code>UpdateIfLowerScript</code> sebagai berikut (pahami sendiri):</p>\n<div class='code-container'><pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">class</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">UpdateIfLowerScript</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">{</span></span>\n\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">final</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">Jedis</span><span style=\"color: #A6ACCD\"> jedis</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">final</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #A6ACCD\"> sha</span><span style=\"color: #89DDFF\">;</span></span>\n\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">final</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">static</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #A6ACCD\"> script </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">local key = KEYS[1]</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #A6ACCD\">  </span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">local new = ARGS[1]</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #A6ACCD\">  </span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">local current = redis.call(&#39;GET&#39;, key)</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #A6ACCD\">  </span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">if (current == false or (tonumber(new) &lt; tonumber(current))) then</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">+</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">    redis.call(&#39;SET&#39;, key, new)</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #A6ACCD\"> </span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">    return 1</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #A6ACCD\">  </span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">else</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #A6ACCD\"> </span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">    return 0</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #A6ACCD\"> </span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">end</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">+</span></span>\n\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #82AAFF\">UpdateIfLowerScript</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">Jedis</span><span style=\"color: #A6ACCD\"> jedis</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #89DDFF\">this.</span><span style=\"color: #A6ACCD\">jedis </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> jedis</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #89DDFF\">this.</span><span style=\"color: #A6ACCD\">sha </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> jedis</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">scriptLoad</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">script</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #89DDFF\">}</span></span>\n\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">boolean</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #82AAFF\">updateIfLower</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">String</span><span style=\"color: #A6ACCD\"> key</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #A6ACCD\"> newValue</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">String</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #A6ACCD\"> keys </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> Collections</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">singletonList</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">key</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">String</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #A6ACCD\"> args </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> Collections</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">singletonList</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">newValue</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #C792EA\">Object</span><span style=\"color: #A6ACCD\"> response </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> jedis</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">evalsha</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">sha</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> keys</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> args</span><span style=\"color: #89DDFF\">);</span></span>\n\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #89DDFF\">return</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">Long</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #A6ACCD\"> response </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #89DDFF\">}</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span></code></pre></div>\n<p>Selanjutnya, cara panggilnya ya tinggal buat aja instancenya, lalu panggil methodnya seperti dibawah ini:</p>\n<div class='code-container'><pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #C792EA\">UpdateIfLowerScript</span><span style=\"color: #A6ACCD\"> script </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">new</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #82AAFF\">UpdateIfLowerScript</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">jedis</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">boolean</span><span style=\"color: #A6ACCD\"> result </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> script</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">updateIfLower</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">keynya</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #F78C6C\">100</span><span style=\"color: #89DDFF\">);</span></span></code></pre></div>\n<p>Oia katanya biasanya bakal banyak script Lua di project Java kita, jadi supaya rapih sebisa mungkin dibuat 1 script 1 class, dan disimpan dalam 1 folder yang sama.</p>\n<p>Dan kenapa nggak pakai script Java aja langsung? seperti yang disinggung diatas, script Lua ini bersifat atomic.\nYang artinya script akan membloking eksekusi dari Redis Client lain sampai script Lua ini selesai dijalankan.\nJadi tidak ada transaksi dari Redis Client lain yang terselip ditengah-tengah Lua script ini.</p>\n<h2 id=\"4-pipelining-with-jedis\"><a href=\"#4-pipelining-with-jedis\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. Pipelining with Jedis</h2>\n<p>Pembahasan selanjutnya adalah tentang penggunaan pipeline. Pada DBMS lain, istilah yang mirip-mirip dengan pipeline adalah transaction. Dengan pipeline kita bisa mengirim banyak perintah sekaligus sehingga Redis Client nggak perlu bolak-balik request-response ke Redis Server.</p>\n<p>Bayangin kamu ke warung mau beli mie instan dan saos. Jika kamu adalah Redis Client, secara default kamu akan bolak-balik, beli mie instan dulu, sampai rumah, kemudian balik lagi untuk beli saos, terus balik lagi ke rumah. Dengan pipeline, kamu (si Redis Client) akan membeli mie instan dan saos secara bersamaan. Efeknya? tentu saja mempercepat waktu eksekusi dan latency.</p>\n<p>Di Jedis sendiri, cara menggunakan pipeline adalah sebagai berikut:</p>\n<div class='code-container'><pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #C792EA\">Long</span><span style=\"color: #A6ACCD\"> siteId </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #F78C6C\">1L</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">Pipeline</span><span style=\"color: #A6ACCD\"> p </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> jedis</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">pipelined</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #A6ACCD\">  </span><span style=\"color: #676E95\">// inisiasi pipeline</span></span>\n\n<span class=\"line\"><span style=\"color: #C792EA\">Response</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Long</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #A6ACCD\"> hsetResponse </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> p</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">hset</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">statusKey</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">available</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">true</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #676E95\">// push hset command to pipeline</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">Response</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Long</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #A6ACCD\"> expireResponse </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> p</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">expire</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">statusKey</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #F78C6C\">1000</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #676E95\">// push expire command to pipeline</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">Response</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Long</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #A6ACCD\"> saddResponse </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> p</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">sadd</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">availableKey</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> String</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">valueOf</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">siteId</span><span style=\"color: #89DDFF\">));</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #676E95\">// push sadd command to pipeline</span></span>\n\n<span class=\"line\"><span style=\"color: #A6ACCD\">p</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">sync</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #676E95\">// run pipeline to execute all commands</span></span>\n\n<span class=\"line\"><span style=\"color: #C792EA\">Long</span><span style=\"color: #A6ACCD\"> hsetResult </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> hsetResponse</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">get</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #676E95\">// get result from p.hset</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">Long</span><span style=\"color: #A6ACCD\"> expireResult </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> expireResponse</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">get</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #676E95\">// get result from p.expire</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">Long</span><span style=\"color: #A6ACCD\"> saddResult </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> saddResponse</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">get</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #676E95\">// get result from p.sadd</span></span></code></pre></div>\n<p>Dengan pipeine seperti diatas, 3 perintah akan dikirim ke Redis Server secara bersamaan.\nHanya saja, sifat pipeline tidak seperti transaksi, dimana jika salah satunya gagal, Redis tidak akan merollback command sebelumnya. Dan juga saat pipeline berjalan, katakanlah kita mengirim 100 perintah, kemudian pada perintah ke 70 ada Redis Client mengirim perintah juga, maka perintah dari Redis Client lain akan berjalan ditengah-tengah pipeline.</p>\n<h2 id=\"5-transactions-with-jedis\"><a href=\"#5-transactions-with-jedis\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>5. Transactions with Jedis</h2>\n<p>Pembahasan selanjutnya adalah tentang transaction. Transaction di Redis ini mirip-mirip dengan pipeline,\nhanya saja transaction mendukung atomic transaction. Jika kita menjalankan 5 perintah menggunakan transaction,\nmaka jika ada Redis Client lain mengirim perintah ke Redis Server yang sama, maka Redis Client lain tersebut harus menunggu sampai 5 perintah kita selesai dijalankan.</p>\n<p>Contoh menerapkan transaction menggunakan Jedis:</p>\n<div class='code-container'><pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #C792EA\">Long</span><span style=\"color: #A6ACCD\"> siteId </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #F78C6C\">1L</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">Transaction</span><span style=\"color: #A6ACCD\"> t </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> jedis</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">multi</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #A6ACCD\">  </span><span style=\"color: #676E95\">// inisiasi transaction</span></span>\n\n<span class=\"line\"><span style=\"color: #C792EA\">Response</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Long</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #A6ACCD\"> hsetResponse </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> t</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">hset</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">statusKey</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">available</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">true</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #676E95\">// push hset command to transaction</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">Response</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Long</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #A6ACCD\"> expireResponse </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> t</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">expire</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">statusKey</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #F78C6C\">1000</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #676E95\">// push expire command to transaction</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">Response</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Long</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #A6ACCD\"> saddResponse </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> t</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">sadd</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">availableKey</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> String</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">valueOf</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">siteId</span><span style=\"color: #89DDFF\">));</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #676E95\">// push sadd command to transaction</span></span>\n\n<span class=\"line\"><span style=\"color: #A6ACCD\">t</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">exec</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #676E95\">// run transaction to execute all commands</span></span>\n\n<span class=\"line\"><span style=\"color: #C792EA\">Long</span><span style=\"color: #A6ACCD\"> hsetResult </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> hsetResponse</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">get</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #676E95\">// get result from t.hset</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">Long</span><span style=\"color: #A6ACCD\"> expireResult </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> expireResponse</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">get</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #676E95\">// get result from t.expire</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">Long</span><span style=\"color: #A6ACCD\"> saddResult </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> saddResponse</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">get</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #676E95\">// get result from t.sadd</span></span></code></pre></div>\n<h2 id=\"kapan-harus-menggunakan-lua-script-pipeline-dan-transaction\"><a href=\"#kapan-harus-menggunakan-lua-script-pipeline-dan-transaction\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kapan Harus Menggunakan Lua Script, Pipeline, dan Transaction?</h2>\n<ol>\n<li>Jika kamu membolehkan ada query dari client lain berjalan di tengah-tengah multiple query, gunakan Pipeline.</li>\n<li>Jika kamu tidak ingin ada query dari client lain berjalan di tengah-tengah multiple query, gunakan Transaction.</li>\n<li>Jika kamu ingin menggunakan conditional statement di tengah-tengah eksekusi multiple query, gunakan Lua Script.</li>\n</ol>\n<hr>\n<p>Begitulah topik pembahasan di kelas RU102J di minggu ke-2. Yaudah, sampai jumpa lagi di minggu selanjutnya.</p>\n","excerpt":"Ini adalah catatan minggu ke-2 saya di kelas RU102J-nya Redis University. Jika pada minggu pertama hanya sebatas setup java environment, java redis client dan perkenalan DAO pattern, pada minggu ini","description":"Catatan kelas Redis University RU102 minggu ke-2","author":{"id":"Muhammad Syifa","title":"Muhammad Syifa","path":"/author/Muhammad%20Syifa/"}}},{"node":{"id":"d617f7beedbc60b300eecbeb41392cde","title":"Redis University RU101 - Minggu Ke-2","datetime":"2019-08-17 08:00:00","path":"/artikel/redis-university-ru101-minggu-ke-2/","icon":"/images/icons/redis.png","content":"<p>Ini adalah catatan minggu ke-2 dari kelas RU101 (Introduction to Redis Data Structure) di Redis University.\nBuat yang belum tau apa itu Redis University, saya sudah bahas di catatan <a href=\"/redis-university-ru101-minggu-pertama/\">minggu pertama</a>.</p>\n<p>Pada minggu pertama yang dibahas adalah tentang data struktur apa saja yang terdapat pada Redis,\npada minggu ke-2 ini pembahasannya adalah:</p>\n<ol>\n<li>Cardinality and Capped Collections</li>\n<li>Set Operations</li>\n<li>Faceted Search</li>\n<li>Performance &#x26; Big O Notation</li>\n</ol>\n<h2 id=\"1-cardinality-and-capped-collections\"><a href=\"#1-cardinality-and-capped-collections\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Cardinality and Capped Collections</h2>\n<h4 id=\"cardinality\"><a href=\"#cardinality\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cardinality</h4>\n<p>Untuk mengecek cardinality dari data di Redis, perintah yang dapat digunakan adalah:</p>\n<ul>\n<li><code>LLEN</code>: untuk list</li>\n<li><code>SCARD</code>: untuk set</li>\n<li><code>ZCARD</code>: untuk sorted set</li>\n</ul>\n<p>Contoh:</p>\n<div class='code-container'><pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #A6ACCD\">RPUSH mylist 1 2 3 4 5  </span><span style=\"color: #676E95\"># set 5 item ke mylist</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">LLEN mylist             </span><span style=\"color: #676E95\"># mengambil banyak item di mylist</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">integer</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #A6ACCD\"> 5 </span></span>\n\n<span class=\"line\"><span style=\"color: #A6ACCD\">SADD myset foo bar baz qux qux </span><span style=\"color: #676E95\"># menambahkan item ke myset</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">SCARD myset                    </span><span style=\"color: #676E95\"># mengambil banyak item di myset</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">integer</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #A6ACCD\"> 4 </span><span style=\"color: #676E95\"># hasilnya 4 karena set hanya menyimpan string unik, jadi qux ke2 tidak ditambahkan</span></span>\n\n<span class=\"line\"><span style=\"color: #A6ACCD\">ZADD mysortedset 1 foo 2 bar 3 baz 4 qux 5 qux </span><span style=\"color: #676E95\"># menambahkan item ke mysortedset</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">ZCARD mysortedset                              </span><span style=\"color: #676E95\"># mengambil banyak item di mysortedset</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">integer</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #A6ACCD\"> 4 </span><span style=\"color: #676E95\"># hasilnya 4 karena alasan yg sama dengan set</span></span></code></pre></div>\n<h4 id=\"capped-collections\"><a href=\"#capped-collections\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Capped Collections</h4>\n<p>Capped collections adalah list/sorted set yang sebagian nilainya telah dihapus/dipotong.</p>\n<p>Ada beberapa perintah untuk memotong sebagian item didalam list dan sorted set:</p>\n<ul>\n<li><code>LTRIM</code>: untuk <strong>mengambil</strong> item di range index tertentu pada list (sisanya dihapus).</li>\n<li><code>ZREMRANGEBYRANK</code>: untuk <strong>menghapus</strong> item di range index tertentu pada sorted set.</li>\n</ul>\n<p>Contoh <code>LTRIM</code>:</p>\n<div class='code-container'><pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #A6ACCD\">RPUSH numbers 1 2 3 4 5 6 7 8 9 10 </span><span style=\"color: #676E95\"># set numbers</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">LTRIM numbers 0 -3                 </span><span style=\"color: #676E95\"># ambil dari index 0 sampai dengan index terakhir - 3</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">LRANGE numbers 0 -1                </span><span style=\"color: #676E95\"># ambil semua numbers (setelah dipotong)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">1) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">1</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">2) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">2</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">3) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">3</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">4) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">4</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">5) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">5</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">6) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">6</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">7) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">7</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">8) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">8</span><span style=\"color: #89DDFF\">&quot;</span></span>\n\n<span class=\"line\"><span style=\"color: #A6ACCD\">LTRIM -5 -1 </span><span style=\"color: #676E95\"># mengambil 5 item terakhir</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">LRANGE numbers 0 -1</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">1) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">4</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">2) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">5</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">3) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">6</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">4) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">7</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">5) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">8</span><span style=\"color: #89DDFF\">&quot;</span></span></code></pre></div>\n<p>Contoh <code>ZREMRANGEBYRANK</code>:</p>\n<div class='code-container'><pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #A6ACCD\">ZADD letters 1 a 2 b 3 c 4 d 5 f 6 g 7 h  </span><span style=\"color: #676E95\"># set letters</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">ZREMRANGEBYRANK letters -2 -1             </span><span style=\"color: #676E95\"># hapus 2 item terakhir</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">ZRANGE letters 0 -1</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">1) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">a</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">2) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">b</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">3) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">c</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">4) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">d</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">5) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">f</span><span style=\"color: #89DDFF\">&quot;</span></span>\n\n<span class=\"line\"><span style=\"color: #A6ACCD\">ZREMRANGEBYRANK letters 0 2 </span><span style=\"color: #676E95\"># hapus 3 item pertama (index: 0, 1, 2)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">1) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">d</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\">                                                                                                             2) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">f</span><span style=\"color: #89DDFF\">&quot;</span></span></code></pre></div>\n<h2 id=\"2-set-operations-with-sets-and-sorted-sets\"><a href=\"#2-set-operations-with-sets-and-sorted-sets\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Set Operations with Sets and Sorted Sets</h2>\n<p>Pada bagian ini dicontohkan cara menggunakan <code>ZINTERSTORE</code> dan <code>ZETUNIONSTORE</code> untuk menyimpan hasil <em>intersect</em> dan <em>union</em> kedalam key lain.</p>\n<p>Contoh <code>ZINTERSTORE</code>: </p>\n<div class='code-container'><pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #A6ACCD\">ZADD l1 1 a 2 b 3 c 4 d 5 f </span><span style=\"color: #676E95\"># buat sorted set l1</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">ZADD l2 1 a 2 b 3 e 5 x 6 z </span><span style=\"color: #676E95\"># buat sorted set l2</span></span>\n\n<span class=\"line\"><span style=\"color: #A6ACCD\">ZINTERSTORE l3 2 l1 l2      </span><span style=\"color: #676E95\"># simpan hasil intersect l1 dan l2 kedalam l3</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">ZRANGE l3 0 -1 WITHSCORES </span><span style=\"color: #676E95\"># melihat semua isi l3</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">1) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">a</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #676E95\"># nilai i(0)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">2) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">2</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #676E95\"># score i(0)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">3) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">b</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #676E95\"># nilai i(1)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">4) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">4</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #676E95\"># score i(1)</span></span></code></pre></div>\n<p>Sebagai catatan <code>l3 2 l1 l2</code>, <code>2</code> yang dimaksud disitu adalah banyak key yang mau di-<em>intersect</em>,\nkarena disitu yang di-<em>intersect</em> adalah <code>l1</code> dan <code>l2</code>, berarti banyak keynya adalah 2.</p>\n<p>Dokumentasi selengkapnya <code>ZINTERSTORE</code> bisa dilihat <a href=\"https://redis.io/commands/zinterstore\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">disini</a>.</p>\n<p>Contoh <code>ZUNIONSTORE</code>:</p>\n<div class='code-container'><pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #A6ACCD\">ZADD l1 1 a 2 b 3 c 4 d 5 f </span><span style=\"color: #676E95\"># buat sorted set l1</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">ZADD l2 1 a 2 b 3 e 5 x 6 z </span><span style=\"color: #676E95\"># buat sorted set l2</span></span>\n\n<span class=\"line\"><span style=\"color: #A6ACCD\">ZUNIONSTORE l3 2 l1 l2      </span><span style=\"color: #676E95\"># simpan hasil union l1 dan l2 kedalam l3</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">ZRANGE l3 0 -1 WITHSCORES </span><span style=\"color: #676E95\"># melihat semua isi l3</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\"> 1) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">a</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\"> 2) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">2</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #676E95\"># skor si a, jadi 2 karena skornya ditambahkan antara skor a di l1 dan skor a di l2</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\"> 3) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">c</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\"> 4) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">3</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #676E95\"># skor si c</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\"> 5) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">e</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\"> 6) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">3</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #676E95\"># skor si d</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\"> 7) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">b</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\"> 8) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">4</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #676E95\"># skor si b</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\"> 9) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">d</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">10) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">4</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #676E95\"># skor si d</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">11) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">f</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">12) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">5</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #676E95\"># skor si f</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">13) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">x</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">14) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">5</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #676E95\"># skor si x</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">15) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">z</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">16) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">6</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #676E95\"># skor si y</span></span>\n\n<span class=\"line\"><span style=\"color: #A6ACCD\">ZUNIONSTORE l3 2 l1 l2 AGGREGATE MIN  </span><span style=\"color: #676E95\"># simpan hasil union l1 dan l2 kedalam l3</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">ZRANGE l3 0 -1 WITHSCORES </span><span style=\"color: #676E95\"># melihat semua isi l3</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\"> 1) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">a</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\"> 2) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">1</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #676E95\"># skor si a, paling kecilnya 1</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\"> 3) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">b</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\"> 4) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">2</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #676E95\"># skor si b</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\"> 5) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">c</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\"> 6) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">3</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #676E95\"># skor si c</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\"> 7) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">e</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\"> </span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\"> 8) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">3</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #676E95\"># skor si e</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\"> 9) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">d</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">10) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">4</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #676E95\"># skor si d</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">11) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">f</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">12) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">5</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #676E95\"># skor si f</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">13) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">x</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">14) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">5</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #676E95\"># skor si x</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">15) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">z</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">16) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">6</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #676E95\"># skor si z</span></span></code></pre></div>\n<p>Dokumentasi selengkapnya <code>ZUNIONSTORE</code> bisa dilihat <a href=\"https://redis.io/commands/zunionstore\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">disini</a>.</p>\n<h2 id=\"3-faceted-search\"><a href=\"#3-faceted-search\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. Faceted Search</h2>\n<p>Selanjutnya pembahasa menuju ke <em>faceted search</em>. Untuk definisi <em>faceted search</em> sendiri nggak begitu dijelaskan disini, jadi silahkan aja ke <a href=\"https://en.wikipedia.org/wiki/Faceted_search\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">wikipedia</a>. Yang dibahas disini hanya contoh kasus menerapkan teknik <em>faceted search</em> pada Redis menggunakan bahasa pemrograman tertentu, untuk mengurangi <em>time complexity</em> saat melakukan pencarian.</p>\n<p>Sebagai contoh, kita memiliki data customers berupa JSON sebagai berikut:</p>\n<div class='code-container'><pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #89DDFF\">[</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C792EA\">ID</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">001</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C792EA\">name</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">John Doe</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C792EA\">age</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #F78C6C\">20</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C792EA\">city</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">Jakarta</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C792EA\">sex</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">male</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #89DDFF\">},</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C792EA\">ID</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">002</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C792EA\">name</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">Jane Doe</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C792EA\">age</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #F78C6C\">20</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C792EA\">city</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">Bandung</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C792EA\">sex</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">female</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #89DDFF\">}</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">]</span></span></code></pre></div>\n<p>Jika kita ingin melakukan pencarian terhadap kolom <code>age</code>, <code>city</code>, dan <code>sex</code>.\nSelain menyimpan data customer tersebut, kita juga meyimpan indeks untuk <code>age</code>, <code>city</code>, dan <code>sex</code> berupa <code>sets</code>.</p>\n<p>Sebagai contoh:</p>\n<div class='code-container'><pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #676E95\"># simpan data lengkap</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">SET customer:001 </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">{json string data john doe}</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">SET customer:002 </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">{json string data jane doe}</span><span style=\"color: #89DDFF\">&quot;</span></span>\n\n<span class=\"line\"><span style=\"color: #A6ACCD\">SADD fs:customer:age:20 001 002     </span><span style=\"color: #676E95\"># menambahkan 001 dan 002 kedalam set dengan age 20</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">SADD fs:customer:city:</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">Jakarta</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\"> 001 </span><span style=\"color: #676E95\"># menambahkan customer 001 kedalam set dengan city Jakarta</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">SADD fs:customer:city:</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">Bandung</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\"> 002 </span><span style=\"color: #676E95\"># menambahkan customer 002 kedalam set dengan city Bandung</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">SADD fs:customer:sex:male 001</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">SADD fs:customer:sex:female 002</span></span></code></pre></div>\n<blockquote>\n<p>Prefix 'fs' disana maksudnya <em>faceted search</em>. Bisa diganti dengan apapun.</p>\n</blockquote>\n<p>Dengan begitu, jika kita ingin melakukan pencarian dengan kriteria umur 20 dan jenis kelamin pria,\nhal yang pertama kita lakukan adalah mengambil <em>intersect</em> daftar ID dari <code>fs:customer:age:20</code> dan <code>fs:customer:sex:male</code>. Setelah ID didapat, barulah kita mengambil masing-masing data menggunakan <code>GET</code>.</p>\n<p>Contoh:</p>\n<div class='code-container'><pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #A6ACCD\">SINTER fs:customer:age:20 fs:customer:sex:male</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">1) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">001</span><span style=\"color: #89DDFF\">&quot;</span></span>\n\n<span class=\"line\"><span style=\"color: #A6ACCD\">GET customer:001</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">json string data john doe</span><span style=\"color: #89DDFF\">&quot;</span></span></code></pre></div>\n<p>Sebetulnya di kelas pakainya python, jadi hasil dari <code>SINTER</code> di looping untuk mendapatkan detail masing-masing datanya, tapi disini saya catat konsepnya aja. Pokoknya kayak gitulah tekniknya.</p>\n<h4 id=\"hashed-key\"><a href=\"#hashed-key\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Hashed Key</h4>\n<p>Materi selanjutnya adalah membandingkan <em>faceted search</em> diatas dengan tambahan <em>hashed key</em>.\nJadi pada teknik ini, <em>time complexity</em> lebih rendah karena kita tidak perlu melakukan <code>SINTER</code> ke banyak kriteria, karena kombinasi kriterianya dibungkus menjadi hash.</p>\n<p>Sebagai contoh pada data JSON sebelumnya, jika kita ingin melakukan pencarian terhadap <code>age</code>, <code>city</code>, dan <code>sex</code>.\nKita perlu membuat <code>sets</code> sebanyak kombinasi dari ke-3 kolom tersebut. Untuk algoritma hashnya sendiri bisa pakai apapun, entah md5, sha1, sha256, dsb.</p>\n<p>Contoh aja nih ya, dari data JSON diatas kita akan membuat <code>list</code> kurang lebih seperti ini:</p>\n<div class='code-container'><pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #676E95\"># indeks untuk John Doe (001)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">RPUSH </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">hfs:customer:md5(20|Jakarta|male)</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\"> 001</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">RPUSH </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">hfs:customer:md5(20|*|male)</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\"> 001</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">RPUSH </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">hfs:customer:md5(20|Jakarta|*)</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\"> 001</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">RPUSH </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">hfs:customer:md5(*|Jakarta|male)</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\"> 001</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">RPUSH </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">hfs:customer:md5(20|*|*)</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\"> 001</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">RPUSH </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">hfs:customer:md5(*|Jakarta|*)</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\"> 001</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">RPUSH </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">hfs:customer:md5(*|*|male)</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\"> 001</span></span>\n\n<span class=\"line\"><span style=\"color: #676E95\"># indeks untuk Jane Doe (002)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">RPUSH </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">hfs:customer:md5(20|Bandung|female)</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\"> 002</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">RPUSH </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">hfs:customer:md5(20|*|female)</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\"> 002</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">RPUSH </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">hfs:customer:md5(20|Bandung|*)</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\"> 002</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">RPUSH </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">hfs:customer:md5(*|Bandung|female)</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\"> 002</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">RPUSH </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">hfs:customer:md5(20|*|*)</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\"> 002</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">RPUSH </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">hfs:customer:md5(*|Bandung|*)</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\"> 002</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">RPUSH </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">hfs:customer:md5(*|*|female)</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\"> 002</span></span></code></pre></div>\n<p>Itu <code>md5(age,city,sex)</code> contoh aja ya, sebetulnya itu seharusnya hasil dari md5-nya, bukan plain text kayak gitu.</p>\n<p>Intinya pada teknik <em>hashed key</em> ini kita menyimpan <strong>seluruh</strong> kombinasi key yang dimungkinkan, sehingga suatu saat kita ingin mencari data pria umur 20, kita bisa gunakan <code>LRANGE</code> sebagai berikut:</p>\n<div class='code-container'><pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #A6ACCD\">LRANGE </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">hfs:customer:md5(20|*|male)</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #A6ACCD\"> 0 -1</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">1) </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">001</span><span style=\"color: #89DDFF\">&quot;</span></span></code></pre></div>\n<p>Dari hasil itu baru deh di loop pakai bahasa pemrograman buat dapatin detail masing-masing datanya.\nMenggunakan teknik seperti ini akan mengurangi <em>time complexity</em> untuk melakukan pencarian karena tidak perlu melakukan <em>intersect</em>, hanya saja semakin banyak kombinasi valuenya, keynya akan buanyak banget, dan proses maintain indeksnya jadi lebih rumit.</p>\n<h2 id=\"4-performance--big-o-notation\"><a href=\"#4-performance--big-o-notation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. Performance &#x26; Big O Notation</h2>\n<p>Sebagai programmer yang main weaponnya PHP dan Javascript saya sebetulnya agak gimana gitu di pembahasan minggu ini. Redis kan memang diciptakan untuk masalah performa, itu kenapa dia menghadirkan solusi in-memory database ini.\nTapi di minggu ini dia bahas masalah performa seakan menggunakan bahasa C dan RAM sebagai penyimpanan masih kurang meyakinkan buat mereka hahhha.</p>\n<p>Tapi setelah saya pikir-pikir lagi, justru karena fokus mereka di performa, makanya mereka menekankan masalah performa sampai sebegininya.</p>\n<p>Pada bagian ini, pembahasannya adalah tentang performa dan big O notation untuk beberapa perintah Redis.\nSebetulnya pada dokumentasi Redis, setiap perintah itu udah dicantumin big O notationnya, tapi disini mereka menjelaskan lebih detail untuk beberapa perintah.</p>\n<p>Ini contoh perhitungan Big O Notation untuk beberapa perintah Redis:</p>\n<div class='code-container'><pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #A6ACCD\">SET foo 10 </span><span style=\"color: #676E95\"># O(1)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">SET bar 12 </span><span style=\"color: #676E95\"># O(1)</span></span>\n\n<span class=\"line\"><span style=\"color: #A6ACCD\">MSET foo 10 bar 12 baz 100 </span><span style=\"color: #676E95\"># O(N), N = 3 (foo, bar , dan baz)</span></span>\n\n<span class=\"line\"><span style=\"color: #A6ACCD\">DEL foo </span><span style=\"color: #676E95\"># O(1)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">DEL bar baz </span><span style=\"color: #676E95\"># O(N), N = 2</span></span>\n\n<span class=\"line\"><span style=\"color: #A6ACCD\">SADD myset 1 2 3 4 5 </span><span style=\"color: #676E95\"># O(N), N = 5</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">DEL myset </span><span style=\"color: #676E95\"># O(M), M = 5</span></span>\n\n<span class=\"line\"><span style=\"color: #A6ACCD\">SADD set:a 1 2 3 4 5 </span><span style=\"color: #676E95\"># O(5)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">SADD set:b 1 2 3 4 5 6 7 8 9 </span><span style=\"color: #676E95\"># O(9)</span></span>\n\n<span class=\"line\"><span style=\"color: #A6ACCD\">SINTER set:b set:a </span><span style=\"color: #676E95\"># O(N * M), N = 5 (count set terkecil), M = 2 (set:a dan set:b) =&gt; O(5 * 2) =&gt; O(10)</span></span>\n\n<span class=\"line\"><span style=\"color: #A6ACCD\">RPUSH numbers 1 2 3 4 5 6 7 8 9 0 </span><span style=\"color: #676E95\"># O(10)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">LRANGE numbers 3 5 </span><span style=\"color: #676E95\"># O(S + N), S = 4 (start + 1), N = 3 (end - start + 1) =&gt; O(4 + 3) =&gt; O(7) </span></span></code></pre></div>\n<hr>\n<p>Begitulah pertemuan minggu ke-2. Dah ya, saya mau lanjut ke RU102J.</p>\n","excerpt":"Ini adalah catatan minggu ke-2 dari kelas RU101 (Introduction to Redis Data Structure) di Redis University. Buat yang belum tau apa itu Redis University, saya sudah bahas di catatan minggu pertama.","description":"Catatan kelas Redis University RU101 minggu ke-2","author":{"id":"Muhammad Syifa","title":"Muhammad Syifa","path":"/author/Muhammad%20Syifa/"}}},{"node":{"id":"7240487eb4ae485b30c3e42652d19ff3","title":"Redis University RU202 - Minggu Pertama","datetime":"2019-08-15 11:00:00","path":"/artikel/redis-university-ru202-minggu-pertama/","icon":"/images/icons/redis.png","content":"<p>Ini adalah catatan minggu pertama dari apa yang saya pelajari di kelas RU202-nya <a href=\"https://university.redislabs.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Redis University</a> yang berjudul <strong>\"Redis Streams\"</strong>.</p>\n<p>Sesuai judulnya, pada kelas ini pembahasannya adalah tentang Redis Stream, fitur pada Redis yang diperuntukkan untuk membuat messaging dan streaming pipelines.</p>\n<p>Kelas RU202 yang saya ikuti ini dimulai pada 7 Agustus 2019, dan akan berjalan selama 5 minggu\ndimana 4 minggu pertama adalah pembelajaran, dan minggu terakhir adalah ujian.\nPada 4 minggu pertama, peserta dibagikan materi berupa video, quiz, dan diakhiri dengan PR mingguan.\nNilai dari PR mingguan akan diakumulasikan pada nilai akhir, jika nilai akhir mencapai 64% atau lebih, peserta akan diberikan sertifikat penyelesaian dari Redis University.</p>\n<p>Sebagaimana kelas Redis University lainnya, RU202 juga memberikan Virtual Lab di setiap minggunya yang sudah terinstall Redis.</p>\n<h2 id=\"catatan-ru202-minggu-pertama\"><a href=\"#catatan-ru202-minggu-pertama\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Catatan RU202 Minggu Pertama</h2>\n<p>Pada minggu pertama ini, yang dibahas adalah:</p>\n<ol>\n<li>Pengenalan Distributed Systems dan Stream Processing</li>\n<li>Pengenalan Redis Streams</li>\n</ol>\n<h4 id=\"1-pengenalan-distributed-systems-dan-stream-processing\"><a href=\"#1-pengenalan-distributed-systems-dan-stream-processing\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Pengenalan Distributed Systems dan Stream Processing</h4>\n<h6 id=\"distributed-systems\"><a href=\"#distributed-systems\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Distributed Systems</h6>\n<p>Distributed systems adalah sebuah setup (pengaturan) yang terdiri dari berbagai komponen jaringan yang saling melakukan perpesanan (messaging) satu sama lain. Redis sendiri didesain untuk menjadi salah satu komponen tersebut, dimana nama Redis merupakan singkatan dari \"<strong>Re</strong>mote <strong>Di</strong>ctionary <strong>S</strong>erver\". Kata \"remote\" berarti dapat diakses melalui jaringan, sedangkan kara \"server\" menunjukkan rolenya pada paradigma client-server. Jadi kata Redis sendiri dapat diartikan sebagai server yang berperan sebagai bagian dari setup dimana komponen-komponen (pada distributed system) lain berkomunikasi dengannya, juga menjadi perantara antara setiap komponen untuk berkomunikasi satu sama lain.</p>\n<p>Membuat distributed system memiliki tantangan tersendiri dalam menghadapi kegagalan (failures). Saat salah satu komponen mengalami kegagalan (mati), komponen tersebut jadi tidak dapat menerima pesan apapun dari komponen lain, bahkan pesan yang sedang diproses sebelum dia mati juga ikut hilang. Kehilangan sebuah komponen dalam distributed system adalah hal yang tidak dapat dicegah. Oleh karena itu distributed system yang dibuat harus dirancang sedemikian rupa untuk menghadapi kemungkinan tersebut.</p>\n<p>Messaging adalah komponen yang cukup penting dalam sebuah distributed system, karena dia mengendalikan global-state yang digunakan oleh komponen-komponen lain. </p>\n<p>Pada versi 5.0, Redis sudah mendukung distributed messaging. Messaging pada Redis dirancang khusus untuk unggul dalam performa dibanding beberapa alternatif message broker lainnya.</p>\n<h6 id=\"stream-processing\"><a href=\"#stream-processing\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Stream Processing</h6>\n<p>Setiap distributed system bergantung pada komponen messaging untuk mengendalikan atau mengkoordinasikan komponen-komponen lain. Beberapa sistem dibangun untuk dapat menangani data yang dikirimkan secara terus-menerus, dan bereaksi secara instan saat terdapat perubahan pada data. Pada era big data, hal ini disebut stream processing, dipopulerkan oleh Apache Storm dan beberapa konsep lain yang sudah hadir sebelumnya.</p>\n<p>Stream processing adalah kebalikan dari batch processing.</p>\n<p>Contoh populer dari stream processing adalah monitoring suhu. Sensor suhu akan membaca suhu setiap sepersekian detik, kemudian sensor akan mengirimkannya secara terus menerus (streaming) data tersebut ke stream processor. Kemudian stream processor akan mengecek, jika suhu melewati batas yang ditentukan, stream processor secara real-time akan mengirimkan notifikasi ke smartpohne pengguna.</p>\n<h4 id=\"2-pengenalan-redis-stream\"><a href=\"#2-pengenalan-redis-stream\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Pengenalan Redis Stream</h4>\n<p>Pada versi 5.0 Redis mendukung struktur data untuk melakukan stream yang diberi nama Redis Stream.</p>\n<p>Berikut beberapa poin penting tentang Redis Stream:</p>\n<ol>\n<li>Redis Stream adalah struktur data.</li>\n<li>Bertindak seperti <em>append-only</em> list. Tidak seperti list yang bisa ditambahkan nilai pada index tertentu, stream hanya dapat ditambahkan di akhir. Jadi mulai sekarang bayangin Redis Stream ini adalah array.</li>\n<li>Setiap item didalam Redis Stream adalah Hash (semacam <code>Map&#x3C;String, String></code> kalau di Java).</li>\n<li>Setiap item didalam Redis Stream diidentifikasikan oleh ID unik, dimana secara default ID adalah <em>time-prefixed</em> (diawali informasi waktu).</li>\n<li>Mendukung ID-based range queries. Kalau ibarat SQL di RDBMS, dia mendukung semacam: <code>select from streamnya where timenya between timeA and timeB</code>.</li>\n<li>Setiap Redis Stream dapat dikonsumsi oleh banyak kelompok consumer atau yang disebut sebagai consumer group.</li>\n<li>Redis stream bersifat immutable, sekali di append, data tidak dapat diubah.</li>\n<li>Setiap item didalam Redis Stream dapat dihapus, tetapi Redis hanya memberi flag \"terhapus\", datanya sendiri sebetulnya masih ada, tetapi tidak akan muncul saat diquery.</li>\n</ol>\n<p>Sebelumnya Redis memiliki fitur Redis Pub/Sub, lalu apa bedanya dengan Redis Stream?</p>\n<p>Perbedaannya adalah, jika pada Pub/Sub, client hanya menerima data yang dipublish (dikirim) <strong>setelah dia terhubung</strong>. Sedangkan pada Redis Stream, client yang baru terhubung akan menerima data stream yang dikirim <strong>sebelum dia terhubung</strong>. Dengan kata lain pada Pub/Sub memori akan dihapus setelah publish selesai dilakukan, sedangkan pada Redis Stream memori (data streamnya) tetap disimpan untuk dikirimkan nanti saat ada client baru yang terhubung.</p>\n<hr>\n<p>Segitu aja mungkin untuk RU202 ini yang perlu saya catat. Yaudahlah, sampai jumpa di catatan minggu depan.</p>\n","excerpt":"Ini adalah catatan minggu pertama dari apa yang saya pelajari di kelas RU202-nya Redis University yang berjudul \"Redis Streams\". Sesuai judulnya, pada kelas ini pembahasannya adalah tentang Redis","description":"Catatan kelas Redis University RU102 minggu pertama","author":{"id":"Muhammad Syifa","title":"Muhammad Syifa","path":"/author/Muhammad%20Syifa/"}}},{"node":{"id":"a09ab95e3517e559565ab4d8a222ae85","title":"Redis University RU201 - Minggu Pertama","datetime":"2019-08-15 10:00:00","path":"/artikel/redis-university-ru201-minggu-pertama/","icon":"/images/icons/redis.png","content":"<p>Ini adalah catatan minggu pertama dari apa yang saya pelajari di kelas RU201-nya <a href=\"https://university.redislabs.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Redis University</a> yang berjudul <strong>\"RediSearch\"</strong>.</p>\n<p>Pada kelas ini, pembahasannya adalah tentang RediSearch, yaitu modul Redis yang berisi perlengkapan untuk melakukan pencarian berbasis memori dan melakukan secondary indexing.</p>\n<p>Kelas RU201 yang saya ikuti ini dimulai pada 7 Agustus 2019, dan akan berjalan selama 6 minggu\ndimana 5 minggu pertama adalah pembelajaran, dan minggu terakhir adalah ujian.\nPada 5 minggu pertama, peserta dibagikan materi berupa video, quiz, dan diakhiri dengan PR mingguan.\nNilai dari PR mingguan akan diakumulasikan pada nilai akhir, jika nilai akhir mencapai 65% atau lebih, peserta akan diberikan sertifikat penyelesaian dari Redis University.</p>\n<p>Sebagaimana kelas Redis University lainnya, RU201 juga memberikan Virtual Lab di setiap minggunya yang sudah terinstall Redis dan RediSearch.</p>\n<h2 id=\"catatan-ru201-minggu-pertama\"><a href=\"#catatan-ru201-minggu-pertama\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Catatan RU201 Minggu Pertama</h2>\n<p>Pada minggu pertama, materi yang dibahas adalah:</p>\n<ol>\n<li>Redis Module</li>\n<li>Konsep Search Engine</li>\n<li>Konsep Secondary Index</li>\n<li>RediSearch vs Redis</li>\n</ol>\n<h4 id=\"1-redis-module\"><a href=\"#1-redis-module\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Redis Module</h4>\n<p>Redis module adalah software tambahan untuk menambahkan fungsionalitas yang berbeda pada Redis.\nRedis module berbeda dengan Redis client yang dibahas pada kelas RU201J.</p>\n<p>Berikut adalah poin-poin penting tentang redis module.</p>\n<ol>\n<li>Redis module adalah compiled software.</li>\n<li>Redis module diimplementasikan sebagai sebuah shared object file (kurang tau maksudnya apa).</li>\n<li>Redis module berisi subroutines yang mengizinkan Redis server untuk terintegrasi dengannya saat runtime. Subroutines dipanggil oleh Redis melalui <em>foreign function interface</em>.</li>\n<li>Umumnya redis module dibuat menggunakan C, C++ dan Rust.</li>\n<li>Redis module dapat mengimplementasikan data type tersendiri diluar data types yang disediakan Redis.</li>\n<li>Redis module dapat menambahkan perintah-perintah baru pada Redis server.</li>\n<li>Data type memiliki akses langsung ke memori, disimpan ke server, dan beroperasi dengan kecepatan dan efisiensi yang sama dengan built-in commands.</li>\n<li>\n<p>Redis module dapat diintegrasikan dengan beberapa cara:</p>\n<ul>\n<li>Melalui file redis.conf.</li>\n<li>Melalui command line argument.</li>\n<li>Melalui perintah <code>MODULE LOAD</code> pada redis-cli.</li>\n<li>Melalui Redis enterprise GUI.</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"2-konsep-search-engine\"><a href=\"#2-konsep-search-engine\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Konsep Search Engine</h4>\n<p>Pada bagian ini yang pertama kali dibahas adalah tentang konsep dasar dari vocabulary pada search engine.\nUmumnya setiap indeks search engine terdiri dari sekumpulan dokumen. Setiap dokumen diidentifikasikan oleh ID yang terbuat dari sekumpulan field.</p>\n<p>Berikut poin-poin cukup penting untuk diingat:</p>\n<ul>\n<li>Indeks terdiri dari sekumpulan dokumen.</li>\n<li>Indeks dapat hanya berisi referensi dari dokumen tanpa menyimpan dokumen tersebut.</li>\n<li>Indeks tidak mengharuskan setiap field di dokumen untuk didefinisikan pada skema.</li>\n</ul>\n<h6 id=\"tokenization\"><a href=\"#tokenization\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tokenization</h6>\n<p>DBMS pada umumnya menyimpan teks sebagai binary-stream, sedangkan search engine perlu memahami bahasa manusia\nsehingga tidak dapat menyimpan teks sebagai binary-stream. Hal pertama yang dilakukan search engine adalah\nmengambil teks dan mengubahnya menjadi huruf kecil semua, lalu memecah teks-teks tersebut kedalam <em>logical-unit</em>, alias token. Untuk mendapatkan token, diperlukan proses <em>tokenization</em> (tokenisasi).</p>\n<p>Sebagai contoh, pada kalimat \"sebuah token adalah\", jika dilakukan proses tokenisasi akan menjadi 3 buah token:\n\"sebuah\", \"token\", dan \"adalah\".</p>\n<p>Pada RediSearch, spasi bukan satu-satunya pemisah token. Melainkan hampir semua tanda baca adalah pemisah dari token, dan akan diabaikan.</p>\n<p>Sebagai contoh saat kamu memiliki kalimat \"kamu adalah satu-satunya\", maka RediSearch akan memecahnya menjadi 4 buah token: \"kamu\", \"adalah\", \"satu\", \"satunya\".</p>\n<p>Jika kamu menginginkan \"satu-satunya\" dianggap sebagai sebuah token, kamu dapat melakukan escaping dengan menambahkan karakter backslash <code>\\</code> pada karakter pemisah. Contoh: \"kamu adalah satu\\-satunya\".</p>\n<h6 id=\"stop-words\"><a href=\"#stop-words\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Stop Words</h6>\n<p>Stop words adalah daftar kata yang dianggap tidak penting (dapat diabaikan) sehingga perlu dihilangkan dari indeks.\nSebagai contoh adalah kata \"a\" (sebuah/seorang), kata tersebut sangat sering digunakan pada hampir semua dokumen, sehingga dirasa tidak perlu menyimpannya kedalam indeks.</p>\n<p>Pada RediSearch daftar katayang masuk kedalam stop words (secara default) adalah:</p>\n<div class='code-container'><pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #A6ACCD\">a,    is,    the,   an,   and,  are, as,  at,   be,   but,  by,   for,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">if,   in,    into,  it,   no,   not, of,  on,   or,   such, that, their,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">then, there, these, they, this, to,  was, will, with</span></span></code></pre></div>\n<p>Kata-kata tersebut secara default akan diabaikan oleh RediSearch, tidak akan dimasukkan kedalam indeks.</p>\n<h5 id=\"stemming\"><a href=\"#stemming\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Stemming</h5>\n<p>Stemming adalah proses mengubah kata pada setiap token menjadi kata dasarnya saja. Sebagai contoh kata \"menciptakan\", imbuhan \"men-kan\" akan dihapus, sehingga yang disimpan kedalam indeks hanya kata \"cipta\" saja. Kata kunci yang dimasukkan pada search engine juga dilakukan stemming. Dengan begini search engine yang dibuat jadi nggak kaku-kaku banget.</p>\n<p>Di RediSearch sendiri stemming bersifat optional, karena proses stemming ini cukup rumit untuk diadaptasi pada setiap bahasa, karena peraturan masing-masing bahasa yang cukup kompleks.</p>\n<h4 id=\"3-konsep-secondary-index\"><a href=\"#3-konsep-secondary-index\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. Konsep Secondary Index</h4>\n<p>Secondary indeks seperti namanya adalah indeks kedua setelah indeks utama (primary index). Yang dimaksud kedua disini, jadi secondary index adalah index yang berisi indeks utama. Aduh bingung juga nulisnya.</p>\n<p>Gini, misalkan di MySQL kita punya database customer yang berisi kolom \"ID\", \"email\", \"name\", \"phone\", \"dob\", dan \"city\", dimana kolom ID adalah primary key (primary index).</p>\n<p>Saat kita ingin mencari customer berdasarkan \"city\", untuk mempercepat pencarian kita membutuhkan secondary index yang berisi ID dari si customer. Nanti setelah ID-nya didapat, barulah kita mengambil data customer secara utuh.</p>\n<p>Disini RediSearch berperan sebagai secondary index dimana dia menyimpan field-field yang akan dilakukan pencarian, yang berisi primary index.</p>\n<p>RediSearch memiliki kelebihan sebagai secondary index yaitu sebagaimana Redis, RedisSearch menyimpan secondary index kedalam memory (bukan phisycal storage) sehingga performa lebih optimal.</p>\n<p>Kekurangan menggunakan secondary index diantaranya:</p>\n<ul>\n<li>Meningkatkan kompleksitas untuk menjaga indeks supaya tetap sesuai dengan penyimpanan aslinya.</li>\n<li>Berpotensi out-of-date. Lagi-lagi kita harus menjaga indeks supaya sesuai dengan penyimpanan aslinya.</li>\n<li>2 stage latency. Karena kita memerlukan setidaknya 2 proses untuk setiap pencarian. Query ke RediSearch, kemudian query ke storage aslinya.</li>\n</ul>\n<h4 id=\"4-redisearch-vs-redis\"><a href=\"#4-redisearch-vs-redis\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. RediSearch vs Redis</h4>\n<p>RediSearch memproses nilai berbeda dengan Redis biasa. Berikut adalah beberapa perbedannya.</p>\n<h6 id=\"keyspaces-vs-index\"><a href=\"#keyspaces-vs-index\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Keyspaces vs Index</h6>\n<p>Pada RediSearch tidak berlaku one-key pattern seperti halnya Redis biasa. Setiap key pada RediSearch disimpan menggunakan key space khusus sehingga kita tidak dapat menggunakan perintah redis biasa pada key yang digunakan di RediSearch.</p>\n<h6 id=\"field-types\"><a href=\"#field-types\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Field Types</h6>\n<p>Ada 4 tipe data yang perlu diketahui pada RediSearch.</p>\n<ol>\n<li>Text: untuk menyimpan teks. Untuk setiap skema dari dokumen, maksimal hanya boleh terdiri dari 128 text field. Text field dapat diberikan bobot dan dapat dilakukan sorting.</li>\n<li>Numeric: untuk menyimpan data non-tekstual. Tipe ini dapat dilakukan sorting dan ranging. </li>\n<li>Tag: untuk menyimpan sekumpulan teks/label/kategri. Berbeda dengan teks field, tag fields tidak diterapkan stemming dan stop words.</li>\n<li>Geo: untuk menyimpan latitude dan longitude. Tipe ini disimpan sebagai sorted-set pada Redis.</li>\n</ol>\n<hr>\n<p>Sepertinya segitu aja yang perlu dicatat pada minggu pertama di RU201 ini. Yaudahlah sampai jumpa di catatan minggu berikutnya.</p>\n","excerpt":"Ini adalah catatan minggu pertama dari apa yang saya pelajari di kelas RU201-nya Redis University yang berjudul \"RediSearch\". Pada kelas ini, pembahasannya adalah tentang RediSearch, yaitu modul","description":"Catatan kelas Redis University RU201 minggu pertama","author":{"id":"Muhammad Syifa","title":"Muhammad Syifa","path":"/author/Muhammad%20Syifa/"}}}]}}},"context":{}}