{"data":{"posts":{"totalCount":4,"pageInfo":{"totalPages":1,"currentPage":1},"edges":[{"node":{"id":"7240487eb4ae485b30c3e42652d19ff3","title":"Redis University RU202 - Minggu Pertama","datetime":"2019-08-15 11:00:00","content":"<p>Ini adalah catatan minggu pertama dari apa yang saya pelajari di kelas RU202-nya <a href=\"https://university.redislabs.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Redis University</a> yang berjudul <strong>\"Redis Streams\"</strong>.</p>\n<p>Sesuai judulnya, pada kelas ini pembahasannya adalah tentang Redis Stream, fitur pada Redis yang diperuntukkan untuk membuat messaging dan streaming pipelines.</p>\n<p>Kelas RU202 yang saya ikuti ini dimulai pada 7 Agustus 2019, dan akan berjalan selama 5 minggu\ndimana 4 minggu pertama adalah pembelajaran, dan minggu terakhir adalah ujian.\nPada 4 minggu pertama, peserta dibagikan materi berupa video, quiz, dan diakhiri dengan PR mingguan.\nNilai dari PR mingguan akan diakumulasikan pada nilai akhir, jika nilai akhir mencapai 64% atau lebih, peserta akan diberikan sertifikat penyelesaian dari Redis University.</p>\n<p>Sebagaimana kelas Redis University lainnya, RU202 juga memberikan Virtual Lab di setiap minggunya yang sudah terinstall Redis.</p>\n<h2 id=\"catatan-ru202-minggu-pertama\"><a href=\"#catatan-ru202-minggu-pertama\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Catatan RU202 Minggu Pertama</h2>\n<p>Pada minggu pertama ini, yang dibahas adalah:</p>\n<ol>\n<li>Pengenalan Distributed Systems dan Stream Processing</li>\n<li>Pengenalan Redis Streams</li>\n</ol>\n<h4 id=\"1-pengenalan-distributed-systems-dan-stream-processing\"><a href=\"#1-pengenalan-distributed-systems-dan-stream-processing\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Pengenalan Distributed Systems dan Stream Processing</h4>\n<h6 id=\"distributed-systems\"><a href=\"#distributed-systems\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Distributed Systems</h6>\n<p>Distributed systems adalah sebuah setup (pengaturan) yang terdiri dari berbagai komponen jaringan yang saling melakukan perpesanan (messaging) satu sama lain. Redis sendiri didesain untuk menjadi salah satu komponen tersebut, dimana nama Redis merupakan singkatan dari \"<strong>Re</strong>mote <strong>Di</strong>ctionary <strong>S</strong>erver\". Kata \"remote\" berarti dapat diakses melalui jaringan, sedangkan kara \"server\" menunjukkan rolenya pada paradigma client-server. Jadi kata Redis sendiri dapat diartikan sebagai server yang berperan sebagai bagian dari setup dimana komponen-komponen (pada distributed system) lain berkomunikasi dengannya, juga menjadi perantara antara setiap komponen untuk berkomunikasi satu sama lain.</p>\n<p>Membuat distributed system memiliki tantangan tersendiri dalam menghadapi kegagalan (failures). Saat salah satu komponen mengalami kegagalan (mati), komponen tersebut jadi tidak dapat menerima pesan apapun dari komponen lain, bahkan pesan yang sedang diproses sebelum dia mati juga ikut hilang. Kehilangan sebuah komponen dalam distributed system adalah hal yang tidak dapat dicegah. Oleh karena itu distributed system yang dibuat harus dirancang sedemikian rupa untuk menghadapi kemungkinan tersebut.</p>\n<p>Messaging adalah komponen yang cukup penting dalam sebuah distributed system, karena dia mengendalikan global-state yang digunakan oleh komponen-komponen lain. </p>\n<p>Pada versi 5.0, Redis sudah mendukung distributed messaging. Messaging pada Redis dirancang khusus untuk unggul dalam performa dibanding beberapa alternatif message broker lainnya.</p>\n<h6 id=\"stream-processing\"><a href=\"#stream-processing\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Stream Processing</h6>\n<p>Setiap distributed system bergantung pada komponen messaging untuk mengendalikan atau mengkoordinasikan komponen-komponen lain. Beberapa sistem dibangun untuk dapat menangani data yang dikirimkan secara terus-menerus, dan bereaksi secara instan saat terdapat perubahan pada data. Pada era big data, hal ini disebut stream processing, dipopulerkan oleh Apache Storm dan beberapa konsep lain yang sudah hadir sebelumnya.</p>\n<p>Stream processing adalah kebalikan dari batch processing.</p>\n<p>Contoh populer dari stream processing adalah monitoring suhu. Sensor suhu akan membaca suhu setiap sepersekian detik, kemudian sensor akan mengirimkannya secara terus menerus (streaming) data tersebut ke stream processor. Kemudian stream processor akan mengecek, jika suhu melewati batas yang ditentukan, stream processor secara real-time akan mengirimkan notifikasi ke smartpohne pengguna.</p>\n<h4 id=\"2-pengenalan-redis-stream\"><a href=\"#2-pengenalan-redis-stream\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Pengenalan Redis Stream</h4>\n<p>Pada versi 5.0 Redis mendukung struktur data untuk melakukan stream yang diberi nama Redis Stream.</p>\n<p>Berikut beberapa poin penting tentang Redis Stream:</p>\n<ol>\n<li>Redis Stream adalah struktur data.</li>\n<li>Bertindak seperti <em>append-only</em> list. Tidak seperti list yang bisa ditambahkan nilai pada index tertentu, stream hanya dapat ditambahkan di akhir. Jadi mulai sekarang bayangin Redis Stream ini adalah array.</li>\n<li>Setiap item didalam Redis Stream adalah Hash (semacam <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">Map&lt;String, String&gt;</code> kalau di Java).</li>\n<li>Setiap item didalam Redis Stream diidentifikasikan oleh ID unik, dimana secara default ID adalah <em>time-prefixed</em> (diawali informasi waktu).</li>\n<li>Mendukung ID-based range queries. Kalau ibarat SQL di RDBMS, dia mendukung semacam: <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">select from streamnya where timenya between timeA and timeB</code>.</li>\n<li>Setiap Redis Stream dapat dikonsumsi oleh banyak kelompok consumer atau yang disebut sebagai consumer group.</li>\n<li>Redis stream bersifat immutable, sekali di append, data tidak dapat diubah.</li>\n<li>Setiap item didalam Redis Stream dapat dihapus, tetapi Redis hanya memberi flag \"terhapus\", datanya sendiri sebetulnya masih ada, tetapi tidak akan muncul saat diquery.</li>\n</ol>\n<p>Sebelumnya Redis memiliki fitur Redis Pub/Sub, lalu apa bedanya dengan Redis Stream?</p>\n<p>Perbedaannya adalah, jika pada Pub/Sub, client hanya menerima data yang dipublish (dikirim) <strong>setelah dia terhubung</strong>. Sedangkan pada Redis Stream, client yang baru terhubung akan menerima data stream yang dikirim <strong>sebelum dia terhubung</strong>. Dengan kata lain pada Pub/Sub memori akan dihapus setelah publish selesai dilakukan, sedangkan pada Redis Stream memori (data streamnya) tetap disimpan untuk dikirimkan nanti saat ada client baru yang terhubung.</p>\n<hr>\n<p>Segitu aja mungkin untuk RU202 ini yang perlu saya catat. Yaudahlah, sampai jumpa di catatan minggu depan.</p>\n","excerpt":"","description":"Catatan kelas Redis University RU102 minggu pertama","path":"/redis-university-ru202-minggu-pertama","cover":"/images/posts/ru202-w1-cover.png","tags":[{"id":"Redis University","title":"Redis University","path":"/tag/Redis%20University"},{"id":"Course","title":"Course","path":"/tag/Course"},{"id":"RU202","title":"RU202","path":"/tag/RU202"}],"author":{"id":"Muhammad Syifa","title":"Muhammad Syifa","path":"/author/Muhammad%20Syifa"}}},{"node":{"id":"a09ab95e3517e559565ab4d8a222ae85","title":"Redis University RU201 - Minggu Pertama","datetime":"2019-08-15 10:00:00","content":"<p>Ini adalah catatan minggu pertama dari apa yang saya pelajari di kelas RU201-nya <a href=\"https://university.redislabs.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Redis University</a> yang berjudul <strong>\"RediSearch\"</strong>.</p>\n<p>Pada kelas ini, pembahasannya adalah tentang RediSearch, yaitu modul Redis yang berisi perlengkapan untuk melakukan pencarian berbasis memori dan melakukan secondary indexing.</p>\n<p>Kelas RU201 yang saya ikuti ini dimulai pada 7 Agustus 2019, dan akan berjalan selama 6 minggu\ndimana 5 minggu pertama adalah pembelajaran, dan minggu terakhir adalah ujian.\nPada 5 minggu pertama, peserta dibagikan materi berupa video, quiz, dan diakhiri dengan PR mingguan.\nNilai dari PR mingguan akan diakumulasikan pada nilai akhir, jika nilai akhir mencapai 65% atau lebih, peserta akan diberikan sertifikat penyelesaian dari Redis University.</p>\n<p>Sebagaimana kelas Redis University lainnya, RU201 juga memberikan Virtual Lab di setiap minggunya yang sudah terinstall Redis dan RediSearch.</p>\n<h2 id=\"catatan-ru201-minggu-pertama\"><a href=\"#catatan-ru201-minggu-pertama\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Catatan RU201 Minggu Pertama</h2>\n<p>Pada minggu pertama, materi yang dibahas adalah:</p>\n<ol>\n<li>Redis Module</li>\n<li>Konsep Search Engine</li>\n<li>Konsep Secondary Index</li>\n<li>RediSearch vs Redis</li>\n</ol>\n<h4 id=\"1-redis-module\"><a href=\"#1-redis-module\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Redis Module</h4>\n<p>Redis module adalah software tambahan untuk menambahkan fungsionalitas yang berbeda pada Redis.\nRedis module berbeda dengan Redis client yang dibahas pada kelas RU102J.</p>\n<p>Berikut adalah poin-poin penting tentang redis module.</p>\n<ol>\n<li>Redis module adalah compiled software.</li>\n<li>Redis module diimplementasikan sebagai sebuah shared object file (kurang tau maksudnya apa).</li>\n<li>Redis module berisi subroutines yang mengizinkan Redis server untuk terintegrasi dengannya saat runtime. Subroutines dipanggil oleh Redis melalui <em>foreign function interface</em>.</li>\n<li>Umumnya redis module dibuat menggunakan C, C++ dan Rust.</li>\n<li>Redis module dapat mengimplementasikan data type tersendiri diluar data types yang disediakan Redis.</li>\n<li>Redis module dapat menambahkan perintah-perintah baru pada Redis server.</li>\n<li>Data type memiliki akses langsung ke memori, disimpan ke server, dan beroperasi dengan kecepatan dan efisiensi yang sama dengan built-in commands.</li>\n<li>\n<p>Redis module dapat diintegrasikan dengan beberapa cara:</p>\n<ul>\n<li>Melalui file redis.conf.</li>\n<li>Melalui command line argument.</li>\n<li>Melalui perintah <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">MODULE LOAD</code> pada redis-cli.</li>\n<li>Melalui Redis enterprise GUI.</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"2-konsep-search-engine\"><a href=\"#2-konsep-search-engine\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Konsep Search Engine</h4>\n<p>Pada bagian ini yang pertama kali dibahas adalah tentang konsep dasar dari vocabulary pada search engine.\nUmumnya setiap indeks search engine terdiri dari sekumpulan dokumen. Setiap dokumen diidentifikasikan oleh ID yang terbuat dari sekumpulan field.</p>\n<p>Berikut poin-poin cukup penting untuk diingat:</p>\n<ul>\n<li>Indeks terdiri dari sekumpulan dokumen.</li>\n<li>Indeks dapat hanya berisi referensi dari dokumen tanpa menyimpan dokumen tersebut.</li>\n<li>Indeks tidak mengharuskan setiap field di dokumen untuk didefinisikan pada skema.</li>\n</ul>\n<h6 id=\"tokenization\"><a href=\"#tokenization\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tokenization</h6>\n<p>DBMS pada umumnya menyimpan teks sebagai binary-stream, sedangkan search engine perlu memahami bahasa manusia\nsehingga tidak dapat menyimpan teks sebagai binary-stream. Hal pertama yang dilakukan search engine adalah\nmengambil teks dan mengubahnya menjadi huruf kecil semua, lalu memecah teks-teks tersebut kedalam <em>logical-unit</em>, alias token. Untuk mendapatkan token, diperlukan proses <em>tokenization</em> (tokenisasi).</p>\n<p>Sebagai contoh, pada kalimat \"sebuah token adalah\", jika dilakukan proses tokenisasi akan menjadi 3 buah token:\n\"sebuah\", \"token\", dan \"adalah\".</p>\n<p>Pada RediSearch, spasi bukan satu-satunya pemisah token. Melainkan hampir semua tanda baca adalah pemisah dari token, dan akan diabaikan.</p>\n<p>Sebagai contoh saat kamu memiliki kalimat \"kamu adalah satu-satunya\", maka RediSearch akan memecahnya menjadi 4 buah token: \"kamu\", \"adalah\", \"satu\", \"satunya\".</p>\n<p>Jika kamu menginginkan \"satu-satunya\" dianggap sebagai sebuah token, kamu dapat melakukan escaping dengan menambahkan karakter backslash <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">\\</code> pada karakter pemisah. Contoh: \"kamu adalah satu\\-satunya\".</p>\n<h6 id=\"stop-words\"><a href=\"#stop-words\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Stop Words</h6>\n<p>Stop words adalah daftar kata yang dianggap tidak penting (dapat diabaikan) sehingga perlu dihilangkan dari indeks.\nSebagai contoh adalah kata \"a\" (sebuah/seorang), kata tersebut sangat sering digunakan pada hampir semua dokumen, sehingga dirasa tidak perlu menyimpannya kedalam indeks.</p>\n<p>Pada RediSearch daftar katayang masuk kedalam stop words (secara default) adalah:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">a,    is,    the,   an,   and,  are, as,  at,   be,   but,  by,   for,</span>\n<span style=\"color: #24292EFF\">if,   in,    into,  it,   no,   not, of,  on,   or,   such, that, their,</span>\n<span style=\"color: #24292EFF\">then, there, these, they, this, to,  was, will, with</span></code></pre>\n<p>Kata-kata tersebut secara default akan diabaikan oleh RediSearch, tidak akan dimasukkan kedalam indeks.</p>\n<h5 id=\"stemming\"><a href=\"#stemming\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Stemming</h5>\n<p>Stemming adalah proses mengubah kata pada setiap token menjadi kata dasarnya saja. Sebagai contoh kata \"menciptakan\", imbuhan \"men-kan\" akan dihapus, sehingga yang disimpan kedalam indeks hanya kata \"cipta\" saja. Kata kunci yang dimasukkan pada search engine juga dilakukan stemming. Dengan begini search engine yang dibuat jadi nggak kaku-kaku banget.</p>\n<p>Di RediSearch sendiri stemming bersifat optional, karena proses stemming ini cukup rumit untuk diadaptasi pada setiap bahasa, karena peraturan masing-masing bahasa yang cukup kompleks.</p>\n<h4 id=\"3-konsep-secondary-index\"><a href=\"#3-konsep-secondary-index\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. Konsep Secondary Index</h4>\n<p>Secondary indeks seperti namanya adalah indeks kedua setelah indeks utama (primary index). Yang dimaksud kedua disini, jadi secondary index adalah index yang berisi indeks utama. Aduh bingung juga nulisnya.</p>\n<p>Gini, misalkan di MySQL kita punya database customer yang berisi kolom \"ID\", \"email\", \"name\", \"phone\", \"dob\", dan \"city\", dimana kolom ID adalah primary key (primary index).</p>\n<p>Saat kita ingin mencari customer berdasarkan \"city\", untuk mempercepat pencarian kita membutuhkan secondary index yang berisi ID dari si customer. Nanti setelah ID-nya didapat, barulah kita mengambil data customer secara utuh.</p>\n<p>Disini RediSearch berperan sebagai secondary index dimana dia menyimpan field-field yang akan dilakukan pencarian, yang berisi primary index.</p>\n<p>RediSearch memiliki kelebihan sebagai secondary index yaitu sebagaimana Redis, RedisSearch menyimpan secondary index kedalam memory (bukan phisycal storage) sehingga performa lebih optimal.</p>\n<p>Kekurangan menggunakan secondary index diantaranya:</p>\n<ul>\n<li>Meningkatkan kompleksitas untuk menjaga indeks supaya tetap sesuai dengan penyimpanan aslinya.</li>\n<li>Berpotensi out-of-date. Lagi-lagi kita harus menjaga indeks supaya sesuai dengan penyimpanan aslinya.</li>\n<li>2 stage latency. Karena kita memerlukan setidaknya 2 proses untuk setiap pencarian. Query ke RediSearch, kemudian query ke storage aslinya.</li>\n</ul>\n<h4 id=\"4-redisearch-vs-redis\"><a href=\"#4-redisearch-vs-redis\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. RediSearch vs Redis</h4>\n<p>RediSearch memproses nilai berbeda dengan Redis biasa. Berikut adalah beberapa perbedannya.</p>\n<h6 id=\"keyspaces-vs-index\"><a href=\"#keyspaces-vs-index\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Keyspaces vs Index</h6>\n<p>Pada RediSearch tidak berlaku one-key pattern seperti halnya Redis biasa. Setiap key pada RediSearch disimpan menggunakan key space khusus sehingga kita tidak dapat menggunakan perintah redis biasa pada key yang digunakan di RediSearch.</p>\n<h6 id=\"field-types\"><a href=\"#field-types\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Field Types</h6>\n<p>Ada 4 tipe data yang perlu diketahui pada RediSearch.</p>\n<ol>\n<li>Text: untuk menyimpan teks. Untuk setiap skema dari dokumen, maksimal hanya boleh terdiri dari 128 text field. Text field dapat diberikan bobot dan dapat dilakukan sorting.</li>\n<li>Numeric: untuk menyimpan data non-tekstual. Tipe ini dapat dilakukan sorting dan ranging. </li>\n<li>Tag: untuk menyimpan sekumpulan teks/label/kategri. Berbeda dengan teks field, tag fields tidak diterapkan stemming dan stop words.</li>\n<li>Geo: untuk menyimpan latitude dan longitude. Tipe ini disimpan sebagai sorted-set pada Redis.</li>\n</ol>\n<hr>\n<p>Sepertinya segitu aja yang perlu dicatat pada minggu pertama di RU201 ini. Yaudahlah sampai jumpa di catatan minggu berikutnya.</p>\n","excerpt":"","description":"Catatan kelas Redis University RU102 minggu pertama","path":"/redis-university-ru201-minggu-pertama","cover":"/images/posts/ru201-w1-cover.png","tags":[{"id":"Redis University","title":"Redis University","path":"/tag/Redis%20University"},{"id":"Course","title":"Course","path":"/tag/Course"},{"id":"RU201","title":"RU201","path":"/tag/RU201"}],"author":{"id":"Muhammad Syifa","title":"Muhammad Syifa","path":"/author/Muhammad%20Syifa"}}},{"node":{"id":"2a0270af5d02e65c8218fd4d866af458","title":"Redis University RU102J - Minggu Pertama","datetime":"2019-08-15 09:00:00","content":"<p>Ini adalah catatan minggu pertama dari apa yang saya pelajari di kelas RU102J-nya <a href=\"https://university.redislabs.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Redis University</a> yang berjudul <strong>\"Redis for Java Developers\"</strong>.</p>\n<p>Seperti judulnya, para peserta diajarkan best-practice menggunakan Redis pada aplikasi berbasis Java.\nDisini peserta akan dituntun untuk membuat aplikasi <em>Redis Solar</em>, yaitu aplikasi untuk memonitoring panel surya berbasis web menggunakan Java framework <a href=\"https://www.dropwizard.io\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dropwizard</a> sebagai back-end dan <a href=\"https://vuejs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vue.js</a> sebagai front-end frameworknya.</p>\n<p>Kelas RU102J yang saya ikuti ini dimulai pada 7 Agustus 2019, dan akan berjalan selama 5 minggu\ndimana 4 minggu pertama adalah pembelajaran, dan minggu terakhir adalah ujian.\nPada 4 minggu pertama, peserta dibagikan materi berupa video, quiz, dan diakhiri dengan PR mingguan.\nNilai dari PR mingguan akan diakumulasikan pada nilai akhir, jika nilai akhir mencapai 65% atau lebih, peserta akan diberikan sertifikat penyelesaian dari Redis University.</p>\n<p>Sebagaimana kelas Redis University lainnya, RU102J juga memberikan Virtual Lab di setiap minggunya yang sudah terinstall redis beserta java environmentnya.</p>\n<p>Selain menggunakan Virtual Lab, kelas ini juga sudah menyediakan docker image untuk peserta yang ingin menjalankan aplikasi di komputernya sendiri.</p>\n<h2 id=\"catatan-ru102j-minggu-pertama\"><a href=\"#catatan-ru102j-minggu-pertama\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Catatan RU102J Minggu Pertama</h2>\n<p>Pada minggu pertama ini pembahasannya hanya seputar setup environment, pengenalan Redis Client, serta pengenalan DAO pattern.</p>\n<p>Untuk setup environment saya rasa tidak perlu saya catat disini, karena itu berbeda-beda untuk setiap OS.\nKarena saya juga di kelas ini menggunakan Virtual Lab dari mereka (ngirit storage saya om :p). Jadi langsung saja bahas tentang Redis Client dan DAO Pattern.</p>\n<h4 id=\"redis-clients\"><a href=\"#redis-clients\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Redis Clients</h4>\n<p>Redis client adalah library untuk menghubungkan aplikasi yang akan dibuat dengan Redis server.\nRedis client saat ini sudah tersedia pada berbagai bahasa pemrograman populer. Tugas redis client antara lain:</p>\n<ol>\n<li>Mengelola koneksi antara client (app) dengan redis-server.</li>\n<li>Mengimplementasikan Redis Serialization Protocol (ReSP).</li>\n<li>Menyajikan API untuk menjalankan perintah redis ke redis-server pada bahasa pemrograman terkait.</li>\n</ol>\n<p>Ada beberapa redis client untuk Java yang dijadikan pembahasan pada kelas ini. Diantaranya adalah:</p>\n<ol>\n<li>Jedis.</li>\n<li>Lettuce.</li>\n<li>Redisson.</li>\n</ol>\n<p>Sedangkan yang akan digunakan pada kelas ini adalah Jedis, karena:</p>\n<ol>\n<li>Ukuran library yang kecil.</li>\n<li>API yang mirip-mirip dengan redis-cli.</li>\n</ol>\n<p>Berikut adalah hal dasar yang perlu diketahui saat menggunakan Jedis:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #6A737D\">// Initialize connection</span>\n<span style=\"color: #D32F2F\">String</span><span style=\"color: #24292EFF\"> redisHost </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #22863A\">\"localhost\"</span><span style=\"color: #24292EFF\">;</span>\n<span style=\"color: #D32F2F\">int</span><span style=\"color: #24292EFF\"> redisPort </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #1976D2\">6379</span><span style=\"color: #24292EFF\">;</span>\n<span style=\"color: #D32F2F\">Jedis</span><span style=\"color: #24292EFF\"> jedis </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">new</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">Jedis</span><span style=\"color: #24292EFF\">(redisHost, redisPort);</span>\n\n<span style=\"color: #6A737D\">// Set value</span>\n<span style=\"color: #24292EFF\">jedis</span><span style=\"color: #D32F2F\">.</span><span style=\"color: #24292EFF\">set(</span><span style=\"color: #22863A\">\"foo\"</span><span style=\"color: #24292EFF\">, </span><span style=\"color: #22863A\">\"bar\"</span><span style=\"color: #24292EFF\">);</span>\n\n<span style=\"color: #6A737D\">// Get value</span>\n<span style=\"color: #D32F2F\">String</span><span style=\"color: #24292EFF\"> value </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> jedis</span><span style=\"color: #D32F2F\">.</span><span style=\"color: #24292EFF\">get(</span><span style=\"color: #22863A\">\"foo\"</span><span style=\"color: #24292EFF\">); </span><span style=\"color: #6A737D\">// \"bar\"</span></code></pre>\n<p>Berikut ini adalah type mapping antara Java dan Redis:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Redis</th>\n<th align=\"center\">Java</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">string</td>\n<td align=\"center\">String</td>\n</tr>\n<tr>\n<td align=\"center\">list</td>\n<td align=\"center\">List<String></td>\n</tr>\n<tr>\n<td align=\"center\">set</td>\n<td align=\"center\">Set<String></td>\n</tr>\n<tr>\n<td align=\"center\">hash</td>\n<td align=\"center\">Map&#x3C;String, String></td>\n</tr>\n<tr>\n<td align=\"center\">float</td>\n<td align=\"center\">Double</td>\n</tr>\n<tr>\n<td align=\"center\">integer</td>\n<td align=\"center\">Long</td>\n</tr>\n</tbody>\n</table>\n<p>Untuk API Jedis selengkapnya bisa dilihat di dokumentasi Jedis <a href=\"http://xetorthio.github.io/jedis/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">disini</a>.</p>\n<h4 id=\"dao-pattern\"><a href=\"#dao-pattern\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>DAO Pattern</h4>\n<p>DAO adalah singkatan dari Data Access Object. DAO pattern memisahkan data access interface dari logic untuk berinteraksi dengan penyimpanan data. DAO pattern mendukung implementasi beragam penyimpanan data. Pada DAO domain objek dipisahkan dari logic utama.</p>\n<p>Kalau kamu pernah coba Repository Pattern, DAO ini mirip-mirip dengan Repository Pattern.</p>\n<p>Pada DAO pattern, kita memerlukan setidaknya beberapa hal dibawah ini:</p>\n<ol>\n<li>Domain Object: untuk merepresentasikan data.</li>\n<li>DAO interface: interface yang berisi data-store-agnostic API.</li>\n<li>DAO Implementation: class yang mengimplementasikan DAO interface untuk berinteraksi dengan data storage.</li>\n</ol>\n<p>Berikut ini adalah contoh diagram dari penerapan DAO pattern.</p>\n<p><img src=\"/images/posts/ru102j-w1-dao.png\" alt=\"DAO Pattern\"></p>\n<p>Pada diagram diatas, interface <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">SiteDao</code> berperan untuk melakukan abstraksi. Untuk menggunakan Redis pada pattern ini, dibuatlah class <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">SiteDaoRedisImpl</code> yang mengimplementasikan <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">SiteDao</code>. <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">SiteDaoRedisImpl</code> ini terhubung ke penyimpanan redis menggunakan Redis Client. Sedangkan class <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">Site</code> pada diagram diatas digunakan sebagai objek masukan atau kembalian dari setiap class yang mengimplementasikan <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">SiteDao</code> interface, yang dalam contoh ini adalah <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">SiteDaoRedisImpl</code>.</p>\n<p>Dengan pattern seperti ini, Application Code terima beres, tidak perlu tahu-menahu yang terjadi pada data storage.\nJika suatu saat kita ingin menggantikan Redis, kita hanya perlu membuat class yang mengimplementasikan <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">SiteDao</code>, dan memasukkannya ke Application Code. Sedangkan pada Application Code kita tidak perlu merubah apapun.</p>\n<hr>\n<p>Sebetulnya di kelas diajarkan coding Java untuk menerapkan DAO pattern ini, cuma codenya terlalu panjang, dan sebagian besar hanya code Java sederhana, yang bagian pentingnya sudah ditulis pada snippet Redis Clients diatas, jadi saya nggak ngerasa perlu untuk mencatat.</p>\n<p>Jadi segitu aja catatan RU102J untuk minggu ini. Sampai jumpa di catatan minggu selanjutnya.</p>\n","excerpt":"","description":"Catatan kelas Redis University RU102 minggu pertama","path":"/redis-university-ru102j-minggu-pertama","cover":"/images/posts/ru102j-w1-cover.png","tags":[{"id":"Redis University","title":"Redis University","path":"/tag/Redis%20University"},{"id":"Course","title":"Course","path":"/tag/Course"},{"id":"RU102J","title":"RU102J","path":"/tag/RU102J"}],"author":{"id":"Muhammad Syifa","title":"Muhammad Syifa","path":"/author/Muhammad%20Syifa"}}},{"node":{"id":"b906e495457b911ef5cdb5d4376f81a6","title":"Redis University RU101 - Minggu Pertama","datetime":"2019-08-15 08:00:00","content":"<p>Ini adalah catatan minggu pertama dari apa yang saya pelajari di kelas RU101-nya <a href=\"https://university.redislabs.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Redis University</a> yang berjudul <strong>\"Introduction to Redis Data Structures\"</strong>.</p>\n<p>Karena RU101 ini adalah kelas paling dasar dari Redis University, dan karena ini adalah minggu pertama, saya jelasin dulu lah ya Redis University itu apa, dan bagaimana cara kerjanya.</p>\n<h2 id=\"apaan-si-redis-university\"><a href=\"#apaan-si-redis-university\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Apaan si Redis University?</h2>\n<p>Redis University adalah Universitas Redis (wawasanku luas sekali :p). Ya pokoknya seperti namanya,\nRedis University ini adalah situs belajar online gratis yang dibuat oleh <a href=\"https://www.redislabs.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Redis Lab</a> <span>—</span> sang pencipta <a href=\"https://www.redis.io\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Redis</a>, yang tentunya berisi kelas-kelas yang membahas tentang Redis. Kalau kamu ga tau apa itu Redis, cari tau dulu gih sana. Hush hush ~ #ngusir</p>\n<p>Saat tulisan ini dibuat, baru ada 5 kelas yang tersedia pada 'Universitas' ini. Saya sendiri ikut 4 kelas yang salah satunya adalah si RU101.</p>\n<hr>\n<p>\"Kok nanggung nggak 5-5nya? sebagai orang Indonesia yang baik dan benar kamu harusnya borong semua 'benda' gratisan ini dong!\"</p>\n<p>Tenang kawan, sebagai orang Indonesia yang baik dan benar saya juga paham itu. Saya nggak ikut yang satunya bukan karena saya nggak mau, tapi karena kelas yang 1 lagi baru dibuka musim gugur nanti. Eh, fall itu musim gugur kan ya? pokoknya gitulah. #BodoAmat</p>\n<hr>\n<h2 id=\"pengenalan-ru101\"><a href=\"#pengenalan-ru101\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Pengenalan RU101</h2>\n<p>Kelas RU101 yang saya ikuti ini dimulai pada 7 Agustus 2019, dan akan berjalan selama 6 minggu\ndimana 5 minggu pertama adalah pembelajaran, dan minggu terakhir adalah ujian.\nPada 5 minggu pertama, peserta dibagikan materi berupa video, quiz, dan diakhiri dengan PR mingguan.\nNilai dari PR mingguan akan diakumulasikan pada nilai akhir, jika nilai akhir mencapai 65% atau lebih, peserta akan diberikan sertifikat penyelesaian dari Redis University.</p>\n<p>Yang menarik dari kelasnya si Redis University ini, dia memberikan Virtual Lab setiap minggunya yang bisa kita gunakan\nuntuk <del>mining</del> coba-coba materi yang diajarkan. Di Virtual Lab ini sudah terinstall Redis, Python, Java, Web IDE, dsb, yaa pokoknya software-softare yang dibutuhkan pada minggu itu udah diinstalin, bahkan source code dan sample datanya sudah disediakan. Peserta tinggal gunain doang.</p>\n<p>Kebetulan sekarang saya sehari-harinya pakai Windows 10 Home Edition (bawaan laptop) yang belum mendukung Redis secara native, jadi kebantu banget sama Virtual Lab ini. </p>\n<h2 id=\"catatan-ru101-minggu-pertama\"><a href=\"#catatan-ru101-minggu-pertama\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Catatan RU101 Minggu Pertama</h2>\n<p>Oke sekarang kita masuk ke inti dari tulisan ini. Oia karena status saya disini adalah pelajar,\njadi kalau ada salah-salah silahkan aja di koreksi. Asal jangan caci-maki, nanti saya nangis, saya aduin kamu ke mama saya. #TukangNgadu</p>\n<p>Seperti yang tertulis di paragraf pertama, kelas RU101 ini membahas tentang \"Introduction to Redis Data Structures\",\nyang kalau diterjemahkan ke bahasa Rumania berarti \"Introducere în structurile de date Redis\". #WawPentingSekali</p>\n<p>Pada minggu pertama ini, yang dibahas adalah:</p>\n<ol>\n<li>Keys</li>\n<li>Strings</li>\n<li>Hashes</li>\n<li>Lists</li>\n<li>Sets</li>\n<li>Sorted Sets</li>\n</ol>\n<p>Mari <del>kita</del> saya bahas satu persatu.</p>\n<h4 id=\"1-keys\"><a href=\"#1-keys\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Keys</h4>\n<p>Keys adalah cara utama untuk mengakses nilai dari data didalam Redis. Hampir semua perintah Redis membutuhkan setidaknya sebuah parameter key.</p>\n<p>Yang perlu diketahui dari key pada Redis:</p>\n<ol>\n<li>Penamaan key harus unik.</li>\n<li>Key pada Redis bersifat binary safe, yang artinya binary sequence apapun dapat dijadikan key. Mulai dari string \"foo\", bilangan bulat seperti 42, atau bilangan desimal seperti 3.1415, atau binary value seperti 0xff juga bisa dijadikan key.</li>\n<li>Ukuran maksimal key adalah 512MB. Tapi tidak disarankan membuat key terlalu panjang.</li>\n<li>Key bersifat case-sensitive. Artinya \"foobar\" berbeda dengan \"fooBar\".</li>\n</ol>\n<p>Selanjutnya untuk penamaan key, biasanya ada 2 opsi yang sering diperdebatkan, mau yang singkat seperti \"inv:id\" atau yang mudah dibaca seperti \"invoice:id\". Semua kembali kepada developer sendiri mau pakai yang singkat atau yang mudah dibaca.</p>\n<p>Untuk struktur penamaan key, umumnya adalah seperti contoh dibawah ini:</p>\n<p>Misalkan kita mau menampung data followers dari user dengan ID 123.\nKey yang dapat kita gunakan adalah:</p>\n<code class=\"shiki\" style=\"background: #2e3440; color: #d8dee9\">user:123:followers</code>\n<p>Dimana:</p>\n<ul>\n<li><code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">user</code>: nama objek</li>\n<li><code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">123</code>: ID user</li>\n<li><code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">followers</code>: objek yang ditampung</li>\n</ul>\n<p>Tetapi kembali lagi kepada developer mau menggunakan struktur seperti apa yang sesuai dengan kebutuhan. Hanya saja harus konsisten.</p>\n<p>Untuk mendefinisikan sebuah nilai dari key menggunakan Redis CLI, cara paling sederhana adalah dengan menggunakan perintah <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">SET</code>. Seperti dibawah ini:</p>\n<code class=\"shiki\" style=\"background: #2e3440; color: #d8dee9\">SET user:123:name &quot;Muhammad Syifa&quot; </code>\n<p>Sedangkan untuk mengambil data dari <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">user:123:name</code>, gunakan perintah <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">GET</code>:</p>\n<code class=\"shiki\" style=\"background: #2e3440; color: #d8dee9\">GET user:123:name</code>\n<p>Output:</p>\n<code class=\"shiki\" style=\"background: #2e3440; color: #d8dee9\">&quot;Muhammad Syifa&quot;</code>\n<h6 id=\"keys-vs-scan\"><a href=\"#keys-vs-scan\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>KEYS vs SCAN</h6>\n<p>Untuk melihat ada key apa saja yang terdapat dalam database Redis, kita dapat menggunakan perintah <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">KEYS</code> atau <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">SCAN</code>.</p>\n<p>Berikut adalah perbedaan dari ke-2nya:</p>\n<ul>\n<li><code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">KEYS</code> memblok transaksi sampai semua key didapat. <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">SCAN</code> membaca key satu per satu menggunakan kursor.</li>\n<li>Karena memblok transaksi, <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">KEYS</code> tidak disarankan untuk digunakan pada production. Untuk production gunakan <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">SCAN</code>.</li>\n</ul>\n<p>Contoh penggunaan <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">KEYS</code> untuk melihat key yang diawali <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">user:1</code>:</p>\n<code class=\"shiki\" style=\"background: #2e3440; color: #d8dee9\">KEYS user:1*</code>\n<p>Output:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">1) user:1</span>\n<span style=\"color: #24292EFF\">2) user:10</span>\n<span style=\"color: #24292EFF\">3) user:11</span>\n<span style=\"color: #24292EFF\">4) user:1:followers</span>\n<span style=\"color: #24292EFF\">...</span></code></pre>\n<p>Sedangkan untuk penggunaan <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">SCAN</code> untuk hal yang sama adalah sebagai berikut:</p>\n<code class=\"shiki\" style=\"background: #2e3440; color: #d8dee9\">SCAN 0 MATCH user:1*</code>\n<p>Output:</p>\n<code class=\"shiki\" style=\"background: #2e3440; color: #d8dee9\">1) &quot;15488&quot; # ini adalah kursor selanjutnya\n2) (empty list or set) # ini adalah hasilnya</code>\n<p>Loh? kok hasilnya kosong? Jadi perintah <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">SCAN</code> scan diatas kalau diterjemahkan itu: scan keys mulai dari kursor 0 yang diawali dengan \"user:1\". Sedangkan secara default perintah SCAN hanya akan membaca 10 key pertama (COUNT = 10). Jadi perintah diatas hanya akan scan 10 key mulai dari kursor 0, dan kalau di kursor tersebut tidak ada yang match dengan \"user:1*\", hasilnya empty list or set.</p>\n<p>Jadi untuk mendapatkan hasilnya, opsinya ada 2, yaitu, melanjutkan iterasi mulai dari kursror \"15488\", atau menambahkan COUNT.</p>\n<ol>\n<li>Melanjutkan iterasi:</li>\n</ol>\n<p>Kalau mau melanjutkan iterasi, tinggal diubah aja parameter pertamanya jadi:</p>\n<code class=\"shiki\" style=\"background: #2e3440; color: #d8dee9\">SCAN 15488 MATCH user:1*</code>\n<p>Nanti dia akan ambil kursor 15488 sampai dengan 10 kursor berikutnya.\nIterasi dianggap selesai jika output dari kursor adalah \"0\".</p>\n<ol start=\"2\">\n<li>Menambahkan COUNT</li>\n</ol>\n<p>Untuk menambahkan COUNT, caranya:</p>\n<code class=\"shiki\" style=\"background: #2e3440; color: #d8dee9\">SCAN 0 MATCH user:1* COUNT 1000000</code>\n<p>Dengan begitu akan dilakukan scanning key sebanyak 1 juta kursor dimulai dari kursor 0. Kalau output kursor selanjutnya belum \"0\", artinya masih ada key yang belum di scan.</p>\n<p>Berikut contoh output kalau ada key yang match:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">1) </span><span style=\"color: #22863A\">\"0\"</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6A737D\"># kursor selanjutnya, 0 = selesai</span>\n<span style=\"color: #24292EFF\">2) 1) </span><span style=\"color: #22863A\">\"user:1\"</span>\n<span style=\"color: #24292EFF\">   2) </span><span style=\"color: #22863A\">\"user:10\"</span>\n<span style=\"color: #24292EFF\">   3) </span><span style=\"color: #22863A\">\"user:11\"</span>\n<span style=\"color: #24292EFF\">   4) </span><span style=\"color: #22863A\">\"user:1:followers\"</span></code></pre>\n<h6 id=\"del-vs-unlink\"><a href=\"#del-vs-unlink\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>DEL vs UNLINK</h6>\n<p>Berikutnya untuk menghapus key ada 2 perintah yang dapat digunakan.\nYaitu <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">DEL</code> dan <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">UNLINK</code>. Perbedaannya jika menggunakan <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">DEL</code> key dan nilai akan langsung terhapus (synchronous), dengan <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">UNLINK</code> keynya dihapus, tetapi nilai dari key tersebut akan dihapus setelahnya (asynchronous).</p>\n<h6 id=\"mengecek-key-exists\"><a href=\"#mengecek-key-exists\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Mengecek Key Exists</h6>\n<p>Untuk mengecek key ada atau tidaknya kita dapat menggunakan perintah <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">EXISTS</code>. Contoh:</p>\n<code class=\"shiki\" style=\"background: #2e3440; color: #d8dee9\">EXISTS user:1:name</code>\n<p>Output:</p>\n<code class=\"shiki\" style=\"background: #2e3440; color: #d8dee9\">&quot;1&quot;</code>\n<p>1 artinya ada, sedangkan 0 artinya tidak ada.</p>\n<h6 id=\"argumen-nxxx\"><a href=\"#argumen-nxxx\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Argumen NX|XX</h6>\n<p>Saat menggunakan perintah <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">SET</code>, kita dapat memberikan argumen NX atau XX. NX berarti \"non-exists\" yang kalau kita gunakan, akan mencegah Redis untuk meniban nilai yang sebelumnya sudah pernah kita set. Sedangkan XX digunakan jika kita ingin <strong>mengubah</strong> suatu nilai, dengan kata lain jika kita belum punya key tertentu, dan kita gunakan XX, nilai itu tidak akan dibuat.</p>\n<p>Contoh:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">SET user:1:name </span><span style=\"color: #22863A\">\"Muhammad Syifa\"</span><span style=\"color: #24292EFF\"> NX</span>\n<span style=\"color: #24292EFF\">OK </span><span style=\"color: #6A737D\"># set berhasil</span>\n<span style=\"color: #24292EFF\">SET user:1:name </span><span style=\"color: #22863A\">\"John Doe\"</span><span style=\"color: #24292EFF\"> NX</span>\n<span style=\"color: #24292EFF\">(nil) </span><span style=\"color: #6A737D\"># set ditolak</span>\n<span style=\"color: #24292EFF\">GET user:1:name</span>\n<span style=\"color: #22863A\">\"Muhammad Syifa\"</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6A737D\"># nilai tidak berubah</span>\n\n<span style=\"color: #24292EFF\">SET foo </span><span style=\"color: #22863A\">\"foobar\"</span><span style=\"color: #24292EFF\"> XX</span>\n<span style=\"color: #24292EFF\">GET foo</span>\n<span style=\"color: #24292EFF\">(nil) </span><span style=\"color: #6A737D\"># foo tidak diset karena kita belum set foo sebelumnya</span>\n\n<span style=\"color: #24292EFF\">SET foo </span><span style=\"color: #22863A\">\"foobar\"</span>\n<span style=\"color: #24292EFF\">GET foo</span>\n<span style=\"color: #22863A\">\"foobar\"</span>\n\n<span style=\"color: #24292EFF\">SET foo </span><span style=\"color: #22863A\">\"baz\"</span><span style=\"color: #24292EFF\"> XX</span>\n<span style=\"color: #24292EFF\">GET foo</span>\n<span style=\"color: #22863A\">\"baz\"</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6A737D\"># nilai berubah karena foo sudah kita set sebelumnya</span></code></pre>\n<h6 id=\"key-expiration\"><a href=\"#key-expiration\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Key Expiration</h6>\n<p>Setiap key pada redis dapat diset waktu expirednya. Dan waktu expirednya juga dapat diubah, ataupun dihapus.\nBeberapa perintah untuk mengatur waktu expired dari key adalah sebagai berikut:</p>\n<ul>\n<li><code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">EXPIRE foo 123</code>: set waktu expired key foo selama 123 detik.</li>\n<li><code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">EXPIREAT foo 1568524142</code>: set waktu expired key foo pada 2019-09-15 05:09:02.</li>\n<li><code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">PEXPIRE foo 500</code>: set waktu expired key foo selama 500ms (1/2 detik).</li>\n<li><code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">PEXPIREAT foo 1568524142500</code>: set waktu expired key foo pada 2019-09-15 05:09:02:500.</li>\n<li><code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">TTL foo</code>: melihat sisa waktu foo menuju expired (dalam detik).</li>\n<li><code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">PTTL foo</code>: melihat sisa waktu foo menuju expired (dalam mili-detik).</li>\n<li><code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">PERSIST foo</code>: menghapus waktu expired dari key foo.</li>\n</ul>\n<h4 id=\"2-string\"><a href=\"#2-string\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. String</h4>\n<p>Pada Redis, string adalah tipe data yang paling sederhana.\nNamun tidak seperti DBMS pada umumnya, Redis tidak hanya memperlakukan string sebagai teks saja. Redis tetap dapat mengenali\napakah string tersebut bersifat numerik, sehingga kita bisa melakukan operasi matematika sederhana disana.</p>\n<p>Beberapa hal yang perlu diketahui tentang String di Redis:</p>\n<ol>\n<li>String digunakan untuk menampung teks.</li>\n<li>Bilangan bulat atau bilangan desimal.</li>\n<li>Data biner.</li>\n<li>Maksimum daya tampung teksnya sebesar 512MB.</li>\n</ol>\n<p>Dibawah ini adalah contoh penggunaan string pada Redis (pahami sendiri):</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">SET mystr 123</span>\n<span style=\"color: #24292EFF\">GET mystr</span>\n<span style=\"color: #22863A\">\"123\"</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6A737D\"># walaupun diatas kita menulis tanpa kutip, dia akan menjadi string di Redis</span>\n\n<span style=\"color: #24292EFF\">DECRBY mystr 1 </span><span style=\"color: #6A737D\"># kurangi mystr 1</span>\n<span style=\"color: #24292EFF\">GET mystr</span>\n<span style=\"color: #22863A\">\"122\"</span>\n\n<span style=\"color: #24292EFF\">INCRBY mystr 10 </span><span style=\"color: #6A737D\"># tambah mystr 10</span>\n<span style=\"color: #24292EFF\">GET mystr</span>\n<span style=\"color: #22863A\">\"132\"</span>\n\n<span style=\"color: #24292EFF\">SET mystr </span><span style=\"color: #22863A\">\"foo\"</span>\n<span style=\"color: #24292EFF\">GET mystr</span>\n<span style=\"color: #22863A\">\"foo\"</span>\n<span style=\"color: #24292EFF\">INCRBY mystr 10</span>\n<span style=\"color: #24292EFF\">(error) ERR value is not an integer or out of range</span>\n\n<span style=\"color: #6A737D\"># mengecek encoding dari string</span>\n<span style=\"color: #24292EFF\">object encoding mystr</span>\n<span style=\"color: #22863A\">\"embstr\"</span>\n\n<span style=\"color: #24292EFF\">SET mystr 10</span>\n<span style=\"color: #24292EFF\">object encoding mystr</span>\n<span style=\"color: #22863A\">\"int\"</span>\n\n<span style=\"color: #24292EFF\">SET mystr 1.25</span>\n<span style=\"color: #24292EFF\">object encoding mystr</span>\n<span style=\"color: #22863A\">\"embstr\"</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6A737D\"># angka desimal dianggap string</span></code></pre>\n<h4 id=\"3-hashes\"><a href=\"#3-hashes\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. Hashes</h4>\n<p>Hash adalah tipe data yang dapat menampung beberapa nilai sekaligus.\nPada bahasa pemrograman lain mungkin kamu mengenalnya dengan sebutan HashMap (Java), JSON, array assoc (PHP), dsb.</p>\n<p>Hash pada Redis biasanya digunakan untuk rate limiting atau session cache.</p>\n<p>Hash pada Redis memiliki sifat sebagai berikut:</p>\n<ol>\n<li>Single Level. Tidak seperti JSON yang dapat digunakan untuk menampung nilai sedalam apapun, Hash pada Redis hanya dapat memiliki single level saja.</li>\n<li>Dapat digunakan perintah ke setiap field seperti <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">INCRBY</code>.</li>\n<li>Kita dapat menghapus atau menambahkan field kedalam Hash.</li>\n<li>Hash dirancang khusus seefisien mungkin oleh Redis sehingga kamu tidak perlu khawatir kalau mau simpan Hash dengan field yang bejibun.</li>\n</ol>\n<p>Untuk menyimpan hash, perintah yang digunakan adalah <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">HSET</code>. Contoh untuk menyimpan JSON sebagai berikut:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">{</span>\n<span style=\"color: #24292EFF\">    </span><span style=\"color: #D32F2F\">\"name\"</span><span style=\"color: #24292EFF\">: </span><span style=\"color: #22863A\">\"Muhammad Syifa\"</span><span style=\"color: #24292EFF\">,</span>\n<span style=\"color: #24292EFF\">    </span><span style=\"color: #D32F2F\">\"email\"</span><span style=\"color: #24292EFF\">: </span><span style=\"color: #22863A\">\"emsifa@gmail.com\"</span>\n<span style=\"color: #24292EFF\">}</span></code></pre>\n<p>Perintah <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">HSET</code> yang digunakan adalah sebagai berikut:</p>\n<code class=\"shiki\" style=\"background: #2e3440; color: #d8dee9\">HSET user name &quot;Muhammad Syifa&quot; email &quot;emsifa@gmail.com&quot;</code>\n<p>Dan berikut adalah perintah-perintah hash yang dapat digunakan (pahami sendiri).</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">HSET user name </span><span style=\"color: #22863A\">\"Muhammad Syifa\"</span><span style=\"color: #24292EFF\"> email </span><span style=\"color: #22863A\">\"emsifa@gmail.com\"</span>\n<span style=\"color: #24292EFF\">(2) </span><span style=\"color: #6A737D\"># 2 artinya kita menyimpan 2 field</span>\n<span style=\"color: #24292EFF\">HEXISTS user name</span>\n<span style=\"color: #24292EFF\">(1) </span><span style=\"color: #6A737D\"># artinya ada</span>\n<span style=\"color: #24292EFF\">HEXISTS user phone</span>\n<span style=\"color: #24292EFF\">(0) </span><span style=\"color: #6A737D\"># artinya ga ada</span>\n\n<span style=\"color: #24292EFF\">HGET user name</span>\n<span style=\"color: #22863A\">\"Muhammad Syifa\"</span>\n<span style=\"color: #24292EFF\">HGET user phone</span>\n<span style=\"color: #24292EFF\">(nil)</span>\n\n<span style=\"color: #24292EFF\">HGETALL user</span>\n<span style=\"color: #24292EFF\">1) </span><span style=\"color: #22863A\">\"name\"</span>\n<span style=\"color: #24292EFF\">2) </span><span style=\"color: #22863A\">\"Muhammad Syifa\"</span>\n<span style=\"color: #24292EFF\">3) </span><span style=\"color: #22863A\">\"email\"</span>\n<span style=\"color: #24292EFF\">4) </span><span style=\"color: #22863A\">\"emsifa@gmail.com\"</span>\n\n<span style=\"color: #24292EFF\">HDEL user name</span>\n<span style=\"color: #24292EFF\">HGET user name</span>\n<span style=\"color: #24292EFF\">(nil)</span>\n\n<span style=\"color: #24292EFF\">HSET user age 18</span>\n<span style=\"color: #24292EFF\">HINCRBY user age 1</span>\n<span style=\"color: #24292EFF\">HGET user age</span>\n<span style=\"color: #22863A\">\"19\"</span>\n\n<span style=\"color: #24292EFF\">HSETNX user email </span><span style=\"color: #22863A\">\"foobar@mail.com\"</span>\n<span style=\"color: #24292EFF\">(nil)</span>\n<span style=\"color: #24292EFF\">HGET user email </span><span style=\"color: #22863A\">\"emsifa@gmail.com\"</span></code></pre>\n<h4 id=\"4-lists\"><a href=\"#4-lists\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. Lists</h4>\n<p>List pada Redis adalah tipe data yang berisi <strong>sekumpulan string yang berurutan</strong>. Pada bahasa pemrograman lain kamu mengenalnya sebagai array.</p>\n<p>Berikut ini poin-poin penting dari tipe data list pada Redis:</p>\n<ol>\n<li>List berisi sekumpulan string yang berurutan.</li>\n<li>Nilai setiap item di list boleh sama.</li>\n<li>Item dapat ditambahkan di awal dan di akhir dari list.</li>\n<li>List umumnya diterapkan untuk stacks (tumpukan) atau queues (antrian).</li>\n<li>List tidak dapat nested.</li>\n<li>Diimplementasikan menggunakan linked list.</li>\n</ol>\n<p>Berikut contoh-contoh penerapan list pada Redis (pahami sendiri):</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #6A737D\"># set/add item to list</span>\n<span style=\"color: #24292EFF\">LPUSH mylist 1 2 3 4 5</span>\n<span style=\"color: #6A737D\"># get all items in list</span>\n<span style=\"color: #24292EFF\">LRANGE mylist 0 -1</span>\n<span style=\"color: #24292EFF\">1) </span><span style=\"color: #22863A\">\"5\"</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6A737D\"># &lt;&lt; LEFT (HEAD)</span>\n<span style=\"color: #24292EFF\">2) </span><span style=\"color: #22863A\">\"4\"</span>\n<span style=\"color: #24292EFF\">3) </span><span style=\"color: #22863A\">\"3\"</span>\n<span style=\"color: #24292EFF\">4) </span><span style=\"color: #22863A\">\"2\"</span>\n<span style=\"color: #24292EFF\">5) </span><span style=\"color: #22863A\">\"1\"</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6A737D\"># &lt;&lt; RIGHT (TAIL)</span>\n<span style=\"color: #6A737D\"># urutan menurun karena yang digunakan adalah LPUSH (LEFT PUSH)</span>\n\n<span style=\"color: #6A737D\"># get items count in list</span>\n<span style=\"color: #24292EFF\">LLEN mylist</span>\n<span style=\"color: #24292EFF\">(integer) 5</span>\n\n<span style=\"color: #6A737D\"># get first 3 items in list</span>\n<span style=\"color: #24292EFF\">LRANGE mylist 0 2</span>\n<span style=\"color: #24292EFF\">1) </span><span style=\"color: #22863A\">\"5\"</span>\n<span style=\"color: #24292EFF\">2) </span><span style=\"color: #22863A\">\"4\"</span>\n<span style=\"color: #24292EFF\">3) </span><span style=\"color: #22863A\">\"3\"</span>\n\n<span style=\"color: #6A737D\"># get last 3 items in list</span>\n<span style=\"color: #24292EFF\">LRANGE mylist -3 -1</span>\n<span style=\"color: #24292EFF\">1) </span><span style=\"color: #22863A\">\"3\"</span>\n<span style=\"color: #24292EFF\">2) </span><span style=\"color: #22863A\">\"2\"</span>\n<span style=\"color: #24292EFF\">3) </span><span style=\"color: #22863A\">\"1\"</span>\n\n<span style=\"color: #24292EFF\">RPUSH mylist foo bar baz</span>\n<span style=\"color: #24292EFF\">LRANGE mylist 0 -1</span>\n<span style=\"color: #24292EFF\">1) </span><span style=\"color: #22863A\">\"5\"</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6A737D\"># &lt;&lt; LEFT (HEAD)</span>\n<span style=\"color: #24292EFF\">2) </span><span style=\"color: #22863A\">\"4\"</span>\n<span style=\"color: #24292EFF\">3) </span><span style=\"color: #22863A\">\"3\"</span>\n<span style=\"color: #24292EFF\">4) </span><span style=\"color: #22863A\">\"2\"</span>\n<span style=\"color: #24292EFF\">5) </span><span style=\"color: #22863A\">\"1\"</span>\n<span style=\"color: #24292EFF\">6) </span><span style=\"color: #22863A\">\"foo\"</span>\n<span style=\"color: #24292EFF\">7) </span><span style=\"color: #22863A\">\"bar\"</span>\n<span style=\"color: #24292EFF\">8) </span><span style=\"color: #22863A\">\"baz\"</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6A737D\"># &lt;&lt; RIGHT (TAIL)</span>\n\n<span style=\"color: #24292EFF\">LPOP mylist</span>\n<span style=\"color: #22863A\">\"5\"</span>\n<span style=\"color: #24292EFF\">RPOP mylist</span>\n<span style=\"color: #22863A\">\"baz\"</span>\n\n<span style=\"color: #24292EFF\">LRANGE mylist 0 -1</span>\n<span style=\"color: #24292EFF\">1) </span><span style=\"color: #22863A\">\"4\"</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6A737D\"># &lt;&lt; HEAD</span>\n<span style=\"color: #24292EFF\">2) </span><span style=\"color: #22863A\">\"3\"</span>\n<span style=\"color: #24292EFF\">3) </span><span style=\"color: #22863A\">\"2\"</span>\n<span style=\"color: #24292EFF\">4) </span><span style=\"color: #22863A\">\"1\"</span>\n<span style=\"color: #24292EFF\">5) </span><span style=\"color: #22863A\">\"foo\"</span>\n<span style=\"color: #24292EFF\">6) </span><span style=\"color: #22863A\">\"bar\"</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6A737D\"># &lt;&lt; TAIL</span></code></pre>\n<p>Dokumentasi selengkapnya tentang list dapat dilihat <a href=\"https://redis.io/commands#list\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">disini</a>.</p>\n<h4 id=\"5-sets\"><a href=\"#5-sets\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>5. Sets</h4>\n<p>Set adalah tipe data yang berisi sekumpulan string <strong>unik</strong> yang <strong>tidak berurutan</strong>. </p>\n<p>Poin-poin pada tipe data Set antara lain:</p>\n<ol>\n<li>Set berisi kumpulan string unik, tidak seperti list yang boleh sama.</li>\n<li>Set tidak berurutan, lagi-lagi tidak seperti list.</li>\n<li>Set dapat diterapkan operasi untuk mencari perbedaan (difference), persamaan (intersect), atau gabungan (union) dari 2 buah set atau lebih.</li>\n<li>Set tidak nested.</li>\n<li>Tipe data set cocok digunakan untuk tag cloud, unique visitor, dsb.</li>\n</ol>\n<p>Dibawah ini adalah beberapa operasi set yang penting untuk diketahui:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #6A737D\"># set sebuah 'set' *hah?</span>\n<span style=\"color: #24292EFF\">SADD cities jakarta bandung bandung</span>\n<span style=\"color: #24292EFF\">(2) </span><span style=\"color: #6A737D\"># walaupun set 3, yang tersimpan cuma 2 karena bandung duplikat</span>\n<span style=\"color: #24292EFF\">SMEMBERS cities</span>\n<span style=\"color: #24292EFF\">1) </span><span style=\"color: #22863A\">\"jakarta\"</span>\n<span style=\"color: #24292EFF\">2) </span><span style=\"color: #22863A\">\"bandung\"</span>\n\n<span style=\"color: #6A737D\"># mengecek string ada/tidak didalam sebuah set</span>\n<span style=\"color: #24292EFF\">SISMEMBER cities jakarta</span>\n<span style=\"color: #24292EFF\">(1) </span><span style=\"color: #6A737D\"># ada</span>\n<span style=\"color: #24292EFF\">SISMEMBER cities hulululu</span>\n<span style=\"color: #24292EFF\">(0) </span><span style=\"color: #6A737D\"># tidak ada</span>\n\n<span style=\"color: #6A737D\"># nambahin item baru kedalam set</span>\n<span style=\"color: #24292EFF\">SADD cities jogja</span>\n<span style=\"color: #24292EFF\">(1) </span><span style=\"color: #6A737D\"># 1 item ditambahkan</span>\n<span style=\"color: #24292EFF\">SMEMBERS cities</span>\n<span style=\"color: #24292EFF\">1) </span><span style=\"color: #22863A\">\"jakarta\"</span>\n<span style=\"color: #24292EFF\">2) </span><span style=\"color: #22863A\">\"bandung\"</span>\n<span style=\"color: #24292EFF\">3) </span><span style=\"color: #22863A\">\"jogja\"</span>\n\n<span style=\"color: #24292EFF\">SREM cities jogja</span>\n<span style=\"color: #24292EFF\">(1) </span><span style=\"color: #6A737D\"># 1 item terhapus</span>\n<span style=\"color: #24292EFF\">SMEMBERS cities</span>\n<span style=\"color: #24292EFF\">1) </span><span style=\"color: #22863A\">\"jakarta\"</span>\n<span style=\"color: #24292EFF\">2) </span><span style=\"color: #22863A\">\"bandung\"</span>\n\n<span style=\"color: #6A737D\"># hapus random item dari set</span>\n<span style=\"color: #24292EFF\">SPOP cities</span>\n<span style=\"color: #24292EFF\">SMEMBERS cities</span>\n<span style=\"color: #24292EFF\">1) </span><span style=\"color: #22863A\">\"bandung\"</span>\n\n<span style=\"color: #6A737D\"># UNION, INTERSECT, DIFF</span>\n\n<span style=\"color: #24292EFF\">SADD myset1 a b c d e</span>\n<span style=\"color: #24292EFF\">SADD myset2 c d e f g</span>\n\n<span style=\"color: #24292EFF\">SDIFF myset1 myset2</span>\n<span style=\"color: #24292EFF\">1) </span><span style=\"color: #22863A\">\"b\"</span>\n<span style=\"color: #24292EFF\">2) </span><span style=\"color: #22863A\">\"a\"</span>\n\n<span style=\"color: #24292EFF\">SDIFF myset2 myset1</span>\n<span style=\"color: #24292EFF\">1) </span><span style=\"color: #22863A\">\"g\"</span>\n<span style=\"color: #24292EFF\">2) </span><span style=\"color: #22863A\">\"f\"</span>\n\n<span style=\"color: #24292EFF\">SINTER myset1 myset2</span>\n<span style=\"color: #24292EFF\">1) </span><span style=\"color: #22863A\">\"e\"</span>\n<span style=\"color: #24292EFF\">2) </span><span style=\"color: #22863A\">\"d\"</span>\n<span style=\"color: #24292EFF\">3) </span><span style=\"color: #22863A\">\"c\"</span>\n\n<span style=\"color: #24292EFF\">SINTER myset2 myset1 </span><span style=\"color: #6A737D\"># sama aja</span>\n<span style=\"color: #24292EFF\">1) </span><span style=\"color: #22863A\">\"e\"</span>\n<span style=\"color: #24292EFF\">2) </span><span style=\"color: #22863A\">\"d\"</span>\n<span style=\"color: #24292EFF\">3) </span><span style=\"color: #22863A\">\"c\"</span>\n\n<span style=\"color: #24292EFF\">SUNION myset1 myset2</span>\n<span style=\"color: #24292EFF\">1) </span><span style=\"color: #22863A\">\"a\"</span>\n<span style=\"color: #24292EFF\">2) </span><span style=\"color: #22863A\">\"b\"</span>\n<span style=\"color: #24292EFF\">3) </span><span style=\"color: #22863A\">\"c\"</span>\n<span style=\"color: #24292EFF\">4) </span><span style=\"color: #22863A\">\"d\"</span>\n<span style=\"color: #24292EFF\">5) </span><span style=\"color: #22863A\">\"e\"</span>\n<span style=\"color: #24292EFF\">6) </span><span style=\"color: #22863A\">\"f\"</span>\n<span style=\"color: #24292EFF\">7) </span><span style=\"color: #22863A\">\"g\"</span></code></pre>\n<h4 id=\"6-sorted-sets\"><a href=\"#6-sorted-sets\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>6. Sorted Sets</h4>\n<p>Sorted Set ini seperti set, berisi berisi sekumpulan string yang unik. Hanya saja dia berurutan. Bedanya dengan list, adalah pada sorted set kita mendefinisikan skor pada masing-masing item.</p>\n<p>Berikut adalah perintah-perintah yang penting diketahui untuk sorted set.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #6A737D\"># set 'sorted set'</span>\n<span style=\"color: #24292EFF\">ZADD tinggibadan 160 </span><span style=\"color: #22863A\">\"A\"</span><span style=\"color: #24292EFF\"> 155 </span><span style=\"color: #22863A\">\"B\"</span>\n<span style=\"color: #6A737D\"># get all items in sorted set (ascending)</span>\n<span style=\"color: #24292EFF\">ZRANGE tinggibadan 0 -1</span>\n<span style=\"color: #24292EFF\">1) </span><span style=\"color: #22863A\">\"B\"</span>\n<span style=\"color: #24292EFF\">2) </span><span style=\"color: #22863A\">\"A\"</span>\n<span style=\"color: #6A737D\"># get all items in sorted set (descending)</span>\n<span style=\"color: #24292EFF\">ZREVRANGE tinggibadan 0 -1</span>\n<span style=\"color: #24292EFF\">1) </span><span style=\"color: #22863A\">\"A\"</span>\n<span style=\"color: #24292EFF\">2) </span><span style=\"color: #22863A\">\"B\"</span>\n\n<span style=\"color: #6A737D\"># get all items in sorted set including their scores</span>\n<span style=\"color: #24292EFF\">ZRANGE tinggibadan 0 -1 WITHSCORES</span>\n<span style=\"color: #24292EFF\">1) </span><span style=\"color: #22863A\">\"B\"</span>\n<span style=\"color: #24292EFF\">2) </span><span style=\"color: #22863A\">\"155\"</span>\n<span style=\"color: #24292EFF\">3) </span><span style=\"color: #22863A\">\"A\"</span>\n<span style=\"color: #24292EFF\">4) </span><span style=\"color: #22863A\">\"160\"</span>\n\n<span style=\"color: #6A737D\"># get score from an item</span>\n<span style=\"color: #24292EFF\">ZSCORE tinggibadan </span><span style=\"color: #22863A\">\"A\"</span>\n<span style=\"color: #22863A\">\"160\"</span>\n<span style=\"color: #24292EFF\">ZSCORE tinggibadan </span><span style=\"color: #22863A\">\"Z\"</span>\n<span style=\"color: #24292EFF\">(nil)</span>\n\n<span style=\"color: #6A737D\"># get index from an item</span>\n<span style=\"color: #24292EFF\">ZRANK tinggibadan A</span>\n<span style=\"color: #24292EFF\">(1) </span><span style=\"color: #6A737D\"># index ke-2</span>\n<span style=\"color: #24292EFF\">ZRANK tinggibadan B</span>\n<span style=\"color: #24292EFF\">(0) </span><span style=\"color: #6A737D\"># index pertama</span>\n\n<span style=\"color: #6A737D\"># get count from score range</span>\n<span style=\"color: #24292EFF\">ZSCORE tinggibadan 160 170</span>\n<span style=\"color: #24292EFF\">(1) </span><span style=\"color: #6A737D\"># si A</span>\n\n<span style=\"color: #6A737D\"># get items by score range</span>\n<span style=\"color: #24292EFF\">ZRANGEBYSCORE tinggibadan 160 170</span>\n<span style=\"color: #24292EFF\">1) </span><span style=\"color: #22863A\">\"A\"</span></code></pre>\n<p>Dokumentasi selengkapnya tentang sorted set bisa dilihat <a href=\"https://redis.io/commands#sorted_set\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">disini</a>.</p>\n<hr>\n<p>Ya, kurang lebih seperti itulah yang saya pelajari pada minggu pertama di kelas RU101 ini.\nUntuk catatan kelas lain dan minggu selanjutnya akan saya bahas juga pada tulisan lain. </p>\n","excerpt":"","description":"Catatan kelas Redis University RU101 minggu pertama","path":"/redis-university-ru101-minggu-pertama","cover":"/images/posts/ru101-w1-cover.png","tags":[{"id":"Redis University","title":"Redis University","path":"/tag/Redis%20University"},{"id":"Course","title":"Course","path":"/tag/Course"},{"id":"RU101","title":"RU101","path":"/tag/RU101"}],"author":{"id":"Muhammad Syifa","title":"Muhammad Syifa","path":"/author/Muhammad%20Syifa"}}}]}},"context":{}}