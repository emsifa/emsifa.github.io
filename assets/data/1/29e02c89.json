{"data":{"author":{"id":"Muhammad Syifa","title":"Muhammad Syifa","path":"/author/Muhammad%20Syifa","belongsTo":{"totalCount":7,"pageInfo":{"totalPages":2,"currentPage":1},"edges":[{"node":{"id":"821c2e8957c9f9558e8a4bf1e2c0c961","title":"Redis University RU201 - Minggu Ke-2","datetime":"2019-08-20 10:00:00","path":"/redis-university-ru201-minggu-ke-2","content":"<p>Ini adalah catatan minggu ke-2 dari apa yang saya pelajari di kelas RU201-nya <a href=\"https://university.redislabs.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Redis University</a> yang berjudul <strong>\"RediSearch\"</strong>.</p>\n<p>Pada minggu ke-2 topik pembahasannya adalah seputar penggunaan query pada RediSearch.</p>\n<p>Bingung juga mau nyatetnya gimana, langsung ke contoh querynya ajalah ya.\nBtw query <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">SELECT</code> yang saya tulis pada komentar dibawah itu bukan SQL beneran, semacam <em>pseudo-code</em> SQL aja.</p>\n<pre class=\"shiki\" style=\"background-color: #2e3440\"><code><span style=\"color: #4C566A\"># Membuat index articles, ini sama kayak buat table di RDBMS</span>\n<span style=\"color: #D8DEE9FF\">FT.CREATE articles SCHEMA title TEXT WEIGHT 5.0 body TEXT author_name TEXT</span>\n\n<span style=\"color: #4C566A\"># Menambahkan artikel ke index articles, ini sama kayak insert data ke table</span>\n<span style=\"color: #4C566A\"># Syntax: FT.ADD index_name id score FIELDS field value [{field} {value}...]</span>\n<span style=\"color: #D8DEE9FF\">FT.ADD articles articles 123 0.5 FIELDS title </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">Lorem Ipsum</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> body </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">Lorem ipsum dolor sit amet</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> author_name </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">John Doe</span><span style=\"color: #ECEFF4\">\"</span>\n\n<span style=\"color: #4C566A\"># SELECT * FROM articles WHERE somehow match \"lorem\"</span>\n<span style=\"color: #D8DEE9FF\">FT.SEARCH articles </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">lorem</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> LIMIT 0 10</span>\n<span style=\"color: #D8DEE9FF\">1) </span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9FF\">integer</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #D8DEE9FF\"> 1  </span><span style=\"color: #4C566A\"># count</span>\n<span style=\"color: #D8DEE9FF\">2) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">123</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #4C566A\"># ID</span>\n<span style=\"color: #D8DEE9FF\">3) 1) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">title</span><span style=\"color: #ECEFF4\">\"</span>\n<span style=\"color: #D8DEE9FF\">   2) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">Lorem Ipsum</span><span style=\"color: #ECEFF4\">\"</span>\n<span style=\"color: #D8DEE9FF\">   3) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">body</span><span style=\"color: #ECEFF4\">\"</span>\n<span style=\"color: #D8DEE9FF\">   4) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">Lorem ipsum dolor sit amet</span><span style=\"color: #ECEFF4\">\"</span>\n<span style=\"color: #D8DEE9FF\">   5) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">author_name</span><span style=\"color: #ECEFF4\">\"</span>\n<span style=\"color: #D8DEE9FF\">   6) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">John Doe</span><span style=\"color: #ECEFF4\">\"</span>\n\n<span style=\"color: #4C566A\"># SELECT * FROM articles WHERE somehow match \"lorem\" OR \"ipsum\"</span>\n<span style=\"color: #D8DEE9FF\">FT.SEARCH articles </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">lorem|ipsum</span><span style=\"color: #ECEFF4\">\"</span>\n\n<span style=\"color: #4C566A\"># SELECT * FROM articles WHERE somehow match \"lorem\" AND \"ipsum\"</span>\n<span style=\"color: #D8DEE9FF\">FT.SEARCH articles </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">lorem ipsum</span><span style=\"color: #ECEFF4\">\"</span>\n\n<span style=\"color: #4C566A\"># SELECT * FROM articles WHERE somehow match \"lorem ipsum\"</span>\n<span style=\"color: #D8DEE9FF\">FT.SEARCH articles </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #EBCB8B\">\\\"</span><span style=\"color: #A3BE8C\">lorem ipsum</span><span style=\"color: #EBCB8B\">\\\"</span><span style=\"color: #ECEFF4\">\"</span>\n\n<span style=\"color: #4C566A\"># SELECT * FROM articles WHERE somehow match \"lorem\" AND not contains \"ipsum\"</span>\n<span style=\"color: #D8DEE9FF\">FT.SEARCH articles </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">lorem -ipsum</span><span style=\"color: #ECEFF4\">\"</span>\n\n<span style=\"color: #4C566A\"># SELECT * FROM articles WHERE somehow match \"lorem\" OR not contains \"ipsum\"</span>\n<span style=\"color: #D8DEE9FF\">FT.SEARCH articles </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">lorem|-ipsum</span><span style=\"color: #ECEFF4\">\"</span>\n\n<span style=\"color: #4C566A\"># SELECT * FROM articles WHERE anyfields LIKE \"lorem%\"</span>\n<span style=\"color: #D8DEE9FF\">FT.SEARCH articles </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">lorem*</span><span style=\"color: #ECEFF4\">\"</span>\n\n<span style=\"color: #4C566A\"># SELECT * FROM articles WHERE levehnstein(index) sounds like \"lorem\"</span>\n<span style=\"color: #D8DEE9FF\">FT.SEARCH articles </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">%lorem%</span><span style=\"color: #ECEFF4\">\"</span>\n\n<span style=\"color: #4C566A\"># SELECT * FROM articles WHERE (somehow match \"lorem\" AND \"ipsum\") OR somehow match \"foo\"</span>\n<span style=\"color: #D8DEE9FF\">FT.SEARCH articles </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">(lorem ipsum)|foo</span><span style=\"color: #ECEFF4\">\"</span>\n\n<span style=\"color: #4C566A\"># SELECT * FROM articles WHERE (somehow match \"lorem\" AND \"ipsum\") OR (somehow match \"foo\" AND \"bar\")</span>\n<span style=\"color: #D8DEE9FF\">FT.SEARCH articles </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">(lorem ipsum)|(foo bar)</span><span style=\"color: #ECEFF4\">\"</span>\n\n<span style=\"color: #4C566A\"># SELECT * FROM articles WHERE (somehow match \"lorem\" AND \"ipsum\") OR not contains \"foo\"</span>\n<span style=\"color: #D8DEE9FF\">FT.SEARCH articles </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">(lorem ipsum)|-foo</span><span style=\"color: #ECEFF4\">\"</span></code></pre>\n<p>Dokumentasi selengkapnya tentang <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">FT.CREATE</code>, <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">FT.ADD</code>, dan <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">FT.SEARCH</code> bisa dilihat pada link dibawah ini:</p>\n<ul>\n<li><a href=\"https://oss.redislabs.com/redisearch/Commands/#ftcreate\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FT.CREATE</a></li>\n<li><a href=\"https://oss.redislabs.com/redisearch/Commands/#ftadd\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FT.ADD</a></li>\n<li><a href=\"https://oss.redislabs.com/redisearch/Commands/#ftsearch\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FT.SEARCH</a></li>\n</ul>\n<p>Selanjutnya adalah memahami hasi dari <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">FT.EXPLAIN</code>. Buat kamu yang terbiasa dengan RDBMS mungkin sudah familiar dengan perintah <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">explain</code>, ya perintah ini digunakan untuk menjabarkan query. Di RediSearch sendiri <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">FT.EXPLAIN</code> ini digunakan untuk menjabarkan query pencarian (<code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">FT.SEARCH</code>).</p>\n<p>Berikut adalah contoh penggunaan <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">FT.EXPLAIN</code> beserta penjelasannya.</p>\n<pre class=\"shiki\" style=\"background-color: #2e3440\"><code><span style=\"color: #D8DEE9FF\">FT.EXPLAIN articles </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">lorem ipsum</span><span style=\"color: #ECEFF4\">\"</span>\n<span style=\"color: #D8DEE9FF\">INTERSECT </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">  UNION </span><span style=\"color: #ECEFF4\">{</span><span style=\"color: #D8DEE9FF\"> </span>\n<span style=\"color: #D8DEE9FF\">    lorem</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">&lt;</span><span style=\"color: #D8DEE9FF\">LRM</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9FF\">expanded</span><span style=\"color: #ECEFF4\">)</span>\n<span style=\"color: #D8DEE9FF\">    +lorem</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9FF\">expanded</span><span style=\"color: #ECEFF4\">)</span>\n<span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #ECEFF4\">}</span>\n<span style=\"color: #D8DEE9FF\">  UNION </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">    ipsum</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">&lt;</span><span style=\"color: #D8DEE9FF\">APSM</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9FF\">expanded</span><span style=\"color: #ECEFF4\">)</span>\n<span style=\"color: #D8DEE9FF\">    +ipsum</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9FF\">expanded</span><span style=\"color: #ECEFF4\">)</span>\n<span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #ECEFF4\">}</span>\n<span style=\"color: #ECEFF4\">}</span></code></pre>\n<p>Haduh, gimana jelasinnya ya. Mesti pakai gambar ini. Nanti deh saya buatin.\nSementara silahkan bandingin sendiri aja sama hasil explain dibawah ini:</p>\n<pre class=\"shiki\" style=\"background-color: #2e3440\"><code><span style=\"color: #D8DEE9FF\">FT.EXPLAIN articles </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">lorem</span><span style=\"color: #ECEFF4\">\"</span>\n<span style=\"color: #D8DEE9FF\">UNION </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">  lorem</span>\n<span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #81A1C1\">&lt;</span><span style=\"color: #D8DEE9FF\">LRM</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9FF\">expanded</span><span style=\"color: #ECEFF4\">)</span>\n<span style=\"color: #D8DEE9FF\">  +lorem</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9FF\">expanded</span><span style=\"color: #ECEFF4\">)</span>\n<span style=\"color: #ECEFF4\">}</span>\n\n<span style=\"color: #D8DEE9FF\">FT.EXPLAIN articles </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">lorem|ipsum</span><span style=\"color: #ECEFF4\">\"</span>\n<span style=\"color: #D8DEE9FF\">UNION </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">  UNION </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">    lorem</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">&lt;</span><span style=\"color: #D8DEE9FF\">LRM</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9FF\">expanded</span><span style=\"color: #ECEFF4\">)</span>\n<span style=\"color: #D8DEE9FF\">    +lorem</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9FF\">expanded</span><span style=\"color: #ECEFF4\">)</span>\n<span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #ECEFF4\">}</span>\n<span style=\"color: #D8DEE9FF\">  UNION </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">    ipsum</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">&lt;</span><span style=\"color: #D8DEE9FF\">APSM</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9FF\">expanded</span><span style=\"color: #ECEFF4\">)</span>\n<span style=\"color: #D8DEE9FF\">    +ipsum</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9FF\">expanded</span><span style=\"color: #ECEFF4\">)</span>\n<span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #ECEFF4\">}</span>\n<span style=\"color: #ECEFF4\">}</span>\n\n<span style=\"color: #D8DEE9FF\">FT.EXPLAIN articles </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #EBCB8B\">\\\"</span><span style=\"color: #A3BE8C\">lorem</span><span style=\"color: #EBCB8B\">\\\"</span><span style=\"color: #ECEFF4\">\"</span>\n<span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">lorem</span><span style=\"color: #ECEFF4\">\"</span>\n\n<span style=\"color: #D8DEE9FF\">FT.EXPLAIN articles </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #EBCB8B\">\\\"</span><span style=\"color: #A3BE8C\">lorem</span><span style=\"color: #EBCB8B\">\\\"</span><span style=\"color: #A3BE8C\">|ipsum</span><span style=\"color: #ECEFF4\">\"</span>\n<span style=\"color: #D8DEE9FF\">UNION </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">  lorem</span>\n<span style=\"color: #D8DEE9FF\">  UNION </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">    ipsum</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">&lt;</span><span style=\"color: #D8DEE9FF\">APSM</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9FF\">expanded</span><span style=\"color: #ECEFF4\">)</span>\n<span style=\"color: #D8DEE9FF\">    +ipsum</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9FF\">expanded</span><span style=\"color: #ECEFF4\">)</span>\n<span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #ECEFF4\">}</span>\n<span style=\"color: #ECEFF4\">}</span>\n\n<span style=\"color: #D8DEE9FF\">FT.EXPLAIN articles </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #EBCB8B\">\\\"</span><span style=\"color: #A3BE8C\">lorem</span><span style=\"color: #EBCB8B\">\\\"</span><span style=\"color: #A3BE8C\"> ipsum</span><span style=\"color: #ECEFF4\">\"</span>\n<span style=\"color: #D8DEE9FF\">INTERSECT </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">  lorem</span>\n<span style=\"color: #D8DEE9FF\">  UNION </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">    ipsum</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">&lt;</span><span style=\"color: #D8DEE9FF\">APSM</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9FF\">expanded</span><span style=\"color: #ECEFF4\">)</span>\n<span style=\"color: #D8DEE9FF\">    +ipsum</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9FF\">expanded</span><span style=\"color: #ECEFF4\">)</span>\n<span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #ECEFF4\">}</span>\n<span style=\"color: #ECEFF4\">}</span>\n\n<span style=\"color: #D8DEE9FF\">FT.EXPLAIN articles </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #EBCB8B\">\\\"</span><span style=\"color: #A3BE8C\">lorem</span><span style=\"color: #EBCB8B\">\\\"</span><span style=\"color: #A3BE8C\"> -ipsum</span><span style=\"color: #ECEFF4\">\"</span>\n<span style=\"color: #D8DEE9FF\">INTERSECT </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">  lorem</span>\n<span style=\"color: #D8DEE9FF\">  NOT{</span>\n<span style=\"color: #D8DEE9FF\">    ipsum</span>\n<span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #ECEFF4\">}</span>\n<span style=\"color: #D8DEE9FF\">}</span></code></pre>\n<p>Dari beberapa hasil explain diatas, saya sih ngerti ya, soalnya sambil keinget sama penjelasan di videonya.\nCuma nanti kalau ada waktu saya coba gambarin pakai <em>venn diagram</em> deh.</p>\n<hr>\n<p>Yaudah segitu aja untuk minggu ke-2 di RU201. Saat saya nulis ini sebetulnya sudah masuk minggu ke-3, tapi mungkin saya akan nulis minggu ke-3 nanti di minggu ke-4. Jadi segitu aja catatan minggu ini, bye.</p>\n","excerpt":"","description":"Catatan kelas Redis University RU201 minggu ke-2","tags":[{"id":"Redis University","title":"Redis University","path":"/tag/Redis%20University"},{"id":"Course","title":"Course","path":"/tag/Course"},{"id":"RU201","title":"RU201","path":"/tag/RU201"}]}},{"node":{"id":"9434f7551f62142c1b60cc06f454eb56","title":"Redis University RU102J - Minggu Ke-2","datetime":"2019-08-18 09:00:00","path":"/redis-university-ru102j-minggu-ke-2","content":"<p>Ini adalah catatan minggu ke-2 saya di kelas RU102J-nya Redis University.\nJika pada minggu pertama hanya sebatas setup java environment, java redis client dan perkenalan DAO pattern,\npada minggu ini kita mulai membuat aplikasi RediSolar.</p>\n<p>Spesifiknya, minggu ini topik pembahasannya adalah:</p>\n<ol>\n<li>Pengenalan Data Model</li>\n<li>Metrics with Sorted Sets</li>\n<li>Making Lua Script</li>\n<li>Pipelining with Jedis</li>\n<li>Transactions with Jedis</li>\n</ol>\n<h2 id=\"1-pengenalan-data-model\"><a href=\"#1-pengenalan-data-model\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Pengenalan Data Model</h2>\n<p>Data model ini sebetulnya sudah sedikit disinggung pada minggu pertama pada diagram DAO.\nCuma disini dicontohkan membuat data model untuk MeterReading (meteran).</p>\n<p>Jadi untuk membuat aplikasi RediSolar ini, kita membutuhkan data model class MeterReading dengan\nproperti seperti dibawah ini:</p>\n<pre class=\"shiki\" style=\"background-color: #2e3440\"><code><span style=\"color: #81A1C1\">public</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">class</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">MeterReading</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">private</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Long</span><span style=\"color: #D8DEE9FF\"> siteId</span><span style=\"color: #81A1C1\">;</span><span style=\"color: #D8DEE9FF\">            </span><span style=\"color: #4C566A\">// ID lokasi (rumah)</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">private</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">ZonedDateTime</span><span style=\"color: #D8DEE9FF\"> dateTime</span><span style=\"color: #81A1C1\">;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\">// waktu</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">private</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Double</span><span style=\"color: #D8DEE9FF\"> whUsed</span><span style=\"color: #81A1C1\">;</span><span style=\"color: #D8DEE9FF\">          </span><span style=\"color: #4C566A\">// daya digunakan</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">private</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Double</span><span style=\"color: #D8DEE9FF\"> whGenerated</span><span style=\"color: #81A1C1\">;</span><span style=\"color: #D8DEE9FF\">     </span><span style=\"color: #4C566A\">// daya digenerate</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">private</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Double</span><span style=\"color: #D8DEE9FF\"> tempC</span><span style=\"color: #81A1C1\">;</span><span style=\"color: #D8DEE9FF\">           </span><span style=\"color: #4C566A\">// suhu dalam celcius</span>\n<span style=\"color: #ECEFF4\">}</span></code></pre>\n<h2 id=\"2-metrics-with-sorted-sets\"><a href=\"#2-metrics-with-sorted-sets\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Metrics with Sorted Sets</h2>\n<p>Kemudian untuk menyimpan metric, struktur data yang digunakan adalah sorted sets dengan\nformat key dan value seperti dibawah ini:</p>\n<p>Format key:</p>\n<pre class=\"shiki\" style=\"background-color: #2e3440\"><code><span style=\"color: #D8DEE9FF\">metrics:wHg:2020-01-01:1</span></code></pre>\n<p>Dimana:</p>\n<ul>\n<li><code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">metrics</code>: prefix</li>\n<li><code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">wHg</code>: unit (satuan)</li>\n<li><code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">2020-01-01</code>: tanggal</li>\n<li><code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">1</code>: site ID</li>\n</ul>\n<p>Sedangkan untuk struktur sorted setnya adalah sebagai berikut:</p>\n<ul>\n<li>score: menit</li>\n<li>value: nilai:menit</li>\n</ul>\n<p>Contoh, perintah <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">ZADD</code> dibawah ini maksudnya adalah:</p>\n<pre class=\"shiki\" style=\"background-color: #2e3440\"><code><span style=\"color: #D8DEE9FF\">ZADD metrics:wHg:2020-01-01:1 30 18.5:30</span></code></pre>\n<ul>\n<li>Unit: wHg (watt hours generated)</li>\n<li>Tanggal: 2020-01-01</li>\n<li>Site ID: 1</li>\n<li>Menit: 30</li>\n<li>Nilai: 18.5</li>\n</ul>\n<p>Struktur seperti diatas digunakan karena:</p>\n<ol>\n<li>Pengukuran (metrics) akan secara otomatis disortir.</li>\n<li>Efisien untuk di fetch: O((log n) + m).</li>\n<li>Efisien untuk insert: O(log n).</li>\n<li>Hemat memori.</li>\n</ol>\n<h2 id=\"3-making-lua-script\"><a href=\"#3-making-lua-script\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. Making Lua Script</h2>\n<p>Topik pembahasan selanjutnya adalah tentang tata cara menjalankan script Lua pada Java untuk melakukan atomic transaction di Redis. Kalau di MySQL atau RDBMS lain mungkin kalian familiar dengan istilah stored procedure, nah si Lua disini perannya seperti itu.</p>\n<p>Sebagai contoh, kita ingin membuat script untuk mengupdate sebuah key, hanya jika key belum ada, atau nilai yang baru lebih rendah dari nilainya saat ini.</p>\n<p>Pertama kita harus persiapkan class <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">UpdateIfLowerScript</code> sebagai berikut (pahami sendiri):</p>\n<pre class=\"shiki\" style=\"background-color: #2e3440\"><code><span style=\"color: #81A1C1\">public</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">class</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">UpdateIfLowerScript</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">private</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">final</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Jedis</span><span style=\"color: #D8DEE9FF\"> jedis</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">private</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">final</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">String</span><span style=\"color: #D8DEE9FF\"> sha</span><span style=\"color: #81A1C1\">;</span>\n\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">private</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">final</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">static</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">String</span><span style=\"color: #D8DEE9FF\"> script </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span>\n<span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">local key = KEYS[1]</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">+</span><span style=\"color: #D8DEE9FF\">  </span>\n<span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">local new = ARGS[1]</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">+</span><span style=\"color: #D8DEE9FF\">  </span>\n<span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">local current = redis.call('GET', key)</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">+</span><span style=\"color: #D8DEE9FF\">  </span>\n<span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">if (current == false or (tonumber(new) &lt; tonumber(current))) then</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">+</span>\n<span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">    redis.call('SET', key, new)</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">+</span><span style=\"color: #D8DEE9FF\"> </span>\n<span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">    return 1</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">+</span><span style=\"color: #D8DEE9FF\">  </span>\n<span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">else</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">+</span><span style=\"color: #D8DEE9FF\"> </span>\n<span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">    return 0</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">+</span><span style=\"color: #D8DEE9FF\"> </span>\n<span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">end</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">+</span>\n\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">public</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">UpdateIfLowerScript</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #8FBCBB\">Jedis</span><span style=\"color: #D8DEE9FF\"> jedis</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #81A1C1\">this.</span><span style=\"color: #D8DEE9FF\">jedis </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> jedis</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #81A1C1\">this.</span><span style=\"color: #D8DEE9FF\">sha </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> jedis</span><span style=\"color: #81A1C1\">.</span><span style=\"color: #88C0D0\">scriptLoad</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9FF\">script</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #ECEFF4\">}</span>\n\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">public</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">boolean</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">updateIfLower</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #8FBCBB\">String</span><span style=\"color: #D8DEE9FF\"> key</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Integer</span><span style=\"color: #D8DEE9FF\"> newValue</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #8FBCBB\">List&lt;String&gt;</span><span style=\"color: #D8DEE9FF\"> keys </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Collections</span><span style=\"color: #81A1C1\">.</span><span style=\"color: #88C0D0\">singletonList</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9FF\">key</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #8FBCBB\">List&lt;String&gt;</span><span style=\"color: #D8DEE9FF\"> args </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Collections</span><span style=\"color: #81A1C1\">.</span><span style=\"color: #88C0D0\">singletonList</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9FF\">newValue</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #8FBCBB\">Object</span><span style=\"color: #D8DEE9FF\"> response </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> jedis</span><span style=\"color: #81A1C1\">.</span><span style=\"color: #88C0D0\">evalsha</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9FF\">sha</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> keys</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> args</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #81A1C1\">;</span>\n\n<span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #81A1C1\">return</span><span style=\"color: #D8DEE9FF\"> (</span><span style=\"color: #8FBCBB\">Long</span><span style=\"color: #D8DEE9FF\">) response </span><span style=\"color: #81A1C1\">==</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">1</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #ECEFF4\">}</span>\n<span style=\"color: #D8DEE9FF\">}</span></code></pre>\n<p>Selanjutnya, cara panggilnya ya tinggal buat aja instancenya, lalu panggil methodnya seperti dibawah ini:</p>\n<pre class=\"shiki\" style=\"background-color: #2e3440\"><code><span style=\"color: #8FBCBB\">UpdateIfLowerScript</span><span style=\"color: #D8DEE9FF\"> script </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">new</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">UpdateIfLowerScript</span><span style=\"color: #D8DEE9FF\">(jedis)</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #81A1C1\">boolean</span><span style=\"color: #D8DEE9FF\"> result </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> script</span><span style=\"color: #81A1C1\">.</span><span style=\"color: #88C0D0\">updateIfLower</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #ECEFF4\">'</span><span style=\"color: #A3BE8C\">keynya</span><span style=\"color: #ECEFF4\">'</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">100</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #81A1C1\">;</span></code></pre>\n<p>Oia katanya biasanya bakal banyak script Lua di project Java kita, jadi supaya rapih sebisa mungkin dibuat 1 script 1 class, dan disimpan dalam 1 folder yang sama.</p>\n<p>Dan kenapa nggak pakai script Java aja langsung? seperti yang disinggung diatas, script Lua ini bersifat atomic.\nYang artinya script akan membloking eksekusi dari Redis Client lain sampai script Lua ini selesai dijalankan.\nJadi tidak ada transaksi dari Redis Client lain yang terselip ditengah-tengah Lua script ini.</p>\n<h2 id=\"4-pipelining-with-jedis\"><a href=\"#4-pipelining-with-jedis\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. Pipelining with Jedis</h2>\n<p>Pembahasan selanjutnya adalah tentang penggunaan pipeline. Pada DBMS lain, istilah yang mirip-mirip dengan pipeline adalah transaction. Dengan pipeline kita bisa mengirim banyak perintah sekaligus sehingga Redis Client nggak perlu bolak-balik request-response ke Redis Server.</p>\n<p>Bayangin kamu ke warung mau beli mie instan dan saos. Jika kamu adalah Redis Client, secara default kamu akan bolak-balik, beli mie instan dulu, sampai rumah, kemudian balik lagi untuk beli saos, terus balik lagi ke rumah. Dengan pipeline, kamu (si Redis Client) akan membeli mie instan dan saos secara bersamaan. Efeknya? tentu saja mempercepat waktu eksekusi dan latency.</p>\n<p>Di Jedis sendiri, cara menggunakan pipeline adalah sebagai berikut:</p>\n<pre class=\"shiki\" style=\"background-color: #2e3440\"><code><span style=\"color: #8FBCBB\">Long</span><span style=\"color: #D8DEE9FF\"> siteId </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">1L</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #8FBCBB\">Pipeline</span><span style=\"color: #D8DEE9FF\"> p </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> jedis</span><span style=\"color: #81A1C1\">.</span><span style=\"color: #88C0D0\">pipelined</span><span style=\"color: #ECEFF4\">()</span><span style=\"color: #81A1C1\">;</span><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #4C566A\">// inisiasi pipeline</span>\n\n<span style=\"color: #8FBCBB\">Response&lt;Long&gt;</span><span style=\"color: #D8DEE9FF\"> hsetResponse </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> p</span><span style=\"color: #81A1C1\">.</span><span style=\"color: #88C0D0\">hset</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9FF\">statusKey</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">available</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">true</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #81A1C1\">;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\">// push hset command to pipeline</span>\n<span style=\"color: #8FBCBB\">Response&lt;Long&gt;</span><span style=\"color: #D8DEE9FF\"> expireResponse </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> p</span><span style=\"color: #81A1C1\">.</span><span style=\"color: #88C0D0\">expire</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9FF\">statusKey</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">1000</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #81A1C1\">;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\">// push expire command to pipeline</span>\n<span style=\"color: #8FBCBB\">Response&lt;Long&gt;</span><span style=\"color: #D8DEE9FF\"> saddResponse </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> p</span><span style=\"color: #81A1C1\">.</span><span style=\"color: #88C0D0\">sadd</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9FF\">availableKey</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">String</span><span style=\"color: #81A1C1\">.</span><span style=\"color: #88C0D0\">valueOf</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9FF\">siteId</span><span style=\"color: #ECEFF4\">))</span><span style=\"color: #81A1C1\">;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\">// push sadd command to pipeline</span>\n\n<span style=\"color: #D8DEE9FF\">p</span><span style=\"color: #81A1C1\">.</span><span style=\"color: #88C0D0\">sync</span><span style=\"color: #ECEFF4\">()</span><span style=\"color: #81A1C1\">;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\">// run pipeline to execute all commands</span>\n\n<span style=\"color: #8FBCBB\">Long</span><span style=\"color: #D8DEE9FF\"> hsetResult </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> hsetResponse</span><span style=\"color: #81A1C1\">.</span><span style=\"color: #88C0D0\">get</span><span style=\"color: #ECEFF4\">()</span><span style=\"color: #81A1C1\">;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\">// get result from p.hset</span>\n<span style=\"color: #8FBCBB\">Long</span><span style=\"color: #D8DEE9FF\"> expireResult </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> expireResponse</span><span style=\"color: #81A1C1\">.</span><span style=\"color: #88C0D0\">get</span><span style=\"color: #ECEFF4\">()</span><span style=\"color: #81A1C1\">;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\">// get result from p.expire</span>\n<span style=\"color: #8FBCBB\">Long</span><span style=\"color: #D8DEE9FF\"> saddResult </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> saddResponse</span><span style=\"color: #81A1C1\">.</span><span style=\"color: #88C0D0\">get</span><span style=\"color: #ECEFF4\">()</span><span style=\"color: #81A1C1\">;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\">// get result from p.sadd</span></code></pre>\n<p>Dengan pipeine seperti diatas, 3 perintah akan dikirim ke Redis Server secara bersamaan.\nHanya saja, sifat pipeline tidak seperti transaksi, dimana jika salah satunya gagal, Redis tidak akan merollback command sebelumnya. Dan juga saat pipeline berjalan, katakanlah kita mengirim 100 perintah, kemudian pada perintah ke 70 ada Redis Client mengirim perintah juga, maka perintah dari Redis Client lain akan berjalan ditengah-tengah pipeline.</p>\n<h2 id=\"5-transactions-with-jedis\"><a href=\"#5-transactions-with-jedis\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>5. Transactions with Jedis</h2>\n<p>Pembahasan selanjutnya adalah tentang transaction. Transaction di Redis ini mirip-mirip dengan pipeline,\nhanya saja transaction mendukung atomic transaction. Jika kita menjalankan 5 perintah menggunakan transaction,\nmaka jika ada Redis Client lain mengirim perintah ke Redis Server yang sama, maka Redis Client lain tersebut harus menunggu sampai 5 perintah kita selesai dijalankan.</p>\n<p>Contoh menerapkan transaction menggunakan Jedis:</p>\n<pre class=\"shiki\" style=\"background-color: #2e3440\"><code><span style=\"color: #8FBCBB\">Long</span><span style=\"color: #D8DEE9FF\"> siteId </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">1L</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #8FBCBB\">Transaction</span><span style=\"color: #D8DEE9FF\"> t </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> jedis</span><span style=\"color: #81A1C1\">.</span><span style=\"color: #88C0D0\">multi</span><span style=\"color: #ECEFF4\">()</span><span style=\"color: #81A1C1\">;</span><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #4C566A\">// inisiasi transaction</span>\n\n<span style=\"color: #8FBCBB\">Response&lt;Long&gt;</span><span style=\"color: #D8DEE9FF\"> hsetResponse </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> t</span><span style=\"color: #81A1C1\">.</span><span style=\"color: #88C0D0\">hset</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9FF\">statusKey</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">available</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">true</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #81A1C1\">;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\">// push hset command to transaction</span>\n<span style=\"color: #8FBCBB\">Response&lt;Long&gt;</span><span style=\"color: #D8DEE9FF\"> expireResponse </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> t</span><span style=\"color: #81A1C1\">.</span><span style=\"color: #88C0D0\">expire</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9FF\">statusKey</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">1000</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #81A1C1\">;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\">// push expire command to transaction</span>\n<span style=\"color: #8FBCBB\">Response&lt;Long&gt;</span><span style=\"color: #D8DEE9FF\"> saddResponse </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> t</span><span style=\"color: #81A1C1\">.</span><span style=\"color: #88C0D0\">sadd</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9FF\">availableKey</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">String</span><span style=\"color: #81A1C1\">.</span><span style=\"color: #88C0D0\">valueOf</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9FF\">siteId</span><span style=\"color: #ECEFF4\">))</span><span style=\"color: #81A1C1\">;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\">// push sadd command to transaction</span>\n\n<span style=\"color: #D8DEE9FF\">t</span><span style=\"color: #81A1C1\">.</span><span style=\"color: #88C0D0\">exec</span><span style=\"color: #ECEFF4\">()</span><span style=\"color: #81A1C1\">;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\">// run transaction to execute all commands</span>\n\n<span style=\"color: #8FBCBB\">Long</span><span style=\"color: #D8DEE9FF\"> hsetResult </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> hsetResponse</span><span style=\"color: #81A1C1\">.</span><span style=\"color: #88C0D0\">get</span><span style=\"color: #ECEFF4\">()</span><span style=\"color: #81A1C1\">;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\">// get result from t.hset</span>\n<span style=\"color: #8FBCBB\">Long</span><span style=\"color: #D8DEE9FF\"> expireResult </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> expireResponse</span><span style=\"color: #81A1C1\">.</span><span style=\"color: #88C0D0\">get</span><span style=\"color: #ECEFF4\">()</span><span style=\"color: #81A1C1\">;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\">// get result from t.expire</span>\n<span style=\"color: #8FBCBB\">Long</span><span style=\"color: #D8DEE9FF\"> saddResult </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> saddResponse</span><span style=\"color: #81A1C1\">.</span><span style=\"color: #88C0D0\">get</span><span style=\"color: #ECEFF4\">()</span><span style=\"color: #81A1C1\">;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\">// get result from t.sadd</span></code></pre>\n<h2 id=\"kapan-harus-menggunakan-lua-script-pipeline-dan-transaction\"><a href=\"#kapan-harus-menggunakan-lua-script-pipeline-dan-transaction\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kapan Harus Menggunakan Lua Script, Pipeline, dan Transaction?</h2>\n<ol>\n<li>Jika kamu membolehkan ada query dari client lain berjalan di tengah-tengah multiple query, gunakan Pipeline.</li>\n<li>Jika kamu tidak ingin ada query dari client lain berjalan di tengah-tengah multiple query, gunakan Transaction.</li>\n<li>Jika kamu ingin menggunakan conditional statement di tengah-tengah eksekusi multiple query, gunakan Lua Script.</li>\n</ol>\n<hr>\n<p>Begitulah topik pembahasan di kelas RU102J di minggu ke-2. Yaudah, sampai jumpa lagi di minggu selanjutnya.</p>\n","excerpt":"","description":"Catatan kelas Redis University RU102 minggu ke-2","tags":[{"id":"Redis University","title":"Redis University","path":"/tag/Redis%20University"},{"id":"Course","title":"Course","path":"/tag/Course"},{"id":"RU102J","title":"RU102J","path":"/tag/RU102J"}]}},{"node":{"id":"d617f7beedbc60b300eecbeb41392cde","title":"Redis University RU101 - Minggu Ke-2","datetime":"2019-08-17 08:00:00","path":"/redis-university-ru101-minggu-ke-2","content":"<p>Ini adalah catatan minggu ke-2 dari kelas RU101 (Introduction to Redis Data Structure) di Redis University.\nBuat yang belum tau apa itu Redis University, saya sudah bahas di catatan <a href=\"/redis-university-ru101-minggu-pertama/\">minggu pertama</a>.</p>\n<p>Pada minggu pertama yang dibahas adalah tentang data struktur apa saja yang terdapat pada Redis,\npada minggu ke-2 ini pembahasannya adalah:</p>\n<ol>\n<li>Cardinality and Capped Collections</li>\n<li>Set Operations</li>\n<li>Faceted Search</li>\n<li>Performance &#x26; Big O Notation</li>\n</ol>\n<h2 id=\"1-cardinality-and-capped-collections\"><a href=\"#1-cardinality-and-capped-collections\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Cardinality and Capped Collections</h2>\n<h4 id=\"cardinality\"><a href=\"#cardinality\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cardinality</h4>\n<p>Untuk mengecek cardinality dari data di Redis, perintah yang dapat digunakan adalah:</p>\n<ul>\n<li><code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">LLEN</code>: untuk list</li>\n<li><code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">SCARD</code>: untuk set</li>\n<li><code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">ZCARD</code>: untuk sorted set</li>\n</ul>\n<p>Contoh:</p>\n<pre class=\"shiki\" style=\"background-color: #2e3440\"><code><span style=\"color: #D8DEE9FF\">RPUSH mylist 1 2 3 4 5  </span><span style=\"color: #4C566A\"># set 5 item ke mylist</span>\n<span style=\"color: #D8DEE9FF\">LLEN mylist             </span><span style=\"color: #4C566A\"># mengambil banyak item di mylist</span>\n<span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9FF\">integer</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #D8DEE9FF\"> 5 </span>\n\n<span style=\"color: #D8DEE9FF\">SADD myset foo bar baz qux qux </span><span style=\"color: #4C566A\"># menambahkan item ke myset</span>\n<span style=\"color: #D8DEE9FF\">SCARD myset                    </span><span style=\"color: #4C566A\"># mengambil banyak item di myset</span>\n<span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9FF\">integer</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #D8DEE9FF\"> 4 </span><span style=\"color: #4C566A\"># hasilnya 4 karena set hanya menyimpan string unik, jadi qux ke2 tidak ditambahkan</span>\n\n<span style=\"color: #D8DEE9FF\">ZADD mysortedset 1 foo 2 bar 3 baz 4 qux 5 qux </span><span style=\"color: #4C566A\"># menambahkan item ke mysortedset</span>\n<span style=\"color: #D8DEE9FF\">ZCARD mysortedset                              </span><span style=\"color: #4C566A\"># mengambil banyak item di mysortedset</span>\n<span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9FF\">integer</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #D8DEE9FF\"> 4 </span><span style=\"color: #4C566A\"># hasilnya 4 karena alasan yg sama dengan set</span></code></pre>\n<h4 id=\"capped-collections\"><a href=\"#capped-collections\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Capped Collections</h4>\n<p>Capped collections adalah list/sorted set yang sebagian nilainya telah dihapus/dipotong.</p>\n<p>Ada beberapa perintah untuk memotong sebagian item didalam list dan sorted set:</p>\n<ul>\n<li><code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">LTRIM</code>: untuk <strong>mengambil</strong> item di range index tertentu pada list (sisanya dihapus).</li>\n<li><code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">ZREMRANGEBYRANK</code>: untuk <strong>menghapus</strong> item di range index tertentu pada sorted set.</li>\n</ul>\n<p>Contoh <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">LTRIM</code>:</p>\n<pre class=\"shiki\" style=\"background-color: #2e3440\"><code><span style=\"color: #D8DEE9FF\">RPUSH numbers 1 2 3 4 5 6 7 8 9 10 </span><span style=\"color: #4C566A\"># set numbers</span>\n<span style=\"color: #D8DEE9FF\">LTRIM numbers 0 -3                 </span><span style=\"color: #4C566A\"># ambil dari index 0 sampai dengan index terakhir - 3</span>\n<span style=\"color: #D8DEE9FF\">LRANGE numbers 0 -1                </span><span style=\"color: #4C566A\"># ambil semua numbers (setelah dipotong)</span>\n<span style=\"color: #D8DEE9FF\">1) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">1</span><span style=\"color: #ECEFF4\">\"</span>\n<span style=\"color: #D8DEE9FF\">2) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">2</span><span style=\"color: #ECEFF4\">\"</span>\n<span style=\"color: #D8DEE9FF\">3) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">3</span><span style=\"color: #ECEFF4\">\"</span>\n<span style=\"color: #D8DEE9FF\">4) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">4</span><span style=\"color: #ECEFF4\">\"</span>\n<span style=\"color: #D8DEE9FF\">5) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">5</span><span style=\"color: #ECEFF4\">\"</span>\n<span style=\"color: #D8DEE9FF\">6) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">6</span><span style=\"color: #ECEFF4\">\"</span>\n<span style=\"color: #D8DEE9FF\">7) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">7</span><span style=\"color: #ECEFF4\">\"</span>\n<span style=\"color: #D8DEE9FF\">8) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">8</span><span style=\"color: #ECEFF4\">\"</span>\n\n<span style=\"color: #D8DEE9FF\">LTRIM -5 -1 </span><span style=\"color: #4C566A\"># mengambil 5 item terakhir</span>\n<span style=\"color: #D8DEE9FF\">LRANGE numbers 0 -1</span>\n<span style=\"color: #D8DEE9FF\">1) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">4</span><span style=\"color: #ECEFF4\">\"</span>\n<span style=\"color: #D8DEE9FF\">2) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">5</span><span style=\"color: #ECEFF4\">\"</span>\n<span style=\"color: #D8DEE9FF\">3) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">6</span><span style=\"color: #ECEFF4\">\"</span>\n<span style=\"color: #D8DEE9FF\">4) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">7</span><span style=\"color: #ECEFF4\">\"</span>\n<span style=\"color: #D8DEE9FF\">5) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">8</span><span style=\"color: #ECEFF4\">\"</span></code></pre>\n<p>Contoh <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">ZREMRANGEBYRANK</code>:</p>\n<pre class=\"shiki\" style=\"background-color: #2e3440\"><code><span style=\"color: #D8DEE9FF\">ZADD letters 1 a 2 b 3 c 4 d 5 f 6 g 7 h  </span><span style=\"color: #4C566A\"># set letters</span>\n<span style=\"color: #D8DEE9FF\">ZREMRANGEBYRANK letters -2 -1             </span><span style=\"color: #4C566A\"># hapus 2 item terakhir</span>\n<span style=\"color: #D8DEE9FF\">ZRANGE letters 0 -1</span>\n<span style=\"color: #D8DEE9FF\">1) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">a</span><span style=\"color: #ECEFF4\">\"</span>\n<span style=\"color: #D8DEE9FF\">2) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">b</span><span style=\"color: #ECEFF4\">\"</span>\n<span style=\"color: #D8DEE9FF\">3) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">c</span><span style=\"color: #ECEFF4\">\"</span>\n<span style=\"color: #D8DEE9FF\">4) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">d</span><span style=\"color: #ECEFF4\">\"</span>\n<span style=\"color: #D8DEE9FF\">5) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">f</span><span style=\"color: #ECEFF4\">\"</span>\n\n<span style=\"color: #D8DEE9FF\">ZREMRANGEBYRANK letters 0 2 </span><span style=\"color: #4C566A\"># hapus 3 item pertama (index: 0, 1, 2)</span>\n<span style=\"color: #D8DEE9FF\">1) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">d</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\">                                                                                                             2) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">f</span><span style=\"color: #ECEFF4\">\"</span></code></pre>\n<h2 id=\"2-set-operations-with-sets-and-sorted-sets\"><a href=\"#2-set-operations-with-sets-and-sorted-sets\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Set Operations with Sets and Sorted Sets</h2>\n<p>Pada bagian ini dicontohkan cara menggunakan <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">ZINTERSTORE</code> dan <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">ZETUNIONSTORE</code> untuk menyimpan hasil <em>intersect</em> dan <em>union</em> kedalam key lain.</p>\n<p>Contoh <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">ZINTERSTORE</code>: </p>\n<pre class=\"shiki\" style=\"background-color: #2e3440\"><code><span style=\"color: #D8DEE9FF\">ZADD l1 1 a 2 b 3 c 4 d 5 f </span><span style=\"color: #4C566A\"># buat sorted set l1</span>\n<span style=\"color: #D8DEE9FF\">ZADD l2 1 a 2 b 3 e 5 x 6 z </span><span style=\"color: #4C566A\"># buat sorted set l2</span>\n\n<span style=\"color: #D8DEE9FF\">ZINTERSTORE l3 2 l1 l2      </span><span style=\"color: #4C566A\"># simpan hasil intersect l1 dan l2 kedalam l3</span>\n<span style=\"color: #D8DEE9FF\">ZRANGE l3 0 -1 WITHSCORES </span><span style=\"color: #4C566A\"># melihat semua isi l3</span>\n<span style=\"color: #D8DEE9FF\">1) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">a</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\"># nilai i(0)</span>\n<span style=\"color: #D8DEE9FF\">2) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">2</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\"># score i(0)</span>\n<span style=\"color: #D8DEE9FF\">3) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">b</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\"># nilai i(1)</span>\n<span style=\"color: #D8DEE9FF\">4) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">4</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\"># score i(1)</span></code></pre>\n<p>Sebagai catatan <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">l3 2 l1 l2</code>, <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">2</code> yang dimaksud disitu adalah banyak key yang mau di-<em>intersect</em>,\nkarena disitu yang di-<em>intersect</em> adalah <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">l1</code> dan <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">l2</code>, berarti banyak keynya adalah 2.</p>\n<p>Dokumentasi selengkapnya <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">ZINTERSTORE</code> bisa dilihat <a href=\"https://redis.io/commands/zinterstore\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">disini</a>.</p>\n<p>Contoh <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">ZUNIONSTORE</code>:</p>\n<pre class=\"shiki\" style=\"background-color: #2e3440\"><code><span style=\"color: #D8DEE9FF\">ZADD l1 1 a 2 b 3 c 4 d 5 f </span><span style=\"color: #4C566A\"># buat sorted set l1</span>\n<span style=\"color: #D8DEE9FF\">ZADD l2 1 a 2 b 3 e 5 x 6 z </span><span style=\"color: #4C566A\"># buat sorted set l2</span>\n\n<span style=\"color: #D8DEE9FF\">ZUNIONSTORE l3 2 l1 l2      </span><span style=\"color: #4C566A\"># simpan hasil union l1 dan l2 kedalam l3</span>\n<span style=\"color: #D8DEE9FF\">ZRANGE l3 0 -1 WITHSCORES </span><span style=\"color: #4C566A\"># melihat semua isi l3</span>\n<span style=\"color: #D8DEE9FF\"> 1) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">a</span><span style=\"color: #ECEFF4\">\"</span>\n<span style=\"color: #D8DEE9FF\"> 2) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">2</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\"># skor si a, jadi 2 karena skornya ditambahkan antara skor a di l1 dan skor a di l2</span>\n<span style=\"color: #D8DEE9FF\"> 3) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">c</span><span style=\"color: #ECEFF4\">\"</span>\n<span style=\"color: #D8DEE9FF\"> 4) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">3</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\"># skor si c</span>\n<span style=\"color: #D8DEE9FF\"> 5) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">e</span><span style=\"color: #ECEFF4\">\"</span>\n<span style=\"color: #D8DEE9FF\"> 6) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">3</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\"># skor si d</span>\n<span style=\"color: #D8DEE9FF\"> 7) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">b</span><span style=\"color: #ECEFF4\">\"</span>\n<span style=\"color: #D8DEE9FF\"> 8) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">4</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\"># skor si b</span>\n<span style=\"color: #D8DEE9FF\"> 9) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">d</span><span style=\"color: #ECEFF4\">\"</span>\n<span style=\"color: #D8DEE9FF\">10) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">4</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\"># skor si d</span>\n<span style=\"color: #D8DEE9FF\">11) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">f</span><span style=\"color: #ECEFF4\">\"</span>\n<span style=\"color: #D8DEE9FF\">12) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">5</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\"># skor si f</span>\n<span style=\"color: #D8DEE9FF\">13) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">x</span><span style=\"color: #ECEFF4\">\"</span>\n<span style=\"color: #D8DEE9FF\">14) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">5</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\"># skor si x</span>\n<span style=\"color: #D8DEE9FF\">15) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">z</span><span style=\"color: #ECEFF4\">\"</span>\n<span style=\"color: #D8DEE9FF\">16) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">6</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\"># skor si y</span>\n\n<span style=\"color: #D8DEE9FF\">ZUNIONSTORE l3 2 l1 l2 AGGREGATE MIN  </span><span style=\"color: #4C566A\"># simpan hasil union l1 dan l2 kedalam l3</span>\n<span style=\"color: #D8DEE9FF\">ZRANGE l3 0 -1 WITHSCORES </span><span style=\"color: #4C566A\"># melihat semua isi l3</span>\n<span style=\"color: #D8DEE9FF\"> 1) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">a</span><span style=\"color: #ECEFF4\">\"</span>\n<span style=\"color: #D8DEE9FF\"> 2) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">1</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\"># skor si a, paling kecilnya 1</span>\n<span style=\"color: #D8DEE9FF\"> 3) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">b</span><span style=\"color: #ECEFF4\">\"</span>\n<span style=\"color: #D8DEE9FF\"> 4) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">2</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\"># skor si b</span>\n<span style=\"color: #D8DEE9FF\"> 5) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">c</span><span style=\"color: #ECEFF4\">\"</span>\n<span style=\"color: #D8DEE9FF\"> 6) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">3</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\"># skor si c</span>\n<span style=\"color: #D8DEE9FF\"> 7) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">e</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> </span>\n<span style=\"color: #D8DEE9FF\"> 8) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">3</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\"># skor si e</span>\n<span style=\"color: #D8DEE9FF\"> 9) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">d</span><span style=\"color: #ECEFF4\">\"</span>\n<span style=\"color: #D8DEE9FF\">10) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">4</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\"># skor si d</span>\n<span style=\"color: #D8DEE9FF\">11) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">f</span><span style=\"color: #ECEFF4\">\"</span>\n<span style=\"color: #D8DEE9FF\">12) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">5</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\"># skor si f</span>\n<span style=\"color: #D8DEE9FF\">13) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">x</span><span style=\"color: #ECEFF4\">\"</span>\n<span style=\"color: #D8DEE9FF\">14) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">5</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\"># skor si x</span>\n<span style=\"color: #D8DEE9FF\">15) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">z</span><span style=\"color: #ECEFF4\">\"</span>\n<span style=\"color: #D8DEE9FF\">16) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">6</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\"># skor si z</span></code></pre>\n<p>Dokumentasi selengkapnya <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">ZUNIONSTORE</code> bisa dilihat <a href=\"https://redis.io/commands/zunionstore\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">disini</a>.</p>\n<h2 id=\"3-faceted-search\"><a href=\"#3-faceted-search\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. Faceted Search</h2>\n<p>Selanjutnya pembahasa menuju ke <em>faceted search</em>. Untuk definisi <em>faceted search</em> sendiri nggak begitu dijelaskan disini, jadi silahkan aja ke <a href=\"https://en.wikipedia.org/wiki/Faceted_search\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">wikipedia</a>. Yang dibahas disini hanya contoh kasus menerapkan teknik <em>faceted search</em> pada Redis menggunakan bahasa pemrograman tertentu, untuk mengurangi <em>time complexity</em> saat melakukan pencarian.</p>\n<p>Sebagai contoh, kita memiliki data customers berupa JSON sebagai berikut:</p>\n<pre class=\"shiki\" style=\"background-color: #2e3440\"><code><span style=\"color: #ECEFF4\">[</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #8FBCBB\">ID</span><span style=\"color: #ECEFF4\">\":</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">001</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #8FBCBB\">name</span><span style=\"color: #ECEFF4\">\":</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">John Doe</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #8FBCBB\">age</span><span style=\"color: #ECEFF4\">\":</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">20</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #8FBCBB\">city</span><span style=\"color: #ECEFF4\">\":</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">Jakarta</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #8FBCBB\">sex</span><span style=\"color: #ECEFF4\">\":</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">male</span><span style=\"color: #ECEFF4\">\"</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #ECEFF4\">},</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #8FBCBB\">ID</span><span style=\"color: #ECEFF4\">\":</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">002</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #8FBCBB\">name</span><span style=\"color: #ECEFF4\">\":</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">Jane Doe</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #8FBCBB\">age</span><span style=\"color: #ECEFF4\">\":</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">20</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #8FBCBB\">city</span><span style=\"color: #ECEFF4\">\":</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">Bandung</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #8FBCBB\">sex</span><span style=\"color: #ECEFF4\">\":</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">female</span><span style=\"color: #ECEFF4\">\"</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #ECEFF4\">}</span>\n<span style=\"color: #ECEFF4\">]</span></code></pre>\n<p>Jika kita ingin melakukan pencarian terhadap kolom <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">age</code>, <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">city</code>, dan <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">sex</code>.\nSelain menyimpan data customer tersebut, kita juga meyimpan indeks untuk <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">age</code>, <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">city</code>, dan <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">sex</code> berupa <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">sets</code>.</p>\n<p>Sebagai contoh:</p>\n<pre class=\"shiki\" style=\"background-color: #2e3440\"><code><span style=\"color: #4C566A\"># simpan data lengkap</span>\n<span style=\"color: #D8DEE9FF\">SET customer:001 </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">{json string data john doe}</span><span style=\"color: #ECEFF4\">\"</span>\n<span style=\"color: #D8DEE9FF\">SET customer:002 </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">{json string data jane doe}</span><span style=\"color: #ECEFF4\">\"</span>\n\n<span style=\"color: #D8DEE9FF\">SADD fs:customer:age:20 001 002     </span><span style=\"color: #4C566A\"># menambahkan 001 dan 002 kedalam set dengan age 20</span>\n<span style=\"color: #D8DEE9FF\">SADD fs:customer:city:</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">Jakarta</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> 001 </span><span style=\"color: #4C566A\"># menambahkan customer 001 kedalam set dengan city Jakarta</span>\n<span style=\"color: #D8DEE9FF\">SADD fs:customer:city:</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">Bandung</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> 002 </span><span style=\"color: #4C566A\"># menambahkan customer 002 kedalam set dengan city Bandung</span>\n<span style=\"color: #D8DEE9FF\">SADD fs:customer:sex:male 001</span>\n<span style=\"color: #D8DEE9FF\">SADD fs:customer:sex:female 002</span></code></pre>\n<blockquote>\n<p>Prefix 'fs' disana maksudnya <em>faceted search</em>. Bisa diganti dengan apapun.</p>\n</blockquote>\n<p>Dengan begitu, jika kita ingin melakukan pencarian dengan kriteria umur 20 dan jenis kelamin pria,\nhal yang pertama kita lakukan adalah mengambil <em>intersect</em> daftar ID dari <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">fs:customer:age:20</code> dan <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">fs:customer:sex:male</code>. Setelah ID didapat, barulah kita mengambil masing-masing data menggunakan <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">GET</code>.</p>\n<p>Contoh:</p>\n<pre class=\"shiki\" style=\"background-color: #2e3440\"><code><span style=\"color: #D8DEE9FF\">SINTER fs:customer:age:20 fs:customer:sex:male</span>\n<span style=\"color: #D8DEE9FF\">1) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">001</span><span style=\"color: #ECEFF4\">\"</span>\n\n<span style=\"color: #D8DEE9FF\">GET customer:001</span>\n<span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">json string data john doe</span><span style=\"color: #ECEFF4\">\"</span></code></pre>\n<p>Sebetulnya di kelas pakainya python, jadi hasil dari <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">SINTER</code> di looping untuk mendapatkan detail masing-masing datanya, tapi disini saya catat konsepnya aja. Pokoknya kayak gitulah tekniknya.</p>\n<h4 id=\"hashed-key\"><a href=\"#hashed-key\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Hashed Key</h4>\n<p>Materi selanjutnya adalah membandingkan <em>faceted search</em> diatas dengan tambahan <em>hashed key</em>.\nJadi pada teknik ini, <em>time complexity</em> lebih rendah karena kita tidak perlu melakukan <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">SINTER</code> ke banyak kriteria, karena kombinasi kriterianya dibungkus menjadi hash.</p>\n<p>Sebagai contoh pada data JSON sebelumnya, jika kita ingin melakukan pencarian terhadap <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">age</code>, <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">city</code>, dan <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">sex</code>.\nKita perlu membuat <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">sets</code> sebanyak kombinasi dari ke-3 kolom tersebut. Untuk algoritma hashnya sendiri bisa pakai apapun, entah md5, sha1, sha256, dsb.</p>\n<p>Contoh aja nih ya, dari data JSON diatas kita akan membuat <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">list</code> kurang lebih seperti ini:</p>\n<pre class=\"shiki\" style=\"background-color: #2e3440\"><code><span style=\"color: #4C566A\"># indeks untuk John Doe (001)</span>\n<span style=\"color: #D8DEE9FF\">RPUSH </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">hfs:customer:md5(20|Jakarta|male)</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> 001</span>\n<span style=\"color: #D8DEE9FF\">RPUSH </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">hfs:customer:md5(20|*|male)</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> 001</span>\n<span style=\"color: #D8DEE9FF\">RPUSH </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">hfs:customer:md5(20|Jakarta|*)</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> 001</span>\n<span style=\"color: #D8DEE9FF\">RPUSH </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">hfs:customer:md5(*|Jakarta|male)</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> 001</span>\n<span style=\"color: #D8DEE9FF\">RPUSH </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">hfs:customer:md5(20|*|*)</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> 001</span>\n<span style=\"color: #D8DEE9FF\">RPUSH </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">hfs:customer:md5(*|Jakarta|*)</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> 001</span>\n<span style=\"color: #D8DEE9FF\">RPUSH </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">hfs:customer:md5(*|*|male)</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> 001</span>\n\n<span style=\"color: #4C566A\"># indeks untuk Jane Doe (002)</span>\n<span style=\"color: #D8DEE9FF\">RPUSH </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">hfs:customer:md5(20|Bandung|female)</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> 002</span>\n<span style=\"color: #D8DEE9FF\">RPUSH </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">hfs:customer:md5(20|*|female)</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> 002</span>\n<span style=\"color: #D8DEE9FF\">RPUSH </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">hfs:customer:md5(20|Bandung|*)</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> 002</span>\n<span style=\"color: #D8DEE9FF\">RPUSH </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">hfs:customer:md5(*|Bandung|female)</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> 002</span>\n<span style=\"color: #D8DEE9FF\">RPUSH </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">hfs:customer:md5(20|*|*)</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> 002</span>\n<span style=\"color: #D8DEE9FF\">RPUSH </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">hfs:customer:md5(*|Bandung|*)</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> 002</span>\n<span style=\"color: #D8DEE9FF\">RPUSH </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">hfs:customer:md5(*|*|female)</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> 002</span></code></pre>\n<p>Itu <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">md5(age,city,sex)</code> contoh aja ya, sebetulnya itu seharusnya hasil dari md5-nya, bukan plain text kayak gitu.</p>\n<p>Intinya pada teknik <em>hashed key</em> ini kita menyimpan <strong>seluruh</strong> kombinasi key yang dimungkinkan, sehingga suatu saat kita ingin mencari data pria umur 20, kita bisa gunakan <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">LRANGE</code> sebagai berikut:</p>\n<pre class=\"shiki\" style=\"background-color: #2e3440\"><code><span style=\"color: #D8DEE9FF\">LRANGE </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">hfs:customer:md5(20|*|male)</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> 0 -1</span>\n<span style=\"color: #D8DEE9FF\">1) </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">001</span><span style=\"color: #ECEFF4\">\"</span></code></pre>\n<p>Dari hasil itu baru deh di loop pakai bahasa pemrograman buat dapatin detail masing-masing datanya.\nMenggunakan teknik seperti ini akan mengurangi <em>time complexity</em> untuk melakukan pencarian karena tidak perlu melakukan <em>intersect</em>, hanya saja semakin banyak kombinasi valuenya, keynya akan buanyak banget, dan proses maintain indeksnya jadi lebih rumit.</p>\n<h2 id=\"4-performance--big-o-notation\"><a href=\"#4-performance--big-o-notation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. Performance &#x26; Big O Notation</h2>\n<p>Sebagai programmer yang main weaponnya PHP dan Javascript saya sebetulnya agak gimana gitu di pembahasan minggu ini. Redis kan memang diciptakan untuk masalah performa, itu kenapa dia menghadirkan solusi in-memory database ini.\nTapi di minggu ini dia bahas masalah performa seakan menggunakan bahasa C dan RAM sebagai penyimpanan masih kurang meyakinkan buat mereka hahhha.</p>\n<p>Tapi setelah saya pikir-pikir lagi, justru karena fokus mereka di performa, makanya mereka menekankan masalah performa sampai sebegininya.</p>\n<p>Pada bagian ini, pembahasannya adalah tentang performa dan big O notation untuk beberapa perintah Redis.\nSebetulnya pada dokumentasi Redis, setiap perintah itu udah dicantumin big O notationnya, tapi disini mereka menjelaskan lebih detail untuk beberapa perintah.</p>\n<p>Ini contoh perhitungan Big O Notation untuk beberapa perintah Redis:</p>\n<pre class=\"shiki\" style=\"background-color: #2e3440\"><code><span style=\"color: #D8DEE9FF\">SET foo 10 </span><span style=\"color: #4C566A\"># O(1)</span>\n<span style=\"color: #D8DEE9FF\">SET bar 12 </span><span style=\"color: #4C566A\"># O(1)</span>\n\n<span style=\"color: #D8DEE9FF\">MSET foo 10 bar 12 baz 100 </span><span style=\"color: #4C566A\"># O(N), N = 3 (foo, bar , dan baz)</span>\n\n<span style=\"color: #D8DEE9FF\">DEL foo </span><span style=\"color: #4C566A\"># O(1)</span>\n<span style=\"color: #D8DEE9FF\">DEL bar baz </span><span style=\"color: #4C566A\"># O(N), N = 2</span>\n\n<span style=\"color: #D8DEE9FF\">SADD myset 1 2 3 4 5 </span><span style=\"color: #4C566A\"># O(N), N = 5</span>\n<span style=\"color: #D8DEE9FF\">DEL myset </span><span style=\"color: #4C566A\"># O(M), M = 5</span>\n\n<span style=\"color: #D8DEE9FF\">SADD set:a 1 2 3 4 5 </span><span style=\"color: #4C566A\"># O(5)</span>\n<span style=\"color: #D8DEE9FF\">SADD set:b 1 2 3 4 5 6 7 8 9 </span><span style=\"color: #4C566A\"># O(9)</span>\n\n<span style=\"color: #D8DEE9FF\">SINTER set:b set:a </span><span style=\"color: #4C566A\"># O(N * M), N = 5 (count set terkecil), M = 2 (set:a dan set:b) =&gt; O(5 * 2) =&gt; O(10)</span>\n\n<span style=\"color: #D8DEE9FF\">RPUSH numbers 1 2 3 4 5 6 7 8 9 0 </span><span style=\"color: #4C566A\"># O(10)</span>\n<span style=\"color: #D8DEE9FF\">LRANGE numbers 3 5 </span><span style=\"color: #4C566A\"># O(S + N), S = 4 (start + 1), N = 3 (end - start + 1) =&gt; O(4 + 3) =&gt; O(7) </span></code></pre>\n<hr>\n<p>Begitulah pertemuan minggu ke-2. Dah ya, saya mau lanjut ke RU102J.</p>\n","excerpt":"","description":"Catatan kelas Redis University RU101 minggu ke-2","tags":[{"id":"Redis University","title":"Redis University","path":"/tag/Redis%20University"},{"id":"Course","title":"Course","path":"/tag/Course"},{"id":"RU101","title":"RU101","path":"/tag/RU101"}]}},{"node":{"id":"7240487eb4ae485b30c3e42652d19ff3","title":"Redis University RU202 - Minggu Pertama","datetime":"2019-08-15 11:00:00","path":"/redis-university-ru202-minggu-pertama","content":"<p>Ini adalah catatan minggu pertama dari apa yang saya pelajari di kelas RU202-nya <a href=\"https://university.redislabs.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Redis University</a> yang berjudul <strong>\"Redis Streams\"</strong>.</p>\n<p>Sesuai judulnya, pada kelas ini pembahasannya adalah tentang Redis Stream, fitur pada Redis yang diperuntukkan untuk membuat messaging dan streaming pipelines.</p>\n<p>Kelas RU202 yang saya ikuti ini dimulai pada 7 Agustus 2019, dan akan berjalan selama 5 minggu\ndimana 4 minggu pertama adalah pembelajaran, dan minggu terakhir adalah ujian.\nPada 4 minggu pertama, peserta dibagikan materi berupa video, quiz, dan diakhiri dengan PR mingguan.\nNilai dari PR mingguan akan diakumulasikan pada nilai akhir, jika nilai akhir mencapai 64% atau lebih, peserta akan diberikan sertifikat penyelesaian dari Redis University.</p>\n<p>Sebagaimana kelas Redis University lainnya, RU202 juga memberikan Virtual Lab di setiap minggunya yang sudah terinstall Redis.</p>\n<h2 id=\"catatan-ru202-minggu-pertama\"><a href=\"#catatan-ru202-minggu-pertama\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Catatan RU202 Minggu Pertama</h2>\n<p>Pada minggu pertama ini, yang dibahas adalah:</p>\n<ol>\n<li>Pengenalan Distributed Systems dan Stream Processing</li>\n<li>Pengenalan Redis Streams</li>\n</ol>\n<h4 id=\"1-pengenalan-distributed-systems-dan-stream-processing\"><a href=\"#1-pengenalan-distributed-systems-dan-stream-processing\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Pengenalan Distributed Systems dan Stream Processing</h4>\n<h6 id=\"distributed-systems\"><a href=\"#distributed-systems\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Distributed Systems</h6>\n<p>Distributed systems adalah sebuah setup (pengaturan) yang terdiri dari berbagai komponen jaringan yang saling melakukan perpesanan (messaging) satu sama lain. Redis sendiri didesain untuk menjadi salah satu komponen tersebut, dimana nama Redis merupakan singkatan dari \"<strong>Re</strong>mote <strong>Di</strong>ctionary <strong>S</strong>erver\". Kata \"remote\" berarti dapat diakses melalui jaringan, sedangkan kara \"server\" menunjukkan rolenya pada paradigma client-server. Jadi kata Redis sendiri dapat diartikan sebagai server yang berperan sebagai bagian dari setup dimana komponen-komponen (pada distributed system) lain berkomunikasi dengannya, juga menjadi perantara antara setiap komponen untuk berkomunikasi satu sama lain.</p>\n<p>Membuat distributed system memiliki tantangan tersendiri dalam menghadapi kegagalan (failures). Saat salah satu komponen mengalami kegagalan (mati), komponen tersebut jadi tidak dapat menerima pesan apapun dari komponen lain, bahkan pesan yang sedang diproses sebelum dia mati juga ikut hilang. Kehilangan sebuah komponen dalam distributed system adalah hal yang tidak dapat dicegah. Oleh karena itu distributed system yang dibuat harus dirancang sedemikian rupa untuk menghadapi kemungkinan tersebut.</p>\n<p>Messaging adalah komponen yang cukup penting dalam sebuah distributed system, karena dia mengendalikan global-state yang digunakan oleh komponen-komponen lain. </p>\n<p>Pada versi 5.0, Redis sudah mendukung distributed messaging. Messaging pada Redis dirancang khusus untuk unggul dalam performa dibanding beberapa alternatif message broker lainnya.</p>\n<h6 id=\"stream-processing\"><a href=\"#stream-processing\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Stream Processing</h6>\n<p>Setiap distributed system bergantung pada komponen messaging untuk mengendalikan atau mengkoordinasikan komponen-komponen lain. Beberapa sistem dibangun untuk dapat menangani data yang dikirimkan secara terus-menerus, dan bereaksi secara instan saat terdapat perubahan pada data. Pada era big data, hal ini disebut stream processing, dipopulerkan oleh Apache Storm dan beberapa konsep lain yang sudah hadir sebelumnya.</p>\n<p>Stream processing adalah kebalikan dari batch processing.</p>\n<p>Contoh populer dari stream processing adalah monitoring suhu. Sensor suhu akan membaca suhu setiap sepersekian detik, kemudian sensor akan mengirimkannya secara terus menerus (streaming) data tersebut ke stream processor. Kemudian stream processor akan mengecek, jika suhu melewati batas yang ditentukan, stream processor secara real-time akan mengirimkan notifikasi ke smartpohne pengguna.</p>\n<h4 id=\"2-pengenalan-redis-stream\"><a href=\"#2-pengenalan-redis-stream\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Pengenalan Redis Stream</h4>\n<p>Pada versi 5.0 Redis mendukung struktur data untuk melakukan stream yang diberi nama Redis Stream.</p>\n<p>Berikut beberapa poin penting tentang Redis Stream:</p>\n<ol>\n<li>Redis Stream adalah struktur data.</li>\n<li>Bertindak seperti <em>append-only</em> list. Tidak seperti list yang bisa ditambahkan nilai pada index tertentu, stream hanya dapat ditambahkan di akhir. Jadi mulai sekarang bayangin Redis Stream ini adalah array.</li>\n<li>Setiap item didalam Redis Stream adalah Hash (semacam <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">Map&lt;String, String&gt;</code> kalau di Java).</li>\n<li>Setiap item didalam Redis Stream diidentifikasikan oleh ID unik, dimana secara default ID adalah <em>time-prefixed</em> (diawali informasi waktu).</li>\n<li>Mendukung ID-based range queries. Kalau ibarat SQL di RDBMS, dia mendukung semacam: <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">select from streamnya where timenya between timeA and timeB</code>.</li>\n<li>Setiap Redis Stream dapat dikonsumsi oleh banyak kelompok consumer atau yang disebut sebagai consumer group.</li>\n<li>Redis stream bersifat immutable, sekali di append, data tidak dapat diubah.</li>\n<li>Setiap item didalam Redis Stream dapat dihapus, tetapi Redis hanya memberi flag \"terhapus\", datanya sendiri sebetulnya masih ada, tetapi tidak akan muncul saat diquery.</li>\n</ol>\n<p>Sebelumnya Redis memiliki fitur Redis Pub/Sub, lalu apa bedanya dengan Redis Stream?</p>\n<p>Perbedaannya adalah, jika pada Pub/Sub, client hanya menerima data yang dipublish (dikirim) <strong>setelah dia terhubung</strong>. Sedangkan pada Redis Stream, client yang baru terhubung akan menerima data stream yang dikirim <strong>sebelum dia terhubung</strong>. Dengan kata lain pada Pub/Sub memori akan dihapus setelah publish selesai dilakukan, sedangkan pada Redis Stream memori (data streamnya) tetap disimpan untuk dikirimkan nanti saat ada client baru yang terhubung.</p>\n<hr>\n<p>Segitu aja mungkin untuk RU202 ini yang perlu saya catat. Yaudahlah, sampai jumpa di catatan minggu depan.</p>\n","excerpt":"","description":"Catatan kelas Redis University RU102 minggu pertama","tags":[{"id":"Redis University","title":"Redis University","path":"/tag/Redis%20University"},{"id":"Course","title":"Course","path":"/tag/Course"},{"id":"RU202","title":"RU202","path":"/tag/RU202"}]}},{"node":{"id":"a09ab95e3517e559565ab4d8a222ae85","title":"Redis University RU201 - Minggu Pertama","datetime":"2019-08-15 10:00:00","path":"/redis-university-ru201-minggu-pertama","content":"<p>Ini adalah catatan minggu pertama dari apa yang saya pelajari di kelas RU201-nya <a href=\"https://university.redislabs.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Redis University</a> yang berjudul <strong>\"RediSearch\"</strong>.</p>\n<p>Pada kelas ini, pembahasannya adalah tentang RediSearch, yaitu modul Redis yang berisi perlengkapan untuk melakukan pencarian berbasis memori dan melakukan secondary indexing.</p>\n<p>Kelas RU201 yang saya ikuti ini dimulai pada 7 Agustus 2019, dan akan berjalan selama 6 minggu\ndimana 5 minggu pertama adalah pembelajaran, dan minggu terakhir adalah ujian.\nPada 5 minggu pertama, peserta dibagikan materi berupa video, quiz, dan diakhiri dengan PR mingguan.\nNilai dari PR mingguan akan diakumulasikan pada nilai akhir, jika nilai akhir mencapai 65% atau lebih, peserta akan diberikan sertifikat penyelesaian dari Redis University.</p>\n<p>Sebagaimana kelas Redis University lainnya, RU201 juga memberikan Virtual Lab di setiap minggunya yang sudah terinstall Redis dan RediSearch.</p>\n<h2 id=\"catatan-ru201-minggu-pertama\"><a href=\"#catatan-ru201-minggu-pertama\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Catatan RU201 Minggu Pertama</h2>\n<p>Pada minggu pertama, materi yang dibahas adalah:</p>\n<ol>\n<li>Redis Module</li>\n<li>Konsep Search Engine</li>\n<li>Konsep Secondary Index</li>\n<li>RediSearch vs Redis</li>\n</ol>\n<h4 id=\"1-redis-module\"><a href=\"#1-redis-module\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Redis Module</h4>\n<p>Redis module adalah software tambahan untuk menambahkan fungsionalitas yang berbeda pada Redis.\nRedis module berbeda dengan Redis client yang dibahas pada kelas RU201J.</p>\n<p>Berikut adalah poin-poin penting tentang redis module.</p>\n<ol>\n<li>Redis module adalah compiled software.</li>\n<li>Redis module diimplementasikan sebagai sebuah shared object file (kurang tau maksudnya apa).</li>\n<li>Redis module berisi subroutines yang mengizinkan Redis server untuk terintegrasi dengannya saat runtime. Subroutines dipanggil oleh Redis melalui <em>foreign function interface</em>.</li>\n<li>Umumnya redis module dibuat menggunakan C, C++ dan Rust.</li>\n<li>Redis module dapat mengimplementasikan data type tersendiri diluar data types yang disediakan Redis.</li>\n<li>Redis module dapat menambahkan perintah-perintah baru pada Redis server.</li>\n<li>Data type memiliki akses langsung ke memori, disimpan ke server, dan beroperasi dengan kecepatan dan efisiensi yang sama dengan built-in commands.</li>\n<li>\n<p>Redis module dapat diintegrasikan dengan beberapa cara:</p>\n<ul>\n<li>Melalui file redis.conf.</li>\n<li>Melalui command line argument.</li>\n<li>Melalui perintah <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">MODULE LOAD</code> pada redis-cli.</li>\n<li>Melalui Redis enterprise GUI.</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"2-konsep-search-engine\"><a href=\"#2-konsep-search-engine\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Konsep Search Engine</h4>\n<p>Pada bagian ini yang pertama kali dibahas adalah tentang konsep dasar dari vocabulary pada search engine.\nUmumnya setiap indeks search engine terdiri dari sekumpulan dokumen. Setiap dokumen diidentifikasikan oleh ID yang terbuat dari sekumpulan field.</p>\n<p>Berikut poin-poin cukup penting untuk diingat:</p>\n<ul>\n<li>Indeks terdiri dari sekumpulan dokumen.</li>\n<li>Indeks dapat hanya berisi referensi dari dokumen tanpa menyimpan dokumen tersebut.</li>\n<li>Indeks tidak mengharuskan setiap field di dokumen untuk didefinisikan pada skema.</li>\n</ul>\n<h6 id=\"tokenization\"><a href=\"#tokenization\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tokenization</h6>\n<p>DBMS pada umumnya menyimpan teks sebagai binary-stream, sedangkan search engine perlu memahami bahasa manusia\nsehingga tidak dapat menyimpan teks sebagai binary-stream. Hal pertama yang dilakukan search engine adalah\nmengambil teks dan mengubahnya menjadi huruf kecil semua, lalu memecah teks-teks tersebut kedalam <em>logical-unit</em>, alias token. Untuk mendapatkan token, diperlukan proses <em>tokenization</em> (tokenisasi).</p>\n<p>Sebagai contoh, pada kalimat \"sebuah token adalah\", jika dilakukan proses tokenisasi akan menjadi 3 buah token:\n\"sebuah\", \"token\", dan \"adalah\".</p>\n<p>Pada RediSearch, spasi bukan satu-satunya pemisah token. Melainkan hampir semua tanda baca adalah pemisah dari token, dan akan diabaikan.</p>\n<p>Sebagai contoh saat kamu memiliki kalimat \"kamu adalah satu-satunya\", maka RediSearch akan memecahnya menjadi 4 buah token: \"kamu\", \"adalah\", \"satu\", \"satunya\".</p>\n<p>Jika kamu menginginkan \"satu-satunya\" dianggap sebagai sebuah token, kamu dapat melakukan escaping dengan menambahkan karakter backslash <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">\\</code> pada karakter pemisah. Contoh: \"kamu adalah satu\\-satunya\".</p>\n<h6 id=\"stop-words\"><a href=\"#stop-words\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Stop Words</h6>\n<p>Stop words adalah daftar kata yang dianggap tidak penting (dapat diabaikan) sehingga perlu dihilangkan dari indeks.\nSebagai contoh adalah kata \"a\" (sebuah/seorang), kata tersebut sangat sering digunakan pada hampir semua dokumen, sehingga dirasa tidak perlu menyimpannya kedalam indeks.</p>\n<p>Pada RediSearch daftar katayang masuk kedalam stop words (secara default) adalah:</p>\n<pre class=\"shiki\" style=\"background-color: #2e3440\"><code><span style=\"color: #D8DEE9FF\">a,    is,    the,   an,   and,  are, as,  at,   be,   but,  by,   for,</span>\n<span style=\"color: #D8DEE9FF\">if,   in,    into,  it,   no,   not, of,  on,   or,   such, that, their,</span>\n<span style=\"color: #D8DEE9FF\">then, there, these, they, this, to,  was, will, with</span></code></pre>\n<p>Kata-kata tersebut secara default akan diabaikan oleh RediSearch, tidak akan dimasukkan kedalam indeks.</p>\n<h5 id=\"stemming\"><a href=\"#stemming\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Stemming</h5>\n<p>Stemming adalah proses mengubah kata pada setiap token menjadi kata dasarnya saja. Sebagai contoh kata \"menciptakan\", imbuhan \"men-kan\" akan dihapus, sehingga yang disimpan kedalam indeks hanya kata \"cipta\" saja. Kata kunci yang dimasukkan pada search engine juga dilakukan stemming. Dengan begini search engine yang dibuat jadi nggak kaku-kaku banget.</p>\n<p>Di RediSearch sendiri stemming bersifat optional, karena proses stemming ini cukup rumit untuk diadaptasi pada setiap bahasa, karena peraturan masing-masing bahasa yang cukup kompleks.</p>\n<h4 id=\"3-konsep-secondary-index\"><a href=\"#3-konsep-secondary-index\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. Konsep Secondary Index</h4>\n<p>Secondary indeks seperti namanya adalah indeks kedua setelah indeks utama (primary index). Yang dimaksud kedua disini, jadi secondary index adalah index yang berisi indeks utama. Aduh bingung juga nulisnya.</p>\n<p>Gini, misalkan di MySQL kita punya database customer yang berisi kolom \"ID\", \"email\", \"name\", \"phone\", \"dob\", dan \"city\", dimana kolom ID adalah primary key (primary index).</p>\n<p>Saat kita ingin mencari customer berdasarkan \"city\", untuk mempercepat pencarian kita membutuhkan secondary index yang berisi ID dari si customer. Nanti setelah ID-nya didapat, barulah kita mengambil data customer secara utuh.</p>\n<p>Disini RediSearch berperan sebagai secondary index dimana dia menyimpan field-field yang akan dilakukan pencarian, yang berisi primary index.</p>\n<p>RediSearch memiliki kelebihan sebagai secondary index yaitu sebagaimana Redis, RedisSearch menyimpan secondary index kedalam memory (bukan phisycal storage) sehingga performa lebih optimal.</p>\n<p>Kekurangan menggunakan secondary index diantaranya:</p>\n<ul>\n<li>Meningkatkan kompleksitas untuk menjaga indeks supaya tetap sesuai dengan penyimpanan aslinya.</li>\n<li>Berpotensi out-of-date. Lagi-lagi kita harus menjaga indeks supaya sesuai dengan penyimpanan aslinya.</li>\n<li>2 stage latency. Karena kita memerlukan setidaknya 2 proses untuk setiap pencarian. Query ke RediSearch, kemudian query ke storage aslinya.</li>\n</ul>\n<h4 id=\"4-redisearch-vs-redis\"><a href=\"#4-redisearch-vs-redis\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. RediSearch vs Redis</h4>\n<p>RediSearch memproses nilai berbeda dengan Redis biasa. Berikut adalah beberapa perbedannya.</p>\n<h6 id=\"keyspaces-vs-index\"><a href=\"#keyspaces-vs-index\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Keyspaces vs Index</h6>\n<p>Pada RediSearch tidak berlaku one-key pattern seperti halnya Redis biasa. Setiap key pada RediSearch disimpan menggunakan key space khusus sehingga kita tidak dapat menggunakan perintah redis biasa pada key yang digunakan di RediSearch.</p>\n<h6 id=\"field-types\"><a href=\"#field-types\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Field Types</h6>\n<p>Ada 4 tipe data yang perlu diketahui pada RediSearch.</p>\n<ol>\n<li>Text: untuk menyimpan teks. Untuk setiap skema dari dokumen, maksimal hanya boleh terdiri dari 128 text field. Text field dapat diberikan bobot dan dapat dilakukan sorting.</li>\n<li>Numeric: untuk menyimpan data non-tekstual. Tipe ini dapat dilakukan sorting dan ranging. </li>\n<li>Tag: untuk menyimpan sekumpulan teks/label/kategri. Berbeda dengan teks field, tag fields tidak diterapkan stemming dan stop words.</li>\n<li>Geo: untuk menyimpan latitude dan longitude. Tipe ini disimpan sebagai sorted-set pada Redis.</li>\n</ol>\n<hr>\n<p>Sepertinya segitu aja yang perlu dicatat pada minggu pertama di RU201 ini. Yaudahlah sampai jumpa di catatan minggu berikutnya.</p>\n","excerpt":"","description":"Catatan kelas Redis University RU201 minggu pertama","tags":[{"id":"Redis University","title":"Redis University","path":"/tag/Redis%20University"},{"id":"Course","title":"Course","path":"/tag/Course"},{"id":"RU201","title":"RU201","path":"/tag/RU201"}]}},{"node":{"id":"2a0270af5d02e65c8218fd4d866af458","title":"Redis University RU102J - Minggu Pertama","datetime":"2019-08-15 09:00:00","path":"/redis-university-ru102j-minggu-pertama","content":"<p>Ini adalah catatan minggu pertama dari apa yang saya pelajari di kelas RU102J-nya <a href=\"https://university.redislabs.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Redis University</a> yang berjudul <strong>\"Redis for Java Developers\"</strong>.</p>\n<p>Seperti judulnya, para peserta diajarkan best-practice menggunakan Redis pada aplikasi berbasis Java.\nDisini peserta akan dituntun untuk membuat aplikasi <em>Redis Solar</em>, yaitu aplikasi untuk memonitoring panel surya berbasis web menggunakan Java framework <a href=\"https://www.dropwizard.io\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dropwizard</a> sebagai back-end dan <a href=\"https://vuejs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vue.js</a> sebagai front-end frameworknya.</p>\n<p>Kelas RU102J yang saya ikuti ini dimulai pada 7 Agustus 2019, dan akan berjalan selama 5 minggu\ndimana 4 minggu pertama adalah pembelajaran, dan minggu terakhir adalah ujian.\nPada 4 minggu pertama, peserta dibagikan materi berupa video, quiz, dan diakhiri dengan PR mingguan.\nNilai dari PR mingguan akan diakumulasikan pada nilai akhir, jika nilai akhir mencapai 65% atau lebih, peserta akan diberikan sertifikat penyelesaian dari Redis University.</p>\n<p>Sebagaimana kelas Redis University lainnya, RU102J juga memberikan Virtual Lab di setiap minggunya yang sudah terinstall redis beserta java environmentnya.</p>\n<p>Selain menggunakan Virtual Lab, kelas ini juga sudah menyediakan docker image untuk peserta yang ingin menjalankan aplikasi di komputernya sendiri.</p>\n<h2 id=\"catatan-ru102j-minggu-pertama\"><a href=\"#catatan-ru102j-minggu-pertama\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Catatan RU102J Minggu Pertama</h2>\n<p>Pada minggu pertama ini pembahasannya hanya seputar setup environment, pengenalan Redis Client, serta pengenalan DAO pattern.</p>\n<p>Untuk setup environment saya rasa tidak perlu saya catat disini, karena itu berbeda-beda untuk setiap OS.\nKarena saya juga di kelas ini menggunakan Virtual Lab dari mereka (ngirit storage saya om :p). Jadi langsung saja bahas tentang Redis Client dan DAO Pattern.</p>\n<h4 id=\"redis-clients\"><a href=\"#redis-clients\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Redis Clients</h4>\n<p>Redis client adalah library untuk menghubungkan aplikasi yang akan dibuat dengan Redis server.\nRedis client saat ini sudah tersedia pada berbagai bahasa pemrograman populer. Tugas redis client antara lain:</p>\n<ol>\n<li>Mengelola koneksi antara client (app) dengan redis-server.</li>\n<li>Mengimplementasikan Redis Serialization Protocol (ReSP).</li>\n<li>Menyajikan API untuk menjalankan perintah redis ke redis-server pada bahasa pemrograman terkait.</li>\n</ol>\n<p>Ada beberapa redis client untuk Java yang dijadikan pembahasan pada kelas ini. Diantaranya adalah:</p>\n<ol>\n<li>Jedis.</li>\n<li>Lettuce.</li>\n<li>Redisson.</li>\n</ol>\n<p>Sedangkan yang akan digunakan pada kelas ini adalah Jedis, karena:</p>\n<ol>\n<li>Ukuran library yang kecil.</li>\n<li>API yang mirip-mirip dengan redis-cli.</li>\n</ol>\n<p>Berikut adalah hal dasar yang perlu diketahui saat menggunakan Jedis:</p>\n<pre class=\"shiki\" style=\"background-color: #2e3440\"><code><span style=\"color: #4C566A\">// Initialize connection</span>\n<span style=\"color: #8FBCBB\">String</span><span style=\"color: #D8DEE9FF\"> redisHost </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">localhost</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #81A1C1\">int</span><span style=\"color: #D8DEE9FF\"> redisPort </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">6379</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #8FBCBB\">Jedis</span><span style=\"color: #D8DEE9FF\"> jedis </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">new</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Jedis</span><span style=\"color: #D8DEE9FF\">(redisHost, redisPort)</span><span style=\"color: #81A1C1\">;</span>\n\n<span style=\"color: #4C566A\">// Set value</span>\n<span style=\"color: #D8DEE9FF\">jedis</span><span style=\"color: #81A1C1\">.</span><span style=\"color: #88C0D0\">set</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">foo</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">bar</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #81A1C1\">;</span>\n\n<span style=\"color: #4C566A\">// Get value</span>\n<span style=\"color: #8FBCBB\">String</span><span style=\"color: #D8DEE9FF\"> value </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> jedis</span><span style=\"color: #81A1C1\">.</span><span style=\"color: #88C0D0\">get</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">foo</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #81A1C1\">;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\">// \"bar\"</span></code></pre>\n<p>Berikut ini adalah type mapping antara Java dan Redis:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Redis</th>\n<th align=\"center\">Java</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">string</td>\n<td align=\"center\">String</td>\n</tr>\n<tr>\n<td align=\"center\">list</td>\n<td align=\"center\">List<String></td>\n</tr>\n<tr>\n<td align=\"center\">set</td>\n<td align=\"center\">Set<String></td>\n</tr>\n<tr>\n<td align=\"center\">hash</td>\n<td align=\"center\">Map&#x3C;String, String></td>\n</tr>\n<tr>\n<td align=\"center\">float</td>\n<td align=\"center\">Double</td>\n</tr>\n<tr>\n<td align=\"center\">integer</td>\n<td align=\"center\">Long</td>\n</tr>\n</tbody>\n</table>\n<p>Untuk API Jedis selengkapnya bisa dilihat di dokumentasi Jedis <a href=\"http://xetorthio.github.io/jedis/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">disini</a>.</p>\n<h4 id=\"dao-pattern\"><a href=\"#dao-pattern\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>DAO Pattern</h4>\n<p>DAO adalah singkatan dari Data Access Object. DAO pattern memisahkan data access interface dari logic untuk berinteraksi dengan penyimpanan data. DAO pattern mendukung implementasi beragam penyimpanan data. Pada DAO domain objek dipisahkan dari logic utama.</p>\n<p>Kalau kamu pernah coba Repository Pattern, DAO ini mirip-mirip dengan Repository Pattern.</p>\n<p>Pada DAO pattern, kita memerlukan setidaknya beberapa hal dibawah ini:</p>\n<ol>\n<li>Domain Object: untuk merepresentasikan data.</li>\n<li>DAO interface: interface yang berisi data-store-agnostic API.</li>\n<li>DAO Implementation: class yang mengimplementasikan DAO interface untuk berinteraksi dengan data storage.</li>\n</ol>\n<p>Berikut ini adalah contoh diagram dari penerapan DAO pattern.</p>\n<p><img src=\"/images/posts/ru102j-w1-dao.png\" alt=\"DAO Pattern\"></p>\n<p>Pada diagram diatas, interface <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">SiteDao</code> berperan untuk melakukan abstraksi. Untuk menggunakan Redis pada pattern ini, dibuatlah class <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">SiteDaoRedisImpl</code> yang mengimplementasikan <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">SiteDao</code>. <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">SiteDaoRedisImpl</code> ini terhubung ke penyimpanan redis menggunakan Redis Client. Sedangkan class <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">Site</code> pada diagram diatas digunakan sebagai objek masukan atau kembalian dari setiap class yang mengimplementasikan <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">SiteDao</code> interface, yang dalam contoh ini adalah <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">SiteDaoRedisImpl</code>.</p>\n<p>Dengan pattern seperti ini, Application Code terima beres, tidak perlu tahu-menahu yang terjadi pada data storage.\nJika suatu saat kita ingin menggantikan Redis, kita hanya perlu membuat class yang mengimplementasikan <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">SiteDao</code>, dan memasukkannya ke Application Code. Sedangkan pada Application Code kita tidak perlu merubah apapun.</p>\n<hr>\n<p>Sebetulnya di kelas diajarkan coding Java untuk menerapkan DAO pattern ini, cuma codenya terlalu panjang, dan sebagian besar hanya code Java sederhana, yang bagian pentingnya sudah ditulis pada snippet Redis Clients diatas, jadi saya nggak ngerasa perlu untuk mencatat.</p>\n<p>Jadi segitu aja catatan RU102J untuk minggu ini. Sampai jumpa di catatan minggu selanjutnya.</p>\n","excerpt":"","description":"Catatan kelas Redis University RU102 minggu pertama","tags":[{"id":"Redis University","title":"Redis University","path":"/tag/Redis%20University"},{"id":"Course","title":"Course","path":"/tag/Course"},{"id":"RU102J","title":"RU102J","path":"/tag/RU102J"}]}}]}}},"context":{}}