{"hash":"fbfc616fb57024ee01734142bc3730c3472dda85","data":{"posts":{"pageInfo":{"currentPage":1,"totalPages":2,"totalItems":9,"hasPreviousPage":false,"hasNextPage":true,"isFirst":true,"isLast":false,"perPage":5},"edges":[{"node":{"id":"80040c8d50366162db3f400b81efbfdc","title":"Export Jutaan Data ke CSV dengan Aman di Laravel","datetime":"2019-11-08 11:00:00","content":"<p>Pada versi 6.0, Laravel menambahkan sebuah fitur baru yaitu <em>Lazy Collection</em>.\nDengan <em>Lazy Collection</em>, aplikasi Laravel dapat mengambil sekumpulan data dari database\ntanpa harus menampung <strong>seluruh</strong> data tersebut kedalam memori. Di balik layar, <em>Lazy Collection</em>\nmemanfaatkan fitur <em>PHP Generator</em>. Beberapa waktu lalu, saya posting <a href=\"https://www.facebook.com/em.sifa/videos/vb.100000130485713/3270308866316764/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">video</a> untuk menjelaskan bagaimana generator dapat menghemat penggunaan memori,\nvideo berdurasi 20 menitan tersebut dapat membantu kamu untuk lebih memahami apa yang saya tuliskan disini.</p>\n<p>Pada artikel ini, saya mau share bagaimana cara memanfaatkan <em>Lazy Collection</em> untuk melakukan streaming file CSV,\nsehingga kita dapat melakukan export jutaan data tanpa harus menampung jutaan data tersebut ke dalam memori.</p>\n<h4 id=\"kenapa-csv\"><a href=\"#kenapa-csv\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kenapa CSV?</h4>\n<p>Kenapa menggunakan CSV?, kenapa bukan file excel aja?</p>\n<p>Setahu saya, koreksi kalau salah loh ya. Saat ekspor data menjadi file excel, yang terjadi adalah\n(jutaan) data kamu akan dibuffer/ditampung kedalam konten file excel, setelah selesai,\nfile tersebut masih diolah lagi untuk dilakukan proses encoding,\nstyling (membuat border, warnai teks, merge-cells, dsb), sampai akhirnya <em>buntelan</em> file excel kamu siap,\nbarulah file excel kamu \"disajikan\" ke browser.</p>\n<p>Saat \"memasak\" (baca: mengolah) file excel tersebut, semakin banyak \"porsi\" (baca: baris) yang ingin dimasak, semakin besar pula \"wajan\" (baca: memori) yang harus digunakan untuk \"memasak\" file itu. Kalau \"wajan\"-nya tidak cukup besar, aplikasi kamu akan error, karena memorinya tidak mencukupi.</p>\n<p>Berbeda dengan CSV, file CSV hanya berisi teks biasa (<em>plain text</em>) yang setiap barisnya mewakili baris pada tabel, dimana pada setiap baris terdapat karakter \";\" atau \",\" sebagai pemisah dari masing-masing kolom. Kekurangannya, pada file CSV kita tidak bisa melakukan styling, formula, dsb seperti yang didukung oleh format excel. Tapi dengan kekurangan tersebut, kita dapat melakukan streaming konten CSV baris-per-baris, dari server dialirkan ke browser, dari browser dialirkan ke storage device user. Singkatnya: server kita tidak perlu menampung beban memori dari seluruh data di dalam file CSV yang hendak diekspor.</p>\n<h4 id=\"kenapa-lazy-collection\"><a href=\"#kenapa-lazy-collection\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kenapa Lazy Collection?</h4>\n<p>Kalau kamu pernah menonton video yang saya sebutkan di awal, kamu akan mengerti peran Lazy Collection disini.\nSingkatnya, dengan Lazy Collection kita tidak perlu menampung data yang ingin kita ekspor,\nsehingga yang terjadi adalah data dari hasil query akan difetch satu-per-satu dari DBMS, untuk kemudian data tersebut\nditulis kedalam stream file CSV yang akan diterima dan diproses langsung oleh web browser.</p>\n<p>Secara keseluruhan, gambaran prosesnya nanti akan jadi (kurang-lebih) seperti ini:</p>\n<p><img src=\"/images/posts/export-jutaan-data-ke-csv-dengan-aman-di-laravel__1.png\" alt=\"Alur download stream csv\"></p>\n<h2 id=\"bagaimana-caranya\"><a href=\"#bagaimana-caranya\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bagaimana Caranya?</h2>\n<p>Caranya sebetulnya sederhana.\nMisalkan disini kita memiliki model <code>App\\Models\\LogActivity.php</code> yang mewakili table <code>log_activities</code> yang berisi 10 juta data.\nDi dalam table tersebut, kita ingin export data <code>time</code>, <code>user_id</code>, <code>message</code>, <code>ip_address</code>, dan <code>user_agent</code>.</p>\n<p>Supaya agak panjang artikelnya, misalnya isi file modelnya kayak gini:</p>\n<pre class=\"shiki\" style=\"background-color: #191d21\"><code><span style=\"color: #EFEFEF\">&lt;?php</span>\n\n<span style=\"color: #FF0078\">namespace</span><span style=\"color: #FFFFFF\"> Illuminate</span><span style=\"color: #EFEFEF\">\\</span><span style=\"color: #FFFFFF\">Database</span><span style=\"color: #EFEFEF\">\\</span><span style=\"color: #FFFFFF\">Eloquent</span><span style=\"color: #EFEFEF\">\\</span><span style=\"color: #FFFFFF\">Model</span><span style=\"color: #EFEFEF\">;</span>\n\n<span style=\"color: #2BA8FF\">class</span><span style=\"color: #FFFFFF\"> LogActivity </span><span style=\"color: #2BA8FF\">extends</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #2BA8FF\">Model</span>\n<span style=\"color: #EFEFEF\">{</span>\n\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #2BA8FF\">protected</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">table </span><span style=\"color: #EFEFEF\">=</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #50E3C2\">\"log_activities\"</span><span style=\"color: #EFEFEF\">;</span>\n\n<span style=\"color: #EFEFEF\">}</span></code></pre>\n<p>Dah, gitulah ya.</p>\n<p>Kemudian, kita menambahkan route seperti ini di <code>routes/web.php</code>:</p>\n<pre class=\"shiki\" style=\"background-color: #191d21\"><code><span style=\"color: #FFFFFF\">Route::get('log-activities/export', 'LogActivityController@export');</span></code></pre>\n<p>Setelah itu, pada controllernya kamu dapat menuliskan seperti ini:</p>\n<pre class=\"shiki\" style=\"background-color: #191d21\"><code><span style=\"color: #EFEFEF\">&lt;?php</span>\n\n<span style=\"color: #FF0078\">namespace</span><span style=\"color: #FFFFFF\"> App</span><span style=\"color: #EFEFEF\">\\</span><span style=\"color: #FFFFFF\">Http</span><span style=\"color: #EFEFEF\">\\</span><span style=\"color: #FFFFFF\">Controllers</span><span style=\"color: #EFEFEF\">;</span>\n\n<span style=\"color: #FF0078\">use</span><span style=\"color: #FFFFFF\"> App</span><span style=\"color: #EFEFEF\">\\</span><span style=\"color: #FFFFFF\">Models</span><span style=\"color: #EFEFEF\">\\</span><span style=\"color: #FFFFFF\">LogActivity</span><span style=\"color: #EFEFEF\">;</span>\n<span style=\"color: #FF0078\">use</span><span style=\"color: #FFFFFF\"> Illuminate</span><span style=\"color: #EFEFEF\">\\</span><span style=\"color: #FFFFFF\">Http</span><span style=\"color: #EFEFEF\">\\</span><span style=\"color: #FFFFFF\">Request</span><span style=\"color: #EFEFEF\">;</span>\n\n<span style=\"color: #2BA8FF\">class</span><span style=\"color: #FFFFFF\"> LogActivityController </span><span style=\"color: #2BA8FF\">extends</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #2BA8FF\">Controller</span>\n<span style=\"color: #EFEFEF\">{</span>\n\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #2BA8FF\">public</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #2BA8FF\">function</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #2BA8FF\">export</span><span style=\"color: #EFEFEF\">()</span>\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #EFEFEF\">{</span>\n<span style=\"color: #EFEFEF\">        </span><span style=\"color: #888\">// 1. Ambil seluruh data log_activities kedalam LazyCollection (Generator)</span>\n<span style=\"color: #FFFFFF\">        </span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">logs </span><span style=\"color: #EFEFEF\">=</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #2BA8FF\">LogActivity</span><span style=\"color: #EFEFEF\">::</span><span style=\"color: #FFFFFF\">orderBy(</span><span style=\"color: #50E3C2\">'time'</span><span style=\"color: #FFFFFF\">)</span><span style=\"color: #EFEFEF\">-&gt;</span><span style=\"color: #FFFFFF\">cursor()</span><span style=\"color: #EFEFEF\">;</span>\n\n<span style=\"color: #EFEFEF\">        </span><span style=\"color: #888\">// FYI: dibawah ini contoh kalau kamu mau gunakan condition dengan cursor</span>\n<span style=\"color: #EFEFEF\">        </span><span style=\"color: #888\">// $logs = LogActivity::whereRaw(\"DATE(time) = '2019-11-08'\")-&gt;where('user_id', 1)-&gt;cursor()</span>\n\n<span style=\"color: #EFEFEF\">        </span><span style=\"color: #888\">// 2. Set header untuk streaming file CSV</span>\n<span style=\"color: #FFFFFF\">        </span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">filename </span><span style=\"color: #EFEFEF\">=</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #50E3C2\">\"log-activities.csv\"</span><span style=\"color: #EFEFEF\">;</span>\n<span style=\"color: #FFFFFF\">        </span><span style=\"color: #FAC863\">header</span><span style=\"color: #FFFFFF\">(</span><span style=\"color: #50E3C2\">\"Content-type: text/csv\"</span><span style=\"color: #FFFFFF\">)</span><span style=\"color: #EFEFEF\">;</span>\n<span style=\"color: #FFFFFF\">        </span><span style=\"color: #FAC863\">header</span><span style=\"color: #FFFFFF\">(</span><span style=\"color: #50E3C2\">\"Content-Disposition: 'attachment; filename=</span><span style=\"color: #EFEFEF\">{$</span><span style=\"color: #FFFFFF\">filename</span><span style=\"color: #EFEFEF\">}</span><span style=\"color: #50E3C2\">'\"</span><span style=\"color: #FFFFFF\">)</span><span style=\"color: #EFEFEF\">;</span>\n\n<span style=\"color: #EFEFEF\">        </span><span style=\"color: #888\">// 3. Stream file CSV</span>\n<span style=\"color: #FFFFFF\">        </span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">csv </span><span style=\"color: #EFEFEF\">=</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #FAC863\">fopen</span><span style=\"color: #FFFFFF\">(</span><span style=\"color: #50E3C2\">\"php://output\"</span><span style=\"color: #FFFFFF\">, </span><span style=\"color: #50E3C2\">\"w+\"</span><span style=\"color: #FFFFFF\">)</span><span style=\"color: #EFEFEF\">;</span>\n<span style=\"color: #EFEFEF\">        </span><span style=\"color: #888\">// 3.a. Tulis table header</span>\n<span style=\"color: #FFFFFF\">        </span><span style=\"color: #FAC863\">fputcsv</span><span style=\"color: #FFFFFF\">(</span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">csv, </span><span style=\"color: #EFEFEF\">[</span><span style=\"color: #50E3C2\">\"Time\"</span><span style=\"color: #FFFFFF\">, </span><span style=\"color: #50E3C2\">\"User ID\"</span><span style=\"color: #FFFFFF\">, </span><span style=\"color: #50E3C2\">\"Message\"</span><span style=\"color: #FFFFFF\">, </span><span style=\"color: #50E3C2\">\"IP Address\"</span><span style=\"color: #FFFFFF\">, </span><span style=\"color: #50E3C2\">\"User Agent\"</span><span style=\"color: #EFEFEF\">]</span><span style=\"color: #FFFFFF\">)</span><span style=\"color: #EFEFEF\">;</span>\n<span style=\"color: #EFEFEF\">        </span><span style=\"color: #888\">// 3.b. Tulis baris setiap log</span>\n<span style=\"color: #FFFFFF\">        </span><span style=\"color: #FF0078\">foreach</span><span style=\"color: #FFFFFF\"> (</span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">logs </span><span style=\"color: #EFEFEF\">as</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">log) </span><span style=\"color: #EFEFEF\">{</span>\n<span style=\"color: #FFFFFF\">            </span><span style=\"color: #FAC863\">fputcsv</span><span style=\"color: #FFFFFF\">(</span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">csv, </span><span style=\"color: #EFEFEF\">[</span>\n<span style=\"color: #FFFFFF\">                </span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">log</span><span style=\"color: #EFEFEF\">-&gt;</span><span style=\"color: #FFFFFF\">time,</span>\n<span style=\"color: #FFFFFF\">                </span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">log</span><span style=\"color: #EFEFEF\">-&gt;</span><span style=\"color: #FFFFFF\">user_id,</span>\n<span style=\"color: #FFFFFF\">                </span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">log</span><span style=\"color: #EFEFEF\">-&gt;</span><span style=\"color: #FFFFFF\">message,</span>\n<span style=\"color: #FFFFFF\">                </span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">log</span><span style=\"color: #EFEFEF\">-&gt;</span><span style=\"color: #FFFFFF\">ip_address,</span>\n<span style=\"color: #FFFFFF\">                </span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">log</span><span style=\"color: #EFEFEF\">-&gt;</span><span style=\"color: #FFFFFF\">user_agent</span>\n<span style=\"color: #FFFFFF\">            </span><span style=\"color: #EFEFEF\">]</span><span style=\"color: #FFFFFF\">)</span><span style=\"color: #EFEFEF\">;</span>\n<span style=\"color: #FFFFFF\">        </span><span style=\"color: #EFEFEF\">}</span>\n<span style=\"color: #EFEFEF\">        </span><span style=\"color: #888\">// 3.c. Tutup file</span>\n<span style=\"color: #FFFFFF\">        </span><span style=\"color: #FAC863\">fclose</span><span style=\"color: #FFFFFF\">(</span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">csv)</span><span style=\"color: #EFEFEF\">;</span>\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #EFEFEF\">}</span>\n\n<span style=\"color: #EFEFEF\">}</span></code></pre>\n<p>Selesai. Dengan begitu, ketika kamu mengakses <code>https://appkamu.com/log-activities/export</code>,\naplikasi kamu akan mengirimkan response berupa streaming file CSV yang berisi semua data didalam <code>log_activities</code>\ntanpa harus mengalami beban memori yang tinggi.</p>\n<hr>\n<p>Ngomong-ngomong, cara diatas adalah cara yang agak native karena kita langsung menggunakan fungsi <code>header</code> bawaan PHP.\nSaya tulis seperti itu supaya kamu tahu cara di native atau di framework lain seperti apa.\nKalau kamu penasaran cara yang \"lebih\" ke-Laravel-an, kamu dapat menggunakan fungsi <code>streamDownload</code> seperti dibawah ini:</p>\n<pre class=\"shiki\" style=\"background-color: #191d21\"><code><span style=\"color: #EFEFEF\">&lt;?php</span>\n\n<span style=\"color: #FF0078\">namespace</span><span style=\"color: #FFFFFF\"> App</span><span style=\"color: #EFEFEF\">\\</span><span style=\"color: #FFFFFF\">Http</span><span style=\"color: #EFEFEF\">\\</span><span style=\"color: #FFFFFF\">Controllers</span><span style=\"color: #EFEFEF\">;</span>\n\n<span style=\"color: #FF0078\">use</span><span style=\"color: #FFFFFF\"> App</span><span style=\"color: #EFEFEF\">\\</span><span style=\"color: #FFFFFF\">Models</span><span style=\"color: #EFEFEF\">\\</span><span style=\"color: #FFFFFF\">LogActivity</span><span style=\"color: #EFEFEF\">;</span>\n<span style=\"color: #FF0078\">use</span><span style=\"color: #FFFFFF\"> Illuminate</span><span style=\"color: #EFEFEF\">\\</span><span style=\"color: #FFFFFF\">Http</span><span style=\"color: #EFEFEF\">\\</span><span style=\"color: #FFFFFF\">Request</span><span style=\"color: #EFEFEF\">;</span>\n\n<span style=\"color: #2BA8FF\">class</span><span style=\"color: #FFFFFF\"> LogActivityController </span><span style=\"color: #2BA8FF\">extends</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #2BA8FF\">Controller</span>\n<span style=\"color: #EFEFEF\">{</span>\n\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #2BA8FF\">public</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #2BA8FF\">function</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #2BA8FF\">export</span><span style=\"color: #EFEFEF\">()</span>\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #EFEFEF\">{</span>\n<span style=\"color: #FFFFFF\">        </span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">logs </span><span style=\"color: #EFEFEF\">=</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #2BA8FF\">LogActivity</span><span style=\"color: #EFEFEF\">::</span><span style=\"color: #FFFFFF\">orderBy(</span><span style=\"color: #50E3C2\">'time'</span><span style=\"color: #FFFFFF\">)</span><span style=\"color: #EFEFEF\">-&gt;</span><span style=\"color: #FFFFFF\">cursor()</span><span style=\"color: #EFEFEF\">;</span>\n<span style=\"color: #FFFFFF\">        </span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">filename </span><span style=\"color: #EFEFEF\">=</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #50E3C2\">\"log-activities.csv\"</span><span style=\"color: #EFEFEF\">;</span>\n\n<span style=\"color: #FFFFFF\">        </span><span style=\"color: #FF0078\">return</span><span style=\"color: #FFFFFF\"> response()</span><span style=\"color: #EFEFEF\">-&gt;</span><span style=\"color: #FFFFFF\">streamDownload(</span><span style=\"color: #2BA8FF\">function</span><span style=\"color: #EFEFEF\">()</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #FF0078\">use</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">($</span><span style=\"color: #FFFFFF\">logs</span><span style=\"color: #EFEFEF\">)</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">{</span>\n<span style=\"color: #FFFFFF\">            </span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">csv </span><span style=\"color: #EFEFEF\">=</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #FAC863\">fopen</span><span style=\"color: #FFFFFF\">(</span><span style=\"color: #50E3C2\">\"php://output\"</span><span style=\"color: #FFFFFF\">, </span><span style=\"color: #50E3C2\">\"w+\"</span><span style=\"color: #FFFFFF\">)</span><span style=\"color: #EFEFEF\">;</span>\n\n<span style=\"color: #FFFFFF\">            </span><span style=\"color: #FAC863\">fputcsv</span><span style=\"color: #FFFFFF\">(</span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">csv, </span><span style=\"color: #EFEFEF\">[</span><span style=\"color: #50E3C2\">\"Time\"</span><span style=\"color: #FFFFFF\">, </span><span style=\"color: #50E3C2\">\"User ID\"</span><span style=\"color: #FFFFFF\">, </span><span style=\"color: #50E3C2\">\"Message\"</span><span style=\"color: #FFFFFF\">, </span><span style=\"color: #50E3C2\">\"IP Address\"</span><span style=\"color: #FFFFFF\">, </span><span style=\"color: #50E3C2\">\"User Agent\"</span><span style=\"color: #EFEFEF\">]</span><span style=\"color: #FFFFFF\">)</span><span style=\"color: #EFEFEF\">;</span>\n\n<span style=\"color: #FFFFFF\">            </span><span style=\"color: #FF0078\">foreach</span><span style=\"color: #FFFFFF\"> (</span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">logs </span><span style=\"color: #EFEFEF\">as</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">log) </span><span style=\"color: #EFEFEF\">{</span>\n<span style=\"color: #FFFFFF\">                </span><span style=\"color: #FAC863\">fputcsv</span><span style=\"color: #FFFFFF\">(</span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">csv, </span><span style=\"color: #EFEFEF\">[</span>\n<span style=\"color: #FFFFFF\">                    </span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">log</span><span style=\"color: #EFEFEF\">-&gt;</span><span style=\"color: #FFFFFF\">time,</span>\n<span style=\"color: #FFFFFF\">                    </span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">log</span><span style=\"color: #EFEFEF\">-&gt;</span><span style=\"color: #FFFFFF\">user_id,</span>\n<span style=\"color: #FFFFFF\">                    </span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">log</span><span style=\"color: #EFEFEF\">-&gt;</span><span style=\"color: #FFFFFF\">message,</span>\n<span style=\"color: #FFFFFF\">                    </span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">log</span><span style=\"color: #EFEFEF\">-&gt;</span><span style=\"color: #FFFFFF\">ip_address,</span>\n<span style=\"color: #FFFFFF\">                    </span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">log</span><span style=\"color: #EFEFEF\">-&gt;</span><span style=\"color: #FFFFFF\">user_agent</span>\n<span style=\"color: #FFFFFF\">                </span><span style=\"color: #EFEFEF\">]</span><span style=\"color: #FFFFFF\">)</span><span style=\"color: #EFEFEF\">;</span>\n<span style=\"color: #FFFFFF\">            </span><span style=\"color: #EFEFEF\">}</span>\n\n<span style=\"color: #FFFFFF\">            </span><span style=\"color: #FAC863\">fclose</span><span style=\"color: #FFFFFF\">(</span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">csv)</span><span style=\"color: #EFEFEF\">;</span>\n<span style=\"color: #FFFFFF\">        </span><span style=\"color: #EFEFEF\">}</span><span style=\"color: #FFFFFF\">, </span><span style=\"color: #EFEFEF\">$</span><span style=\"color: #FFFFFF\">filename, </span><span style=\"color: #EFEFEF\">[</span><span style=\"color: #50E3C2\">\"Content-type\"</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">=&gt;</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #50E3C2\">\"text/csv\"</span><span style=\"color: #EFEFEF\">]</span><span style=\"color: #FFFFFF\">)</span><span style=\"color: #EFEFEF\">;</span>\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #EFEFEF\">}</span>\n\n<span style=\"color: #EFEFEF\">}</span></code></pre>\n<hr>\n<p>Seperti itulah cara melakukan export CSV secara aman di Laravel. Kalau ada saran, masukan, atau pertanyaan, silahkan kontak facebook saya.\nAkhir kata, semoga bermanfaat.</p>\n","excerpt":"","description":"Bagaimana memanfaatkan generator dan streaming CSV untuk export jutaan data secara aman.","path":"/artikel/export-jutaan-data-ke-csv-dengan-aman-di-laravel/","cover":"/images/posts/export-jutaan-data-ke-csv-dengan-aman-di-laravel.png","icon":"/images/icons/laravel.png","tags":[{"id":"Laravel","title":"Laravel","path":"/tag/Laravel/"},{"id":"PHP","title":"PHP","path":"/tag/PHP/"}],"author":{"id":"Muhammad Syifa","title":"Muhammad Syifa","path":"/author/Muhammad%20Syifa/"}}},{"node":{"id":"be8e7a02e0533f43d78409c7df8d067e","title":"Redis University RU202 - Minggu Ke-2","datetime":"2019-08-23 11:00:00","content":"<p>Ini adalah catatan minggu ke-2 dari apa yang saya pelajari di kelas RU202-nya <a href=\"https://university.redislabs.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Redis University</a> yang berjudul <strong>\"Redis Streams\"</strong>.</p>\n<p>Pada minggu ke-2 ini topik pembahasannya adalah:</p>\n<ol>\n<li>Producer</li>\n<li>Range Queries</li>\n<li>The Consumer</li>\n</ol>\n<h2 id=\"1-producer\"><a href=\"#1-producer\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Producer</h2>\n<p>Pada bagian ini dijelaskan panjang lebar mengenai <em>stream producer</em>, disini saya rangkum saja kedalam beberapa poin dibawah ini: </p>\n<ul>\n<li><em>Stream Producer</em> adalah software/aplikasi yang berperan sebagai pengirim data kedalam stream.</li>\n<li>Data di dalam stream disebut sebagai 'message'.</li>\n<li><em>Stream Producer</em> menggunakan Redis Client API untuk memasukkan message kedalam stream.</li>\n<li>Pada Redis CLI, kita bisa menggunakan perintah <code>XADD stream_name message_id field value [field_2 value_2 ... field_n value_n]</code> untuk menambahkan message kedalam stream. Contoh untuk mengirim data temperatur kedalam stream: <code>XADD temperature * celcius 39</code>.</li>\n</ul>\n<h4 id=\"message-id\"><a href=\"#message-id\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Message ID</h4>\n<ul>\n<li>Untuk generate message ID secara otomatis, gunakan <code>*</code> (seperti contoh diatas). </li>\n<li>Message ID tidak dapat diubah.</li>\n<li>\n<p>Contoh message ID hasil generate: <code>1566533258158-0</code></p>\n<ul>\n<li><code>1566533258158</code>: <em>millisecond-timestamp</em>.</li>\n<li><code>0</code>: <em>sub-millisecond-sequence</em>, jika terdapat pesan dalam <em>millisecond-timestamp</em> yang sama, maka angka ini bertambah. Dan angka ini akan 0 kembali pada <em>millisecond-timestamp</em> yang berbeda.</li>\n</ul>\n</li>\n<li>\n<p>Contoh membuat message ID secara manual: <code>XADD mystream 100 x 1</code>.</p>\n<ul>\n<li>Message ID harus berupa unsigned integer (paling kecil 0).</li>\n<li>Hasil ID digenerate: <code>100-0</code> dimana <code>0</code> adalah urutan dari id <code>100</code>.</li>\n<li>Catatan: setelah menambahkan message dengan ID 100 kedalam stream mystream, maka kita tidak dapat menambahkan message dengan ID dibawah 100 kedalam stream mystream tersebut.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"message-payload\"><a href=\"#message-payload\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Message Payload</h4>\n<ul>\n<li>Message payload pada Redis Stream memiliki struktur data seperti hash (<code>Map&#x3C;String, String></code>).</li>\n<li>Tidak ada batasan berapa field yang dapat disimpan didalam setiap message.</li>\n<li>\n<p>Redis akan secara otomatis melakukan kompresi pada nama field di stream yang sama, contoh:</p>\n<ul>\n<li><code>XADD coordinates * latitude 0.1 longitude 1.0</code></li>\n<li><code>XADD coordinates * latitude 0.2 longitude 1.0</code></li>\n<li><code>XADD coordinates * latitude 0.3 longitude 1.1</code></li>\n<li>Pada 3 perintah <code>XADD</code> diatas, maka redis tidak akan menyimpan nama field <code>latitude</code> dan <code>longitude</code> pada 2 perintah <code>XADD</code> bawahnya.</li>\n<li>Tapi, jika perintah <code>XADD</code> selanjutnya memiliki field yang berbeda, entah ditambah field baru, atau ada field yang berubah, maka redis akan menyimpan nama field message tersebut secara utuh.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"managing-the-length-of-a-stream\"><a href=\"#managing-the-length-of-a-stream\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Managing the Length of a Stream</h4>\n<p>Untuk membatasi banyaknya message pada stream supaya tidak terlalu bengkak, dapat gunakan beberapa cara berikut:</p>\n<ol>\n<li>Gunakan <code>XADD</code> dengan <code>MAXLEN</code>. Contoh <code>XADD mystream * foo bar MAXLEN 1000</code>, maka jika ini adalah message yang ke-1001, message paling lama akan dihapus sehingga jumlah messagenya menjadi 1000.</li>\n<li>Gunakan perintah <code>XDEL</code>. Cara ini tidak dianjurkan karena tidak efektif.</li>\n<li>Gunakan perintah <code>XTRIM</code>. Contoh <code>XTRIM mystream MAXLEN 1000</code>, maka message ke 1001 sampai dengan yang paling lama akan dihapus.</li>\n</ol>\n<p>Yang saya masih bingung setelah melakukan proses diatas, message pada stream memang betul akan hilang,\ndalam artian ketika kita gunakan <code>XRANGE mystream - +</code> message yang terhapus tidak lagi muncul. Tetapi saat digunakan <code>MEMORY USAGE mystream</code>, memori yang terpakai masih sama. Dia ngasih tau sih memang saat menghapus message pada stream, message tidak secara langsung hilang, melainkan hanya diberi flag \"deleted\". Cuma yang masih belum saya tau, kapan memori tersebut benar-benar dihapus?</p>\n<p>Selain cara diatas, sebetulnya ada cara lain yang disarankan, yaitu menggunakan <code>XTRIM mystream MAXLEN ~ 1000</code>, atau <code>XADD mystream * foo bar MAXLEN ~ 1000</code>, ini penjelasan mereka tentang tanga <code>~</code>:</p>\n<blockquote>\n<p>The ~ argument between the MAXLEN option and the actual count means that the user is not really requesting that the stream length is exactly 1000 items, but instead it could be a few tens of entries more, but never less than 1000 items. When this option modifier is used, the trimming is performed only when Redis is able to remove a whole macro node. This makes it much more efficient, and it is usually what you want.</p>\n</blockquote>\n<p>Kenapa saya tidak masukkan cara ini di list, karena saya belum mengerti betul cara kerja si <code>~</code> itu.\nDisitu tertulis \"could be a few tens of entries more\", jadi saya coba buat stream dengan 100 message, dengan harapan setelah saya coba <code>XTRIM mystream MAXLEN ~ 10</code> maka akan menghapus <code>mystream</code> menjadi 10-50 message (few tens more). Tapi ternyata tidak terjadi apa-apa, <code>XLEN mystream</code> masih tetap 100.</p>\n<p>Entahlah, mungkin kalau messagenya ribuan bakal dihapus. Mungkin.</p>\n<h2 id=\"2-range-queries\"><a href=\"#2-range-queries\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Range Queries</h2>\n<p>Untuk mengambil  message dalam range ID tertentu, dapat menggunakan perintah <code>XRANGE</code> dan <code>XREVRANGE</code>. Perbedaannya adalah <code>XRANGE</code> akan mengambil message dan mengurutkannya secara <em>ascending</em> (dari paling awal), <code>XREVRANGE</code> akan mengambil message dan mengurutkannya secara <em>descending</em> (dari paling akhir).</p>\n<p>Berikut contoh-contoh penggunaan <code>XRANGE</code> dan <code>XREVRANGE</code>:</p>\n<pre class=\"shiki\" style=\"background-color: #191d21\"><code><span style=\"color: #888\"># Beberapa cara mengambil semua message di dalam mystream</span>\n<span style=\"color: #FFFFFF\">XRANGE mystream - +</span>\n<span style=\"color: #FFFFFF\">XRANGE mystream 0-0 +</span>\n\n<span style=\"color: #888\"># Mengambil semua message dari 1526985054069-0 s/d data terakhir di dalam mystream</span>\n<span style=\"color: #FFFFFF\">XRANGE mystream 1526985054069-0 +</span>\n\n<span style=\"color: #888\"># Mengambil semua message diantara 1526985054069-0 s/d 1531243452312-0 terakhir di dalam mystream</span>\n<span style=\"color: #FFFFFF\">XRANGE mystream 1526985054069-0 1531243452312-0</span>\n\n<span style=\"color: #888\"># Mengambil 10 message PERTAMA dari mystream</span>\n<span style=\"color: #FFFFFF\">XRANGE mystream - + COUNT 10</span>\n\n<span style=\"color: #888\"># Mengambil 10 message TERAKHIR dari mystream</span>\n<span style=\"color: #FFFFFF\">XREVRANGE mystream + - COUNT 10</span></code></pre>\n<p>Tanda <code>-</code> dan <code>+</code> adalah special ID, <code>-</code> adalah alias untuk ID awal (0-0), sedangkan <code>+</code> adalah alias untuk ID terakhir (18446744073709551615-18446744073709551615).</p>\n<h2 id=\"3-the-consumer\"><a href=\"#3-the-consumer\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. The Consumer</h2>\n<p>Untuk men-<em>consume</em> data pada stream, dapat menggunakan perintah <code>XREAD</code>. Berikut adalah beberapa contoh penggunaan <code>XREAD</code>.</p>\n<pre class=\"shiki\" style=\"background-color: #191d21\"><code><span style=\"color: #FFFFFF\">XREAD COUNT 1 STREAMS mystream</span></code></pre>\n","excerpt":"","description":"Catatan kelas Redis University RU102 minggu ke-2","path":"/artikel/redis-university-ru202-minggu-ke-2/","cover":"/images/posts/ru202-w2-cover.png","icon":"/images/icons/redis.png","tags":[{"id":"Redis University","title":"Redis University","path":"/tag/Redis%20University/"},{"id":"Course","title":"Course","path":"/tag/Course/"},{"id":"RU202","title":"RU202","path":"/tag/RU202/"}],"author":{"id":"Muhammad Syifa","title":"Muhammad Syifa","path":"/author/Muhammad%20Syifa/"}}},{"node":{"id":"821c2e8957c9f9558e8a4bf1e2c0c961","title":"Redis University RU201 - Minggu Ke-2","datetime":"2019-08-20 10:00:00","content":"<p>Ini adalah catatan minggu ke-2 dari apa yang saya pelajari di kelas RU201-nya <a href=\"https://university.redislabs.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Redis University</a> yang berjudul <strong>\"RediSearch\"</strong>.</p>\n<p>Pada minggu ke-2 topik pembahasannya adalah seputar penggunaan query pada RediSearch.</p>\n<p>Bingung juga mau nyatetnya gimana, langsung ke contoh querynya ajalah ya.\nBtw query <code>SELECT</code> yang saya tulis pada komentar dibawah itu bukan SQL beneran, semacam <em>pseudo-code</em> SQL aja.</p>\n<pre class=\"shiki\" style=\"background-color: #191d21\"><code><span style=\"color: #888\"># Membuat index articles, ini sama kayak buat table di RDBMS</span>\n<span style=\"color: #FFFFFF\">FT.CREATE articles SCHEMA title TEXT WEIGHT 5.0 body TEXT author_name TEXT</span>\n\n<span style=\"color: #888\"># Menambahkan artikel ke index articles, ini sama kayak insert data ke table</span>\n<span style=\"color: #888\"># Syntax: FT.ADD index_name id score FIELDS field value [{field} {value}...]</span>\n<span style=\"color: #FFFFFF\">FT.ADD articles articles 123 0.5 FIELDS title </span><span style=\"color: #50E3C2\">\"Lorem Ipsum\"</span><span style=\"color: #FFFFFF\"> body </span><span style=\"color: #50E3C2\">\"Lorem ipsum dolor sit amet\"</span><span style=\"color: #FFFFFF\"> author_name </span><span style=\"color: #50E3C2\">\"John Doe\"</span>\n\n<span style=\"color: #888\"># SELECT * FROM articles WHERE somehow match \"lorem\"</span>\n<span style=\"color: #FFFFFF\">FT.SEARCH articles </span><span style=\"color: #50E3C2\">\"lorem\"</span><span style=\"color: #FFFFFF\"> LIMIT 0 10</span>\n<span style=\"color: #FFFFFF\">1) </span><span style=\"color: #EFEFEF\">(</span><span style=\"color: #FFFFFF\">integer</span><span style=\"color: #EFEFEF\">)</span><span style=\"color: #FFFFFF\"> 1  </span><span style=\"color: #888\"># count</span>\n<span style=\"color: #FFFFFF\">2) </span><span style=\"color: #50E3C2\">\"123\"</span><span style=\"color: #FFFFFF\">        </span><span style=\"color: #888\"># ID</span>\n<span style=\"color: #FFFFFF\">3) 1) </span><span style=\"color: #50E3C2\">\"title\"</span>\n<span style=\"color: #FFFFFF\">   2) </span><span style=\"color: #50E3C2\">\"Lorem Ipsum\"</span>\n<span style=\"color: #FFFFFF\">   3) </span><span style=\"color: #50E3C2\">\"body\"</span>\n<span style=\"color: #FFFFFF\">   4) </span><span style=\"color: #50E3C2\">\"Lorem ipsum dolor sit amet\"</span>\n<span style=\"color: #FFFFFF\">   5) </span><span style=\"color: #50E3C2\">\"author_name\"</span>\n<span style=\"color: #FFFFFF\">   6) </span><span style=\"color: #50E3C2\">\"John Doe\"</span>\n\n<span style=\"color: #888\"># SELECT * FROM articles WHERE somehow match \"lorem\" OR \"ipsum\"</span>\n<span style=\"color: #FFFFFF\">FT.SEARCH articles </span><span style=\"color: #50E3C2\">\"lorem|ipsum\"</span>\n\n<span style=\"color: #888\"># SELECT * FROM articles WHERE somehow match \"lorem\" AND \"ipsum\"</span>\n<span style=\"color: #FFFFFF\">FT.SEARCH articles </span><span style=\"color: #50E3C2\">\"lorem ipsum\"</span>\n\n<span style=\"color: #888\"># SELECT * FROM articles WHERE somehow match \"lorem ipsum\"</span>\n<span style=\"color: #FFFFFF\">FT.SEARCH articles </span><span style=\"color: #50E3C2\">\"</span><span style=\"color: #5392DB\">\\\"</span><span style=\"color: #50E3C2\">lorem ipsum</span><span style=\"color: #5392DB\">\\\"</span><span style=\"color: #50E3C2\">\"</span>\n\n<span style=\"color: #888\"># SELECT * FROM articles WHERE somehow match \"lorem\" AND not contains \"ipsum\"</span>\n<span style=\"color: #FFFFFF\">FT.SEARCH articles </span><span style=\"color: #50E3C2\">\"lorem -ipsum\"</span>\n\n<span style=\"color: #888\"># SELECT * FROM articles WHERE somehow match \"lorem\" OR not contains \"ipsum\"</span>\n<span style=\"color: #FFFFFF\">FT.SEARCH articles </span><span style=\"color: #50E3C2\">\"lorem|-ipsum\"</span>\n\n<span style=\"color: #888\"># SELECT * FROM articles WHERE anyfields LIKE \"lorem%\"</span>\n<span style=\"color: #FFFFFF\">FT.SEARCH articles </span><span style=\"color: #50E3C2\">\"lorem*\"</span>\n\n<span style=\"color: #888\"># SELECT * FROM articles WHERE levehnstein(index) sounds like \"lorem\"</span>\n<span style=\"color: #FFFFFF\">FT.SEARCH articles </span><span style=\"color: #50E3C2\">\"%lorem%\"</span>\n\n<span style=\"color: #888\"># SELECT * FROM articles WHERE (somehow match \"lorem\" AND \"ipsum\") OR somehow match \"foo\"</span>\n<span style=\"color: #FFFFFF\">FT.SEARCH articles </span><span style=\"color: #50E3C2\">\"(lorem ipsum)|foo\"</span>\n\n<span style=\"color: #888\"># SELECT * FROM articles WHERE (somehow match \"lorem\" AND \"ipsum\") OR (somehow match \"foo\" AND \"bar\")</span>\n<span style=\"color: #FFFFFF\">FT.SEARCH articles </span><span style=\"color: #50E3C2\">\"(lorem ipsum)|(foo bar)\"</span>\n\n<span style=\"color: #888\"># SELECT * FROM articles WHERE (somehow match \"lorem\" AND \"ipsum\") OR not contains \"foo\"</span>\n<span style=\"color: #FFFFFF\">FT.SEARCH articles </span><span style=\"color: #50E3C2\">\"(lorem ipsum)|-foo\"</span></code></pre>\n<p>Dokumentasi selengkapnya tentang <code>FT.CREATE</code>, <code>FT.ADD</code>, dan <code>FT.SEARCH</code> bisa dilihat pada link dibawah ini:</p>\n<ul>\n<li><a href=\"https://oss.redislabs.com/redisearch/Commands/#ftcreate\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FT.CREATE</a></li>\n<li><a href=\"https://oss.redislabs.com/redisearch/Commands/#ftadd\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FT.ADD</a></li>\n<li><a href=\"https://oss.redislabs.com/redisearch/Commands/#ftsearch\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FT.SEARCH</a></li>\n</ul>\n<p>Selanjutnya adalah memahami hasi dari <code>FT.EXPLAIN</code>. Buat kamu yang terbiasa dengan RDBMS mungkin sudah familiar dengan perintah <code>explain</code>, ya perintah ini digunakan untuk menjabarkan query. Di RediSearch sendiri <code>FT.EXPLAIN</code> ini digunakan untuk menjabarkan query pencarian (<code>FT.SEARCH</code>).</p>\n<p>Berikut adalah contoh penggunaan <code>FT.EXPLAIN</code> beserta penjelasannya.</p>\n<pre class=\"shiki\" style=\"background-color: #191d21\"><code><span style=\"color: #FFFFFF\">FT.EXPLAIN articles </span><span style=\"color: #50E3C2\">\"lorem ipsum\"</span>\n<span style=\"color: #FFFFFF\">INTERSECT </span><span style=\"color: #EFEFEF\">{</span>\n<span style=\"color: #FFFFFF\">  UNION </span><span style=\"color: #EFEFEF\">{</span><span style=\"color: #FFFFFF\"> </span>\n<span style=\"color: #FFFFFF\">    lorem</span>\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #EFEFEF\">&lt;</span><span style=\"color: #FFFFFF\">LRM</span><span style=\"color: #EFEFEF\">(</span><span style=\"color: #FFFFFF\">expanded</span><span style=\"color: #EFEFEF\">)</span>\n<span style=\"color: #FFFFFF\">    +lorem</span><span style=\"color: #EFEFEF\">(</span><span style=\"color: #FFFFFF\">expanded</span><span style=\"color: #EFEFEF\">)</span>\n<span style=\"color: #FFFFFF\">  </span><span style=\"color: #EFEFEF\">}</span>\n<span style=\"color: #FFFFFF\">  UNION </span><span style=\"color: #EFEFEF\">{</span>\n<span style=\"color: #FFFFFF\">    ipsum</span>\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #EFEFEF\">&lt;</span><span style=\"color: #FFFFFF\">APSM</span><span style=\"color: #EFEFEF\">(</span><span style=\"color: #FFFFFF\">expanded</span><span style=\"color: #EFEFEF\">)</span>\n<span style=\"color: #FFFFFF\">    +ipsum</span><span style=\"color: #EFEFEF\">(</span><span style=\"color: #FFFFFF\">expanded</span><span style=\"color: #EFEFEF\">)</span>\n<span style=\"color: #FFFFFF\">  </span><span style=\"color: #EFEFEF\">}</span>\n<span style=\"color: #EFEFEF\">}</span></code></pre>\n<p>Haduh, gimana jelasinnya ya. Mesti pakai gambar ini. Nanti deh saya buatin.\nSementara silahkan bandingin sendiri aja sama hasil explain dibawah ini:</p>\n<pre class=\"shiki\" style=\"background-color: #191d21\"><code><span style=\"color: #FFFFFF\">FT.EXPLAIN articles </span><span style=\"color: #50E3C2\">\"lorem\"</span>\n<span style=\"color: #FFFFFF\">UNION </span><span style=\"color: #EFEFEF\">{</span>\n<span style=\"color: #FFFFFF\">  lorem</span>\n<span style=\"color: #FFFFFF\">  </span><span style=\"color: #EFEFEF\">&lt;</span><span style=\"color: #FFFFFF\">LRM</span><span style=\"color: #EFEFEF\">(</span><span style=\"color: #FFFFFF\">expanded</span><span style=\"color: #EFEFEF\">)</span>\n<span style=\"color: #FFFFFF\">  +lorem</span><span style=\"color: #EFEFEF\">(</span><span style=\"color: #FFFFFF\">expanded</span><span style=\"color: #EFEFEF\">)</span>\n<span style=\"color: #EFEFEF\">}</span>\n\n<span style=\"color: #FFFFFF\">FT.EXPLAIN articles </span><span style=\"color: #50E3C2\">\"lorem|ipsum\"</span>\n<span style=\"color: #FFFFFF\">UNION </span><span style=\"color: #EFEFEF\">{</span>\n<span style=\"color: #FFFFFF\">  UNION </span><span style=\"color: #EFEFEF\">{</span>\n<span style=\"color: #FFFFFF\">    lorem</span>\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #EFEFEF\">&lt;</span><span style=\"color: #FFFFFF\">LRM</span><span style=\"color: #EFEFEF\">(</span><span style=\"color: #FFFFFF\">expanded</span><span style=\"color: #EFEFEF\">)</span>\n<span style=\"color: #FFFFFF\">    +lorem</span><span style=\"color: #EFEFEF\">(</span><span style=\"color: #FFFFFF\">expanded</span><span style=\"color: #EFEFEF\">)</span>\n<span style=\"color: #FFFFFF\">  </span><span style=\"color: #EFEFEF\">}</span>\n<span style=\"color: #FFFFFF\">  UNION </span><span style=\"color: #EFEFEF\">{</span>\n<span style=\"color: #FFFFFF\">    ipsum</span>\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #EFEFEF\">&lt;</span><span style=\"color: #FFFFFF\">APSM</span><span style=\"color: #EFEFEF\">(</span><span style=\"color: #FFFFFF\">expanded</span><span style=\"color: #EFEFEF\">)</span>\n<span style=\"color: #FFFFFF\">    +ipsum</span><span style=\"color: #EFEFEF\">(</span><span style=\"color: #FFFFFF\">expanded</span><span style=\"color: #EFEFEF\">)</span>\n<span style=\"color: #FFFFFF\">  </span><span style=\"color: #EFEFEF\">}</span>\n<span style=\"color: #EFEFEF\">}</span>\n\n<span style=\"color: #FFFFFF\">FT.EXPLAIN articles </span><span style=\"color: #50E3C2\">\"</span><span style=\"color: #5392DB\">\\\"</span><span style=\"color: #50E3C2\">lorem</span><span style=\"color: #5392DB\">\\\"</span><span style=\"color: #50E3C2\">\"</span>\n<span style=\"color: #50E3C2\">\"lorem\"</span>\n\n<span style=\"color: #FFFFFF\">FT.EXPLAIN articles </span><span style=\"color: #50E3C2\">\"</span><span style=\"color: #5392DB\">\\\"</span><span style=\"color: #50E3C2\">lorem</span><span style=\"color: #5392DB\">\\\"</span><span style=\"color: #50E3C2\">|ipsum\"</span>\n<span style=\"color: #FFFFFF\">UNION </span><span style=\"color: #EFEFEF\">{</span>\n<span style=\"color: #FFFFFF\">  lorem</span>\n<span style=\"color: #FFFFFF\">  UNION </span><span style=\"color: #EFEFEF\">{</span>\n<span style=\"color: #FFFFFF\">    ipsum</span>\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #EFEFEF\">&lt;</span><span style=\"color: #FFFFFF\">APSM</span><span style=\"color: #EFEFEF\">(</span><span style=\"color: #FFFFFF\">expanded</span><span style=\"color: #EFEFEF\">)</span>\n<span style=\"color: #FFFFFF\">    +ipsum</span><span style=\"color: #EFEFEF\">(</span><span style=\"color: #FFFFFF\">expanded</span><span style=\"color: #EFEFEF\">)</span>\n<span style=\"color: #FFFFFF\">  </span><span style=\"color: #EFEFEF\">}</span>\n<span style=\"color: #EFEFEF\">}</span>\n\n<span style=\"color: #FFFFFF\">FT.EXPLAIN articles </span><span style=\"color: #50E3C2\">\"</span><span style=\"color: #5392DB\">\\\"</span><span style=\"color: #50E3C2\">lorem</span><span style=\"color: #5392DB\">\\\"</span><span style=\"color: #50E3C2\"> ipsum\"</span>\n<span style=\"color: #FFFFFF\">INTERSECT </span><span style=\"color: #EFEFEF\">{</span>\n<span style=\"color: #FFFFFF\">  lorem</span>\n<span style=\"color: #FFFFFF\">  UNION </span><span style=\"color: #EFEFEF\">{</span>\n<span style=\"color: #FFFFFF\">    ipsum</span>\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #EFEFEF\">&lt;</span><span style=\"color: #FFFFFF\">APSM</span><span style=\"color: #EFEFEF\">(</span><span style=\"color: #FFFFFF\">expanded</span><span style=\"color: #EFEFEF\">)</span>\n<span style=\"color: #FFFFFF\">    +ipsum</span><span style=\"color: #EFEFEF\">(</span><span style=\"color: #FFFFFF\">expanded</span><span style=\"color: #EFEFEF\">)</span>\n<span style=\"color: #FFFFFF\">  </span><span style=\"color: #EFEFEF\">}</span>\n<span style=\"color: #EFEFEF\">}</span>\n\n<span style=\"color: #FFFFFF\">FT.EXPLAIN articles </span><span style=\"color: #50E3C2\">\"</span><span style=\"color: #5392DB\">\\\"</span><span style=\"color: #50E3C2\">lorem</span><span style=\"color: #5392DB\">\\\"</span><span style=\"color: #50E3C2\"> -ipsum\"</span>\n<span style=\"color: #FFFFFF\">INTERSECT </span><span style=\"color: #EFEFEF\">{</span>\n<span style=\"color: #FFFFFF\">  lorem</span>\n<span style=\"color: #FFFFFF\">  NOT{</span>\n<span style=\"color: #FFFFFF\">    ipsum</span>\n<span style=\"color: #FFFFFF\">  </span><span style=\"color: #EFEFEF\">}</span>\n<span style=\"color: #FFFFFF\">}</span></code></pre>\n<p>Dari beberapa hasil explain diatas, saya sih ngerti ya, soalnya sambil keinget sama penjelasan di videonya.\nCuma nanti kalau ada waktu saya coba gambarin pakai <em>venn diagram</em> deh.</p>\n<hr>\n<p>Yaudah segitu aja untuk minggu ke-2 di RU201. Saat saya nulis ini sebetulnya sudah masuk minggu ke-3, tapi mungkin saya akan nulis minggu ke-3 nanti di minggu ke-4. Jadi segitu aja catatan minggu ini, bye.</p>\n","excerpt":"","description":"Catatan kelas Redis University RU201 minggu ke-2","path":"/artikel/redis-university-ru201-minggu-ke-2/","cover":"/images/posts/ru201-w2-cover.png","icon":"/images/icons/redis.png","tags":[{"id":"Redis University","title":"Redis University","path":"/tag/Redis%20University/"},{"id":"Course","title":"Course","path":"/tag/Course/"},{"id":"RU201","title":"RU201","path":"/tag/RU201/"}],"author":{"id":"Muhammad Syifa","title":"Muhammad Syifa","path":"/author/Muhammad%20Syifa/"}}},{"node":{"id":"9434f7551f62142c1b60cc06f454eb56","title":"Redis University RU102J - Minggu Ke-2","datetime":"2019-08-18 09:00:00","content":"<p>Ini adalah catatan minggu ke-2 saya di kelas RU102J-nya Redis University.\nJika pada minggu pertama hanya sebatas setup java environment, java redis client dan perkenalan DAO pattern,\npada minggu ini kita mulai membuat aplikasi RediSolar.</p>\n<p>Spesifiknya, minggu ini topik pembahasannya adalah:</p>\n<ol>\n<li>Pengenalan Data Model</li>\n<li>Metrics with Sorted Sets</li>\n<li>Making Lua Script</li>\n<li>Pipelining with Jedis</li>\n<li>Transactions with Jedis</li>\n</ol>\n<h2 id=\"1-pengenalan-data-model\"><a href=\"#1-pengenalan-data-model\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Pengenalan Data Model</h2>\n<p>Data model ini sebetulnya sudah sedikit disinggung pada minggu pertama pada diagram DAO.\nCuma disini dicontohkan membuat data model untuk MeterReading (meteran).</p>\n<p>Jadi untuk membuat aplikasi RediSolar ini, kita membutuhkan data model class MeterReading dengan\nproperti seperti dibawah ini:</p>\n<pre class=\"shiki\" style=\"background-color: #191d21\"><code><span style=\"color: #2BA8FF\">public</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #2BA8FF\">class</span><span style=\"color: #FFFFFF\"> MeterReading </span><span style=\"color: #EFEFEF\">{</span>\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #2BA8FF\">private</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #2BA8FF\">Long</span><span style=\"color: #FFFFFF\"> siteId</span><span style=\"color: #EFEFEF\">;</span><span style=\"color: #FFFFFF\">            </span><span style=\"color: #888\">// ID lokasi (rumah)</span>\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #2BA8FF\">private</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #2BA8FF\">ZonedDateTime</span><span style=\"color: #FFFFFF\"> dateTime</span><span style=\"color: #EFEFEF\">;</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\">// waktu</span>\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #2BA8FF\">private</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #2BA8FF\">Double</span><span style=\"color: #FFFFFF\"> whUsed</span><span style=\"color: #EFEFEF\">;</span><span style=\"color: #FFFFFF\">          </span><span style=\"color: #888\">// daya digunakan</span>\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #2BA8FF\">private</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #2BA8FF\">Double</span><span style=\"color: #FFFFFF\"> whGenerated</span><span style=\"color: #EFEFEF\">;</span><span style=\"color: #FFFFFF\">     </span><span style=\"color: #888\">// daya digenerate</span>\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #2BA8FF\">private</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #2BA8FF\">Double</span><span style=\"color: #FFFFFF\"> tempC</span><span style=\"color: #EFEFEF\">;</span><span style=\"color: #FFFFFF\">           </span><span style=\"color: #888\">// suhu dalam celcius</span>\n<span style=\"color: #EFEFEF\">}</span></code></pre>\n<h2 id=\"2-metrics-with-sorted-sets\"><a href=\"#2-metrics-with-sorted-sets\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Metrics with Sorted Sets</h2>\n<p>Kemudian untuk menyimpan metric, struktur data yang digunakan adalah sorted sets dengan\nformat key dan value seperti dibawah ini:</p>\n<p>Format key:</p>\n<pre class=\"shiki\" style=\"background-color: #191d21\"><code><span style=\"color: #FFFFFF\">metrics:wHg:2020-01-01:1</span></code></pre>\n<p>Dimana:</p>\n<ul>\n<li><code>metrics</code>: prefix</li>\n<li><code>wHg</code>: unit (satuan)</li>\n<li><code>2020-01-01</code>: tanggal</li>\n<li><code>1</code>: site ID</li>\n</ul>\n<p>Sedangkan untuk struktur sorted setnya adalah sebagai berikut:</p>\n<ul>\n<li>score: menit</li>\n<li>value: nilai:menit</li>\n</ul>\n<p>Contoh, perintah <code>ZADD</code> dibawah ini maksudnya adalah:</p>\n<pre class=\"shiki\" style=\"background-color: #191d21\"><code><span style=\"color: #FFFFFF\">ZADD metrics:wHg:2020-01-01:1 30 18.5:30</span></code></pre>\n<ul>\n<li>Unit: wHg (watt hours generated)</li>\n<li>Tanggal: 2020-01-01</li>\n<li>Site ID: 1</li>\n<li>Menit: 30</li>\n<li>Nilai: 18.5</li>\n</ul>\n<p>Struktur seperti diatas digunakan karena:</p>\n<ol>\n<li>Pengukuran (metrics) akan secara otomatis disortir.</li>\n<li>Efisien untuk di fetch: O((log n) + m).</li>\n<li>Efisien untuk insert: O(log n).</li>\n<li>Hemat memori.</li>\n</ol>\n<h2 id=\"3-making-lua-script\"><a href=\"#3-making-lua-script\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. Making Lua Script</h2>\n<p>Topik pembahasan selanjutnya adalah tentang tata cara menjalankan script Lua pada Java untuk melakukan atomic transaction di Redis. Kalau di MySQL atau RDBMS lain mungkin kalian familiar dengan istilah stored procedure, nah si Lua disini perannya seperti itu.</p>\n<p>Sebagai contoh, kita ingin membuat script untuk mengupdate sebuah key, hanya jika key belum ada, atau nilai yang baru lebih rendah dari nilainya saat ini.</p>\n<p>Pertama kita harus persiapkan class <code>UpdateIfLowerScript</code> sebagai berikut (pahami sendiri):</p>\n<pre class=\"shiki\" style=\"background-color: #191d21\"><code><span style=\"color: #2BA8FF\">public</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #2BA8FF\">class</span><span style=\"color: #FFFFFF\"> UpdateIfLowerScript </span><span style=\"color: #EFEFEF\">{</span>\n\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #2BA8FF\">private</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #2BA8FF\">final</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #2BA8FF\">Jedis</span><span style=\"color: #FFFFFF\"> jedis</span><span style=\"color: #EFEFEF\">;</span>\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #2BA8FF\">private</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #2BA8FF\">final</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #2BA8FF\">String</span><span style=\"color: #FFFFFF\"> sha</span><span style=\"color: #EFEFEF\">;</span>\n\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #2BA8FF\">private</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #2BA8FF\">final</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #2BA8FF\">static</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #2BA8FF\">String</span><span style=\"color: #FFFFFF\"> script </span><span style=\"color: #EFEFEF\">=</span><span style=\"color: #FFFFFF\"> </span>\n<span style=\"color: #FFFFFF\">        </span><span style=\"color: #50E3C2\">\"local key = KEYS[1]\"</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">+</span><span style=\"color: #FFFFFF\">  </span>\n<span style=\"color: #FFFFFF\">        </span><span style=\"color: #50E3C2\">\"local new = ARGS[1]\"</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">+</span><span style=\"color: #FFFFFF\">  </span>\n<span style=\"color: #FFFFFF\">        </span><span style=\"color: #50E3C2\">\"local current = redis.call('GET', key)\"</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">+</span><span style=\"color: #FFFFFF\">  </span>\n<span style=\"color: #FFFFFF\">        </span><span style=\"color: #50E3C2\">\"if (current == false or (tonumber(new) &lt; tonumber(current))) then\"</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">+</span>\n<span style=\"color: #FFFFFF\">        </span><span style=\"color: #50E3C2\">\"    redis.call('SET', key, new)\"</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">+</span><span style=\"color: #FFFFFF\"> </span>\n<span style=\"color: #FFFFFF\">        </span><span style=\"color: #50E3C2\">\"    return 1\"</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">+</span><span style=\"color: #FFFFFF\">  </span>\n<span style=\"color: #FFFFFF\">        </span><span style=\"color: #50E3C2\">\"else\"</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">+</span><span style=\"color: #FFFFFF\"> </span>\n<span style=\"color: #FFFFFF\">        </span><span style=\"color: #50E3C2\">\"    return 0\"</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">+</span><span style=\"color: #FFFFFF\"> </span>\n<span style=\"color: #FFFFFF\">        </span><span style=\"color: #50E3C2\">\"end\"</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">+</span>\n\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #2BA8FF\">public</span><span style=\"color: #FFFFFF\"> UpdateIfLowerScript</span><span style=\"color: #EFEFEF\">(</span><span style=\"color: #2BA8FF\">Jedis</span><span style=\"color: #FFFFFF\"> jedis</span><span style=\"color: #EFEFEF\">)</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">{</span>\n<span style=\"color: #FFFFFF\">        this</span><span style=\"color: #EFEFEF\">.</span><span style=\"color: #FFFFFF\">jedis </span><span style=\"color: #EFEFEF\">=</span><span style=\"color: #FFFFFF\"> jedis</span><span style=\"color: #EFEFEF\">;</span>\n<span style=\"color: #FFFFFF\">        this</span><span style=\"color: #EFEFEF\">.</span><span style=\"color: #FFFFFF\">sha </span><span style=\"color: #EFEFEF\">=</span><span style=\"color: #FFFFFF\"> jedis</span><span style=\"color: #EFEFEF\">.</span><span style=\"color: #FFFFFF\">scriptLoad</span><span style=\"color: #EFEFEF\">(</span><span style=\"color: #FFFFFF\">script</span><span style=\"color: #EFEFEF\">);</span>\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #EFEFEF\">}</span>\n\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #2BA8FF\">public</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #2BA8FF\">boolean</span><span style=\"color: #FFFFFF\"> updateIfLower</span><span style=\"color: #EFEFEF\">(</span><span style=\"color: #2BA8FF\">String</span><span style=\"color: #FFFFFF\"> key</span><span style=\"color: #EFEFEF\">,</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #2BA8FF\">Integer</span><span style=\"color: #FFFFFF\"> newValue</span><span style=\"color: #EFEFEF\">)</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #EFEFEF\">{</span>\n<span style=\"color: #FFFFFF\">        </span><span style=\"color: #2BA8FF\">List&lt;String&gt;</span><span style=\"color: #FFFFFF\"> keys </span><span style=\"color: #EFEFEF\">=</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #2BA8FF\">Collections</span><span style=\"color: #EFEFEF\">.</span><span style=\"color: #FFFFFF\">singletonList</span><span style=\"color: #EFEFEF\">(</span><span style=\"color: #FFFFFF\">key</span><span style=\"color: #EFEFEF\">);</span>\n<span style=\"color: #FFFFFF\">        </span><span style=\"color: #2BA8FF\">List&lt;String&gt;</span><span style=\"color: #FFFFFF\"> args </span><span style=\"color: #EFEFEF\">=</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #2BA8FF\">Collections</span><span style=\"color: #EFEFEF\">.</span><span style=\"color: #FFFFFF\">singletonList</span><span style=\"color: #EFEFEF\">(</span><span style=\"color: #FFFFFF\">newValue</span><span style=\"color: #EFEFEF\">);</span>\n<span style=\"color: #FFFFFF\">        </span><span style=\"color: #2BA8FF\">Object</span><span style=\"color: #FFFFFF\"> response </span><span style=\"color: #EFEFEF\">=</span><span style=\"color: #FFFFFF\"> jedis</span><span style=\"color: #EFEFEF\">.</span><span style=\"color: #FFFFFF\">evalsha</span><span style=\"color: #EFEFEF\">(</span><span style=\"color: #FFFFFF\">sha</span><span style=\"color: #EFEFEF\">,</span><span style=\"color: #FFFFFF\"> keys</span><span style=\"color: #EFEFEF\">,</span><span style=\"color: #FFFFFF\"> args</span><span style=\"color: #EFEFEF\">);</span>\n\n<span style=\"color: #FFFFFF\">        </span><span style=\"color: #FF0078\">return</span><span style=\"color: #FFFFFF\"> (</span><span style=\"color: #2BA8FF\">Long</span><span style=\"color: #FFFFFF\">) response </span><span style=\"color: #EFEFEF\">==</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #2BA8FF\">1</span><span style=\"color: #EFEFEF\">;</span>\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #EFEFEF\">}</span>\n<span style=\"color: #FFFFFF\">}</span></code></pre>\n<p>Selanjutnya, cara panggilnya ya tinggal buat aja instancenya, lalu panggil methodnya seperti dibawah ini:</p>\n<pre class=\"shiki\" style=\"background-color: #191d21\"><code><span style=\"color: #2BA8FF\">UpdateIfLowerScript</span><span style=\"color: #FFFFFF\"> script </span><span style=\"color: #EFEFEF\">=</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #FF0078\">new</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #2BA8FF\">UpdateIfLowerScript</span><span style=\"color: #FFFFFF\">(jedis)</span><span style=\"color: #EFEFEF\">;</span>\n<span style=\"color: #2BA8FF\">boolean</span><span style=\"color: #FFFFFF\"> result </span><span style=\"color: #EFEFEF\">=</span><span style=\"color: #FFFFFF\"> script</span><span style=\"color: #EFEFEF\">.</span><span style=\"color: #FFFFFF\">updateIfLower</span><span style=\"color: #EFEFEF\">(</span><span style=\"color: #50E3C2\">'keynya'</span><span style=\"color: #EFEFEF\">,</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #2BA8FF\">100</span><span style=\"color: #EFEFEF\">);</span></code></pre>\n<p>Oia katanya biasanya bakal banyak script Lua di project Java kita, jadi supaya rapih sebisa mungkin dibuat 1 script 1 class, dan disimpan dalam 1 folder yang sama.</p>\n<p>Dan kenapa nggak pakai script Java aja langsung? seperti yang disinggung diatas, script Lua ini bersifat atomic.\nYang artinya script akan membloking eksekusi dari Redis Client lain sampai script Lua ini selesai dijalankan.\nJadi tidak ada transaksi dari Redis Client lain yang terselip ditengah-tengah Lua script ini.</p>\n<h2 id=\"4-pipelining-with-jedis\"><a href=\"#4-pipelining-with-jedis\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. Pipelining with Jedis</h2>\n<p>Pembahasan selanjutnya adalah tentang penggunaan pipeline. Pada DBMS lain, istilah yang mirip-mirip dengan pipeline adalah transaction. Dengan pipeline kita bisa mengirim banyak perintah sekaligus sehingga Redis Client nggak perlu bolak-balik request-response ke Redis Server.</p>\n<p>Bayangin kamu ke warung mau beli mie instan dan saos. Jika kamu adalah Redis Client, secara default kamu akan bolak-balik, beli mie instan dulu, sampai rumah, kemudian balik lagi untuk beli saos, terus balik lagi ke rumah. Dengan pipeline, kamu (si Redis Client) akan membeli mie instan dan saos secara bersamaan. Efeknya? tentu saja mempercepat waktu eksekusi dan latency.</p>\n<p>Di Jedis sendiri, cara menggunakan pipeline adalah sebagai berikut:</p>\n<pre class=\"shiki\" style=\"background-color: #191d21\"><code><span style=\"color: #2BA8FF\">Long</span><span style=\"color: #FFFFFF\"> siteId </span><span style=\"color: #EFEFEF\">=</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #2BA8FF\">1L</span><span style=\"color: #EFEFEF\">;</span>\n<span style=\"color: #2BA8FF\">Pipeline</span><span style=\"color: #FFFFFF\"> p </span><span style=\"color: #EFEFEF\">=</span><span style=\"color: #FFFFFF\"> jedis</span><span style=\"color: #EFEFEF\">.</span><span style=\"color: #FFFFFF\">pipelined</span><span style=\"color: #EFEFEF\">();</span><span style=\"color: #FFFFFF\">  </span><span style=\"color: #888\">// inisiasi pipeline</span>\n\n<span style=\"color: #2BA8FF\">Response&lt;Long&gt;</span><span style=\"color: #FFFFFF\"> hsetResponse </span><span style=\"color: #EFEFEF\">=</span><span style=\"color: #FFFFFF\"> p</span><span style=\"color: #EFEFEF\">.</span><span style=\"color: #FFFFFF\">hset</span><span style=\"color: #EFEFEF\">(</span><span style=\"color: #FFFFFF\">statusKey</span><span style=\"color: #EFEFEF\">,</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #50E3C2\">\"available\"</span><span style=\"color: #EFEFEF\">,</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #50E3C2\">\"true\"</span><span style=\"color: #EFEFEF\">);</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\">// push hset command to pipeline</span>\n<span style=\"color: #2BA8FF\">Response&lt;Long&gt;</span><span style=\"color: #FFFFFF\"> expireResponse </span><span style=\"color: #EFEFEF\">=</span><span style=\"color: #FFFFFF\"> p</span><span style=\"color: #EFEFEF\">.</span><span style=\"color: #FFFFFF\">expire</span><span style=\"color: #EFEFEF\">(</span><span style=\"color: #FFFFFF\">statusKey</span><span style=\"color: #EFEFEF\">,</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #2BA8FF\">1000</span><span style=\"color: #EFEFEF\">);</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\">// push expire command to pipeline</span>\n<span style=\"color: #2BA8FF\">Response&lt;Long&gt;</span><span style=\"color: #FFFFFF\"> saddResponse </span><span style=\"color: #EFEFEF\">=</span><span style=\"color: #FFFFFF\"> p</span><span style=\"color: #EFEFEF\">.</span><span style=\"color: #FFFFFF\">sadd</span><span style=\"color: #EFEFEF\">(</span><span style=\"color: #FFFFFF\">availableKey</span><span style=\"color: #EFEFEF\">,</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #2BA8FF\">String</span><span style=\"color: #EFEFEF\">.</span><span style=\"color: #FFFFFF\">valueOf</span><span style=\"color: #EFEFEF\">(</span><span style=\"color: #FFFFFF\">siteId</span><span style=\"color: #EFEFEF\">));</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\">// push sadd command to pipeline</span>\n\n<span style=\"color: #FFFFFF\">p</span><span style=\"color: #EFEFEF\">.</span><span style=\"color: #FFFFFF\">sync</span><span style=\"color: #EFEFEF\">();</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\">// run pipeline to execute all commands</span>\n\n<span style=\"color: #2BA8FF\">Long</span><span style=\"color: #FFFFFF\"> hsetResult </span><span style=\"color: #EFEFEF\">=</span><span style=\"color: #FFFFFF\"> hsetResponse</span><span style=\"color: #EFEFEF\">.</span><span style=\"color: #FFFFFF\">get</span><span style=\"color: #EFEFEF\">();</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\">// get result from p.hset</span>\n<span style=\"color: #2BA8FF\">Long</span><span style=\"color: #FFFFFF\"> expireResult </span><span style=\"color: #EFEFEF\">=</span><span style=\"color: #FFFFFF\"> expireResponse</span><span style=\"color: #EFEFEF\">.</span><span style=\"color: #FFFFFF\">get</span><span style=\"color: #EFEFEF\">();</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\">// get result from p.expire</span>\n<span style=\"color: #2BA8FF\">Long</span><span style=\"color: #FFFFFF\"> saddResult </span><span style=\"color: #EFEFEF\">=</span><span style=\"color: #FFFFFF\"> saddResponse</span><span style=\"color: #EFEFEF\">.</span><span style=\"color: #FFFFFF\">get</span><span style=\"color: #EFEFEF\">();</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\">// get result from p.sadd</span></code></pre>\n<p>Dengan pipeine seperti diatas, 3 perintah akan dikirim ke Redis Server secara bersamaan.\nHanya saja, sifat pipeline tidak seperti transaksi, dimana jika salah satunya gagal, Redis tidak akan merollback command sebelumnya. Dan juga saat pipeline berjalan, katakanlah kita mengirim 100 perintah, kemudian pada perintah ke 70 ada Redis Client mengirim perintah juga, maka perintah dari Redis Client lain akan berjalan ditengah-tengah pipeline.</p>\n<h2 id=\"5-transactions-with-jedis\"><a href=\"#5-transactions-with-jedis\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>5. Transactions with Jedis</h2>\n<p>Pembahasan selanjutnya adalah tentang transaction. Transaction di Redis ini mirip-mirip dengan pipeline,\nhanya saja transaction mendukung atomic transaction. Jika kita menjalankan 5 perintah menggunakan transaction,\nmaka jika ada Redis Client lain mengirim perintah ke Redis Server yang sama, maka Redis Client lain tersebut harus menunggu sampai 5 perintah kita selesai dijalankan.</p>\n<p>Contoh menerapkan transaction menggunakan Jedis:</p>\n<pre class=\"shiki\" style=\"background-color: #191d21\"><code><span style=\"color: #2BA8FF\">Long</span><span style=\"color: #FFFFFF\"> siteId </span><span style=\"color: #EFEFEF\">=</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #2BA8FF\">1L</span><span style=\"color: #EFEFEF\">;</span>\n<span style=\"color: #2BA8FF\">Transaction</span><span style=\"color: #FFFFFF\"> t </span><span style=\"color: #EFEFEF\">=</span><span style=\"color: #FFFFFF\"> jedis</span><span style=\"color: #EFEFEF\">.</span><span style=\"color: #FFFFFF\">multi</span><span style=\"color: #EFEFEF\">();</span><span style=\"color: #FFFFFF\">  </span><span style=\"color: #888\">// inisiasi transaction</span>\n\n<span style=\"color: #2BA8FF\">Response&lt;Long&gt;</span><span style=\"color: #FFFFFF\"> hsetResponse </span><span style=\"color: #EFEFEF\">=</span><span style=\"color: #FFFFFF\"> t</span><span style=\"color: #EFEFEF\">.</span><span style=\"color: #FFFFFF\">hset</span><span style=\"color: #EFEFEF\">(</span><span style=\"color: #FFFFFF\">statusKey</span><span style=\"color: #EFEFEF\">,</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #50E3C2\">\"available\"</span><span style=\"color: #EFEFEF\">,</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #50E3C2\">\"true\"</span><span style=\"color: #EFEFEF\">);</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\">// push hset command to transaction</span>\n<span style=\"color: #2BA8FF\">Response&lt;Long&gt;</span><span style=\"color: #FFFFFF\"> expireResponse </span><span style=\"color: #EFEFEF\">=</span><span style=\"color: #FFFFFF\"> t</span><span style=\"color: #EFEFEF\">.</span><span style=\"color: #FFFFFF\">expire</span><span style=\"color: #EFEFEF\">(</span><span style=\"color: #FFFFFF\">statusKey</span><span style=\"color: #EFEFEF\">,</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #2BA8FF\">1000</span><span style=\"color: #EFEFEF\">);</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\">// push expire command to transaction</span>\n<span style=\"color: #2BA8FF\">Response&lt;Long&gt;</span><span style=\"color: #FFFFFF\"> saddResponse </span><span style=\"color: #EFEFEF\">=</span><span style=\"color: #FFFFFF\"> t</span><span style=\"color: #EFEFEF\">.</span><span style=\"color: #FFFFFF\">sadd</span><span style=\"color: #EFEFEF\">(</span><span style=\"color: #FFFFFF\">availableKey</span><span style=\"color: #EFEFEF\">,</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #2BA8FF\">String</span><span style=\"color: #EFEFEF\">.</span><span style=\"color: #FFFFFF\">valueOf</span><span style=\"color: #EFEFEF\">(</span><span style=\"color: #FFFFFF\">siteId</span><span style=\"color: #EFEFEF\">));</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\">// push sadd command to transaction</span>\n\n<span style=\"color: #FFFFFF\">t</span><span style=\"color: #EFEFEF\">.</span><span style=\"color: #FFFFFF\">exec</span><span style=\"color: #EFEFEF\">();</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\">// run transaction to execute all commands</span>\n\n<span style=\"color: #2BA8FF\">Long</span><span style=\"color: #FFFFFF\"> hsetResult </span><span style=\"color: #EFEFEF\">=</span><span style=\"color: #FFFFFF\"> hsetResponse</span><span style=\"color: #EFEFEF\">.</span><span style=\"color: #FFFFFF\">get</span><span style=\"color: #EFEFEF\">();</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\">// get result from t.hset</span>\n<span style=\"color: #2BA8FF\">Long</span><span style=\"color: #FFFFFF\"> expireResult </span><span style=\"color: #EFEFEF\">=</span><span style=\"color: #FFFFFF\"> expireResponse</span><span style=\"color: #EFEFEF\">.</span><span style=\"color: #FFFFFF\">get</span><span style=\"color: #EFEFEF\">();</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\">// get result from t.expire</span>\n<span style=\"color: #2BA8FF\">Long</span><span style=\"color: #FFFFFF\"> saddResult </span><span style=\"color: #EFEFEF\">=</span><span style=\"color: #FFFFFF\"> saddResponse</span><span style=\"color: #EFEFEF\">.</span><span style=\"color: #FFFFFF\">get</span><span style=\"color: #EFEFEF\">();</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\">// get result from t.sadd</span></code></pre>\n<h2 id=\"kapan-harus-menggunakan-lua-script-pipeline-dan-transaction\"><a href=\"#kapan-harus-menggunakan-lua-script-pipeline-dan-transaction\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kapan Harus Menggunakan Lua Script, Pipeline, dan Transaction?</h2>\n<ol>\n<li>Jika kamu membolehkan ada query dari client lain berjalan di tengah-tengah multiple query, gunakan Pipeline.</li>\n<li>Jika kamu tidak ingin ada query dari client lain berjalan di tengah-tengah multiple query, gunakan Transaction.</li>\n<li>Jika kamu ingin menggunakan conditional statement di tengah-tengah eksekusi multiple query, gunakan Lua Script.</li>\n</ol>\n<hr>\n<p>Begitulah topik pembahasan di kelas RU102J di minggu ke-2. Yaudah, sampai jumpa lagi di minggu selanjutnya.</p>\n","excerpt":"","description":"Catatan kelas Redis University RU102 minggu ke-2","path":"/artikel/redis-university-ru102j-minggu-ke-2/","cover":"/images/posts/ru102j-w2-cover.png","icon":"/images/icons/redis.png","tags":[{"id":"Redis University","title":"Redis University","path":"/tag/Redis%20University/"},{"id":"Course","title":"Course","path":"/tag/Course/"},{"id":"RU102J","title":"RU102J","path":"/tag/RU102J/"}],"author":{"id":"Muhammad Syifa","title":"Muhammad Syifa","path":"/author/Muhammad%20Syifa/"}}},{"node":{"id":"d617f7beedbc60b300eecbeb41392cde","title":"Redis University RU101 - Minggu Ke-2","datetime":"2019-08-17 08:00:00","content":"<p>Ini adalah catatan minggu ke-2 dari kelas RU101 (Introduction to Redis Data Structure) di Redis University.\nBuat yang belum tau apa itu Redis University, saya sudah bahas di catatan <a href=\"/redis-university-ru101-minggu-pertama/\">minggu pertama</a>.</p>\n<p>Pada minggu pertama yang dibahas adalah tentang data struktur apa saja yang terdapat pada Redis,\npada minggu ke-2 ini pembahasannya adalah:</p>\n<ol>\n<li>Cardinality and Capped Collections</li>\n<li>Set Operations</li>\n<li>Faceted Search</li>\n<li>Performance &#x26; Big O Notation</li>\n</ol>\n<h2 id=\"1-cardinality-and-capped-collections\"><a href=\"#1-cardinality-and-capped-collections\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Cardinality and Capped Collections</h2>\n<h4 id=\"cardinality\"><a href=\"#cardinality\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cardinality</h4>\n<p>Untuk mengecek cardinality dari data di Redis, perintah yang dapat digunakan adalah:</p>\n<ul>\n<li><code>LLEN</code>: untuk list</li>\n<li><code>SCARD</code>: untuk set</li>\n<li><code>ZCARD</code>: untuk sorted set</li>\n</ul>\n<p>Contoh:</p>\n<pre class=\"shiki\" style=\"background-color: #191d21\"><code><span style=\"color: #FFFFFF\">RPUSH mylist 1 2 3 4 5  </span><span style=\"color: #888\"># set 5 item ke mylist</span>\n<span style=\"color: #FFFFFF\">LLEN mylist             </span><span style=\"color: #888\"># mengambil banyak item di mylist</span>\n<span style=\"color: #EFEFEF\">(</span><span style=\"color: #FFFFFF\">integer</span><span style=\"color: #EFEFEF\">)</span><span style=\"color: #FFFFFF\"> 5 </span>\n\n<span style=\"color: #FFFFFF\">SADD myset foo bar baz qux qux </span><span style=\"color: #888\"># menambahkan item ke myset</span>\n<span style=\"color: #FFFFFF\">SCARD myset                    </span><span style=\"color: #888\"># mengambil banyak item di myset</span>\n<span style=\"color: #EFEFEF\">(</span><span style=\"color: #FFFFFF\">integer</span><span style=\"color: #EFEFEF\">)</span><span style=\"color: #FFFFFF\"> 4 </span><span style=\"color: #888\"># hasilnya 4 karena set hanya menyimpan string unik, jadi qux ke2 tidak ditambahkan</span>\n\n<span style=\"color: #FFFFFF\">ZADD mysortedset 1 foo 2 bar 3 baz 4 qux 5 qux </span><span style=\"color: #888\"># menambahkan item ke mysortedset</span>\n<span style=\"color: #FFFFFF\">ZCARD mysortedset                              </span><span style=\"color: #888\"># mengambil banyak item di mysortedset</span>\n<span style=\"color: #EFEFEF\">(</span><span style=\"color: #FFFFFF\">integer</span><span style=\"color: #EFEFEF\">)</span><span style=\"color: #FFFFFF\"> 4 </span><span style=\"color: #888\"># hasilnya 4 karena alasan yg sama dengan set</span></code></pre>\n<h4 id=\"capped-collections\"><a href=\"#capped-collections\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Capped Collections</h4>\n<p>Capped collections adalah list/sorted set yang sebagian nilainya telah dihapus/dipotong.</p>\n<p>Ada beberapa perintah untuk memotong sebagian item didalam list dan sorted set:</p>\n<ul>\n<li><code>LTRIM</code>: untuk <strong>mengambil</strong> item di range index tertentu pada list (sisanya dihapus).</li>\n<li><code>ZREMRANGEBYRANK</code>: untuk <strong>menghapus</strong> item di range index tertentu pada sorted set.</li>\n</ul>\n<p>Contoh <code>LTRIM</code>:</p>\n<pre class=\"shiki\" style=\"background-color: #191d21\"><code><span style=\"color: #FFFFFF\">RPUSH numbers 1 2 3 4 5 6 7 8 9 10 </span><span style=\"color: #888\"># set numbers</span>\n<span style=\"color: #FFFFFF\">LTRIM numbers 0 -3                 </span><span style=\"color: #888\"># ambil dari index 0 sampai dengan index terakhir - 3</span>\n<span style=\"color: #FFFFFF\">LRANGE numbers 0 -1                </span><span style=\"color: #888\"># ambil semua numbers (setelah dipotong)</span>\n<span style=\"color: #FFFFFF\">1) </span><span style=\"color: #50E3C2\">\"1\"</span>\n<span style=\"color: #FFFFFF\">2) </span><span style=\"color: #50E3C2\">\"2\"</span>\n<span style=\"color: #FFFFFF\">3) </span><span style=\"color: #50E3C2\">\"3\"</span>\n<span style=\"color: #FFFFFF\">4) </span><span style=\"color: #50E3C2\">\"4\"</span>\n<span style=\"color: #FFFFFF\">5) </span><span style=\"color: #50E3C2\">\"5\"</span>\n<span style=\"color: #FFFFFF\">6) </span><span style=\"color: #50E3C2\">\"6\"</span>\n<span style=\"color: #FFFFFF\">7) </span><span style=\"color: #50E3C2\">\"7\"</span>\n<span style=\"color: #FFFFFF\">8) </span><span style=\"color: #50E3C2\">\"8\"</span>\n\n<span style=\"color: #FFFFFF\">LTRIM -5 -1 </span><span style=\"color: #888\"># mengambil 5 item terakhir</span>\n<span style=\"color: #FFFFFF\">LRANGE numbers 0 -1</span>\n<span style=\"color: #FFFFFF\">1) </span><span style=\"color: #50E3C2\">\"4\"</span>\n<span style=\"color: #FFFFFF\">2) </span><span style=\"color: #50E3C2\">\"5\"</span>\n<span style=\"color: #FFFFFF\">3) </span><span style=\"color: #50E3C2\">\"6\"</span>\n<span style=\"color: #FFFFFF\">4) </span><span style=\"color: #50E3C2\">\"7\"</span>\n<span style=\"color: #FFFFFF\">5) </span><span style=\"color: #50E3C2\">\"8\"</span></code></pre>\n<p>Contoh <code>ZREMRANGEBYRANK</code>:</p>\n<pre class=\"shiki\" style=\"background-color: #191d21\"><code><span style=\"color: #FFFFFF\">ZADD letters 1 a 2 b 3 c 4 d 5 f 6 g 7 h  </span><span style=\"color: #888\"># set letters</span>\n<span style=\"color: #FFFFFF\">ZREMRANGEBYRANK letters -2 -1             </span><span style=\"color: #888\"># hapus 2 item terakhir</span>\n<span style=\"color: #FFFFFF\">ZRANGE letters 0 -1</span>\n<span style=\"color: #FFFFFF\">1) </span><span style=\"color: #50E3C2\">\"a\"</span>\n<span style=\"color: #FFFFFF\">2) </span><span style=\"color: #50E3C2\">\"b\"</span>\n<span style=\"color: #FFFFFF\">3) </span><span style=\"color: #50E3C2\">\"c\"</span>\n<span style=\"color: #FFFFFF\">4) </span><span style=\"color: #50E3C2\">\"d\"</span>\n<span style=\"color: #FFFFFF\">5) </span><span style=\"color: #50E3C2\">\"f\"</span>\n\n<span style=\"color: #FFFFFF\">ZREMRANGEBYRANK letters 0 2 </span><span style=\"color: #888\"># hapus 3 item pertama (index: 0, 1, 2)</span>\n<span style=\"color: #FFFFFF\">1) </span><span style=\"color: #50E3C2\">\"d\"</span><span style=\"color: #FFFFFF\">                                                                                                             2) </span><span style=\"color: #50E3C2\">\"f\"</span></code></pre>\n<h2 id=\"2-set-operations-with-sets-and-sorted-sets\"><a href=\"#2-set-operations-with-sets-and-sorted-sets\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Set Operations with Sets and Sorted Sets</h2>\n<p>Pada bagian ini dicontohkan cara menggunakan <code>ZINTERSTORE</code> dan <code>ZETUNIONSTORE</code> untuk menyimpan hasil <em>intersect</em> dan <em>union</em> kedalam key lain.</p>\n<p>Contoh <code>ZINTERSTORE</code>: </p>\n<pre class=\"shiki\" style=\"background-color: #191d21\"><code><span style=\"color: #FFFFFF\">ZADD l1 1 a 2 b 3 c 4 d 5 f </span><span style=\"color: #888\"># buat sorted set l1</span>\n<span style=\"color: #FFFFFF\">ZADD l2 1 a 2 b 3 e 5 x 6 z </span><span style=\"color: #888\"># buat sorted set l2</span>\n\n<span style=\"color: #FFFFFF\">ZINTERSTORE l3 2 l1 l2      </span><span style=\"color: #888\"># simpan hasil intersect l1 dan l2 kedalam l3</span>\n<span style=\"color: #FFFFFF\">ZRANGE l3 0 -1 WITHSCORES </span><span style=\"color: #888\"># melihat semua isi l3</span>\n<span style=\"color: #FFFFFF\">1) </span><span style=\"color: #50E3C2\">\"a\"</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\"># nilai i(0)</span>\n<span style=\"color: #FFFFFF\">2) </span><span style=\"color: #50E3C2\">\"2\"</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\"># score i(0)</span>\n<span style=\"color: #FFFFFF\">3) </span><span style=\"color: #50E3C2\">\"b\"</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\"># nilai i(1)</span>\n<span style=\"color: #FFFFFF\">4) </span><span style=\"color: #50E3C2\">\"4\"</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\"># score i(1)</span></code></pre>\n<p>Sebagai catatan <code>l3 2 l1 l2</code>, <code>2</code> yang dimaksud disitu adalah banyak key yang mau di-<em>intersect</em>,\nkarena disitu yang di-<em>intersect</em> adalah <code>l1</code> dan <code>l2</code>, berarti banyak keynya adalah 2.</p>\n<p>Dokumentasi selengkapnya <code>ZINTERSTORE</code> bisa dilihat <a href=\"https://redis.io/commands/zinterstore\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">disini</a>.</p>\n<p>Contoh <code>ZUNIONSTORE</code>:</p>\n<pre class=\"shiki\" style=\"background-color: #191d21\"><code><span style=\"color: #FFFFFF\">ZADD l1 1 a 2 b 3 c 4 d 5 f </span><span style=\"color: #888\"># buat sorted set l1</span>\n<span style=\"color: #FFFFFF\">ZADD l2 1 a 2 b 3 e 5 x 6 z </span><span style=\"color: #888\"># buat sorted set l2</span>\n\n<span style=\"color: #FFFFFF\">ZUNIONSTORE l3 2 l1 l2      </span><span style=\"color: #888\"># simpan hasil union l1 dan l2 kedalam l3</span>\n<span style=\"color: #FFFFFF\">ZRANGE l3 0 -1 WITHSCORES </span><span style=\"color: #888\"># melihat semua isi l3</span>\n<span style=\"color: #FFFFFF\"> 1) </span><span style=\"color: #50E3C2\">\"a\"</span>\n<span style=\"color: #FFFFFF\"> 2) </span><span style=\"color: #50E3C2\">\"2\"</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\"># skor si a, jadi 2 karena skornya ditambahkan antara skor a di l1 dan skor a di l2</span>\n<span style=\"color: #FFFFFF\"> 3) </span><span style=\"color: #50E3C2\">\"c\"</span>\n<span style=\"color: #FFFFFF\"> 4) </span><span style=\"color: #50E3C2\">\"3\"</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\"># skor si c</span>\n<span style=\"color: #FFFFFF\"> 5) </span><span style=\"color: #50E3C2\">\"e\"</span>\n<span style=\"color: #FFFFFF\"> 6) </span><span style=\"color: #50E3C2\">\"3\"</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\"># skor si d</span>\n<span style=\"color: #FFFFFF\"> 7) </span><span style=\"color: #50E3C2\">\"b\"</span>\n<span style=\"color: #FFFFFF\"> 8) </span><span style=\"color: #50E3C2\">\"4\"</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\"># skor si b</span>\n<span style=\"color: #FFFFFF\"> 9) </span><span style=\"color: #50E3C2\">\"d\"</span>\n<span style=\"color: #FFFFFF\">10) </span><span style=\"color: #50E3C2\">\"4\"</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\"># skor si d</span>\n<span style=\"color: #FFFFFF\">11) </span><span style=\"color: #50E3C2\">\"f\"</span>\n<span style=\"color: #FFFFFF\">12) </span><span style=\"color: #50E3C2\">\"5\"</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\"># skor si f</span>\n<span style=\"color: #FFFFFF\">13) </span><span style=\"color: #50E3C2\">\"x\"</span>\n<span style=\"color: #FFFFFF\">14) </span><span style=\"color: #50E3C2\">\"5\"</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\"># skor si x</span>\n<span style=\"color: #FFFFFF\">15) </span><span style=\"color: #50E3C2\">\"z\"</span>\n<span style=\"color: #FFFFFF\">16) </span><span style=\"color: #50E3C2\">\"6\"</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\"># skor si y</span>\n\n<span style=\"color: #FFFFFF\">ZUNIONSTORE l3 2 l1 l2 AGGREGATE MIN  </span><span style=\"color: #888\"># simpan hasil union l1 dan l2 kedalam l3</span>\n<span style=\"color: #FFFFFF\">ZRANGE l3 0 -1 WITHSCORES </span><span style=\"color: #888\"># melihat semua isi l3</span>\n<span style=\"color: #FFFFFF\"> 1) </span><span style=\"color: #50E3C2\">\"a\"</span>\n<span style=\"color: #FFFFFF\"> 2) </span><span style=\"color: #50E3C2\">\"1\"</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\"># skor si a, paling kecilnya 1</span>\n<span style=\"color: #FFFFFF\"> 3) </span><span style=\"color: #50E3C2\">\"b\"</span>\n<span style=\"color: #FFFFFF\"> 4) </span><span style=\"color: #50E3C2\">\"2\"</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\"># skor si b</span>\n<span style=\"color: #FFFFFF\"> 5) </span><span style=\"color: #50E3C2\">\"c\"</span>\n<span style=\"color: #FFFFFF\"> 6) </span><span style=\"color: #50E3C2\">\"3\"</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\"># skor si c</span>\n<span style=\"color: #FFFFFF\"> 7) </span><span style=\"color: #50E3C2\">\"e\"</span><span style=\"color: #FFFFFF\"> </span>\n<span style=\"color: #FFFFFF\"> 8) </span><span style=\"color: #50E3C2\">\"3\"</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\"># skor si e</span>\n<span style=\"color: #FFFFFF\"> 9) </span><span style=\"color: #50E3C2\">\"d\"</span>\n<span style=\"color: #FFFFFF\">10) </span><span style=\"color: #50E3C2\">\"4\"</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\"># skor si d</span>\n<span style=\"color: #FFFFFF\">11) </span><span style=\"color: #50E3C2\">\"f\"</span>\n<span style=\"color: #FFFFFF\">12) </span><span style=\"color: #50E3C2\">\"5\"</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\"># skor si f</span>\n<span style=\"color: #FFFFFF\">13) </span><span style=\"color: #50E3C2\">\"x\"</span>\n<span style=\"color: #FFFFFF\">14) </span><span style=\"color: #50E3C2\">\"5\"</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\"># skor si x</span>\n<span style=\"color: #FFFFFF\">15) </span><span style=\"color: #50E3C2\">\"z\"</span>\n<span style=\"color: #FFFFFF\">16) </span><span style=\"color: #50E3C2\">\"6\"</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\"># skor si z</span></code></pre>\n<p>Dokumentasi selengkapnya <code>ZUNIONSTORE</code> bisa dilihat <a href=\"https://redis.io/commands/zunionstore\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">disini</a>.</p>\n<h2 id=\"3-faceted-search\"><a href=\"#3-faceted-search\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. Faceted Search</h2>\n<p>Selanjutnya pembahasa menuju ke <em>faceted search</em>. Untuk definisi <em>faceted search</em> sendiri nggak begitu dijelaskan disini, jadi silahkan aja ke <a href=\"https://en.wikipedia.org/wiki/Faceted_search\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">wikipedia</a>. Yang dibahas disini hanya contoh kasus menerapkan teknik <em>faceted search</em> pada Redis menggunakan bahasa pemrograman tertentu, untuk mengurangi <em>time complexity</em> saat melakukan pencarian.</p>\n<p>Sebagai contoh, kita memiliki data customers berupa JSON sebagai berikut:</p>\n<pre class=\"shiki\" style=\"background-color: #191d21\"><code><span style=\"color: #EFEFEF\">[</span>\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #EFEFEF\">{</span>\n<span style=\"color: #FFFFFF\">        </span><span style=\"color: #2BA8FF\">\"ID\"</span><span style=\"color: #EFEFEF\">:</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #FFF\">\"001\"</span><span style=\"color: #EFEFEF\">,</span>\n<span style=\"color: #FFFFFF\">        </span><span style=\"color: #2BA8FF\">\"name\"</span><span style=\"color: #EFEFEF\">:</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #FFF\">\"John Doe\"</span><span style=\"color: #EFEFEF\">,</span>\n<span style=\"color: #FFFFFF\">        </span><span style=\"color: #2BA8FF\">\"age\"</span><span style=\"color: #EFEFEF\">:</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #2BA8FF\">20</span><span style=\"color: #EFEFEF\">,</span>\n<span style=\"color: #FFFFFF\">        </span><span style=\"color: #2BA8FF\">\"city\"</span><span style=\"color: #EFEFEF\">:</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #FFF\">\"Jakarta\"</span><span style=\"color: #EFEFEF\">,</span>\n<span style=\"color: #FFFFFF\">        </span><span style=\"color: #2BA8FF\">\"sex\"</span><span style=\"color: #EFEFEF\">:</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #FFF\">\"male\"</span>\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #EFEFEF\">},</span>\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #EFEFEF\">{</span>\n<span style=\"color: #FFFFFF\">        </span><span style=\"color: #2BA8FF\">\"ID\"</span><span style=\"color: #EFEFEF\">:</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #FFF\">\"002\"</span><span style=\"color: #EFEFEF\">,</span>\n<span style=\"color: #FFFFFF\">        </span><span style=\"color: #2BA8FF\">\"name\"</span><span style=\"color: #EFEFEF\">:</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #FFF\">\"Jane Doe\"</span><span style=\"color: #EFEFEF\">,</span>\n<span style=\"color: #FFFFFF\">        </span><span style=\"color: #2BA8FF\">\"age\"</span><span style=\"color: #EFEFEF\">:</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #2BA8FF\">20</span><span style=\"color: #EFEFEF\">,</span>\n<span style=\"color: #FFFFFF\">        </span><span style=\"color: #2BA8FF\">\"city\"</span><span style=\"color: #EFEFEF\">:</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #FFF\">\"Bandung\"</span><span style=\"color: #EFEFEF\">,</span>\n<span style=\"color: #FFFFFF\">        </span><span style=\"color: #2BA8FF\">\"sex\"</span><span style=\"color: #EFEFEF\">:</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #FFF\">\"female\"</span>\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #EFEFEF\">}</span>\n<span style=\"color: #EFEFEF\">]</span></code></pre>\n<p>Jika kita ingin melakukan pencarian terhadap kolom <code>age</code>, <code>city</code>, dan <code>sex</code>.\nSelain menyimpan data customer tersebut, kita juga meyimpan indeks untuk <code>age</code>, <code>city</code>, dan <code>sex</code> berupa <code>sets</code>.</p>\n<p>Sebagai contoh:</p>\n<pre class=\"shiki\" style=\"background-color: #191d21\"><code><span style=\"color: #888\"># simpan data lengkap</span>\n<span style=\"color: #FFFFFF\">SET customer:001 </span><span style=\"color: #50E3C2\">\"{json string data john doe}\"</span>\n<span style=\"color: #FFFFFF\">SET customer:002 </span><span style=\"color: #50E3C2\">\"{json string data jane doe}\"</span>\n\n<span style=\"color: #FFFFFF\">SADD fs:customer:age:20 001 002     </span><span style=\"color: #888\"># menambahkan 001 dan 002 kedalam set dengan age 20</span>\n<span style=\"color: #FFFFFF\">SADD fs:customer:city:</span><span style=\"color: #50E3C2\">\"Jakarta\"</span><span style=\"color: #FFFFFF\"> 001 </span><span style=\"color: #888\"># menambahkan customer 001 kedalam set dengan city Jakarta</span>\n<span style=\"color: #FFFFFF\">SADD fs:customer:city:</span><span style=\"color: #50E3C2\">\"Bandung\"</span><span style=\"color: #FFFFFF\"> 002 </span><span style=\"color: #888\"># menambahkan customer 002 kedalam set dengan city Bandung</span>\n<span style=\"color: #FFFFFF\">SADD fs:customer:sex:male 001</span>\n<span style=\"color: #FFFFFF\">SADD fs:customer:sex:female 002</span></code></pre>\n<blockquote>\n<p>Prefix 'fs' disana maksudnya <em>faceted search</em>. Bisa diganti dengan apapun.</p>\n</blockquote>\n<p>Dengan begitu, jika kita ingin melakukan pencarian dengan kriteria umur 20 dan jenis kelamin pria,\nhal yang pertama kita lakukan adalah mengambil <em>intersect</em> daftar ID dari <code>fs:customer:age:20</code> dan <code>fs:customer:sex:male</code>. Setelah ID didapat, barulah kita mengambil masing-masing data menggunakan <code>GET</code>.</p>\n<p>Contoh:</p>\n<pre class=\"shiki\" style=\"background-color: #191d21\"><code><span style=\"color: #FFFFFF\">SINTER fs:customer:age:20 fs:customer:sex:male</span>\n<span style=\"color: #FFFFFF\">1) </span><span style=\"color: #50E3C2\">\"001\"</span>\n\n<span style=\"color: #FFFFFF\">GET customer:001</span>\n<span style=\"color: #50E3C2\">\"json string data john doe\"</span></code></pre>\n<p>Sebetulnya di kelas pakainya python, jadi hasil dari <code>SINTER</code> di looping untuk mendapatkan detail masing-masing datanya, tapi disini saya catat konsepnya aja. Pokoknya kayak gitulah tekniknya.</p>\n<h4 id=\"hashed-key\"><a href=\"#hashed-key\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Hashed Key</h4>\n<p>Materi selanjutnya adalah membandingkan <em>faceted search</em> diatas dengan tambahan <em>hashed key</em>.\nJadi pada teknik ini, <em>time complexity</em> lebih rendah karena kita tidak perlu melakukan <code>SINTER</code> ke banyak kriteria, karena kombinasi kriterianya dibungkus menjadi hash.</p>\n<p>Sebagai contoh pada data JSON sebelumnya, jika kita ingin melakukan pencarian terhadap <code>age</code>, <code>city</code>, dan <code>sex</code>.\nKita perlu membuat <code>sets</code> sebanyak kombinasi dari ke-3 kolom tersebut. Untuk algoritma hashnya sendiri bisa pakai apapun, entah md5, sha1, sha256, dsb.</p>\n<p>Contoh aja nih ya, dari data JSON diatas kita akan membuat <code>list</code> kurang lebih seperti ini:</p>\n<pre class=\"shiki\" style=\"background-color: #191d21\"><code><span style=\"color: #888\"># indeks untuk John Doe (001)</span>\n<span style=\"color: #FFFFFF\">RPUSH </span><span style=\"color: #50E3C2\">\"hfs:customer:md5(20|Jakarta|male)\"</span><span style=\"color: #FFFFFF\"> 001</span>\n<span style=\"color: #FFFFFF\">RPUSH </span><span style=\"color: #50E3C2\">\"hfs:customer:md5(20|*|male)\"</span><span style=\"color: #FFFFFF\"> 001</span>\n<span style=\"color: #FFFFFF\">RPUSH </span><span style=\"color: #50E3C2\">\"hfs:customer:md5(20|Jakarta|*)\"</span><span style=\"color: #FFFFFF\"> 001</span>\n<span style=\"color: #FFFFFF\">RPUSH </span><span style=\"color: #50E3C2\">\"hfs:customer:md5(*|Jakarta|male)\"</span><span style=\"color: #FFFFFF\"> 001</span>\n<span style=\"color: #FFFFFF\">RPUSH </span><span style=\"color: #50E3C2\">\"hfs:customer:md5(20|*|*)\"</span><span style=\"color: #FFFFFF\"> 001</span>\n<span style=\"color: #FFFFFF\">RPUSH </span><span style=\"color: #50E3C2\">\"hfs:customer:md5(*|Jakarta|*)\"</span><span style=\"color: #FFFFFF\"> 001</span>\n<span style=\"color: #FFFFFF\">RPUSH </span><span style=\"color: #50E3C2\">\"hfs:customer:md5(*|*|male)\"</span><span style=\"color: #FFFFFF\"> 001</span>\n\n<span style=\"color: #888\"># indeks untuk Jane Doe (002)</span>\n<span style=\"color: #FFFFFF\">RPUSH </span><span style=\"color: #50E3C2\">\"hfs:customer:md5(20|Bandung|female)\"</span><span style=\"color: #FFFFFF\"> 002</span>\n<span style=\"color: #FFFFFF\">RPUSH </span><span style=\"color: #50E3C2\">\"hfs:customer:md5(20|*|female)\"</span><span style=\"color: #FFFFFF\"> 002</span>\n<span style=\"color: #FFFFFF\">RPUSH </span><span style=\"color: #50E3C2\">\"hfs:customer:md5(20|Bandung|*)\"</span><span style=\"color: #FFFFFF\"> 002</span>\n<span style=\"color: #FFFFFF\">RPUSH </span><span style=\"color: #50E3C2\">\"hfs:customer:md5(*|Bandung|female)\"</span><span style=\"color: #FFFFFF\"> 002</span>\n<span style=\"color: #FFFFFF\">RPUSH </span><span style=\"color: #50E3C2\">\"hfs:customer:md5(20|*|*)\"</span><span style=\"color: #FFFFFF\"> 002</span>\n<span style=\"color: #FFFFFF\">RPUSH </span><span style=\"color: #50E3C2\">\"hfs:customer:md5(*|Bandung|*)\"</span><span style=\"color: #FFFFFF\"> 002</span>\n<span style=\"color: #FFFFFF\">RPUSH </span><span style=\"color: #50E3C2\">\"hfs:customer:md5(*|*|female)\"</span><span style=\"color: #FFFFFF\"> 002</span></code></pre>\n<p>Itu <code>md5(age,city,sex)</code> contoh aja ya, sebetulnya itu seharusnya hasil dari md5-nya, bukan plain text kayak gitu.</p>\n<p>Intinya pada teknik <em>hashed key</em> ini kita menyimpan <strong>seluruh</strong> kombinasi key yang dimungkinkan, sehingga suatu saat kita ingin mencari data pria umur 20, kita bisa gunakan <code>LRANGE</code> sebagai berikut:</p>\n<pre class=\"shiki\" style=\"background-color: #191d21\"><code><span style=\"color: #FFFFFF\">LRANGE </span><span style=\"color: #50E3C2\">\"hfs:customer:md5(20|*|male)\"</span><span style=\"color: #FFFFFF\"> 0 -1</span>\n<span style=\"color: #FFFFFF\">1) </span><span style=\"color: #50E3C2\">\"001\"</span></code></pre>\n<p>Dari hasil itu baru deh di loop pakai bahasa pemrograman buat dapatin detail masing-masing datanya.\nMenggunakan teknik seperti ini akan mengurangi <em>time complexity</em> untuk melakukan pencarian karena tidak perlu melakukan <em>intersect</em>, hanya saja semakin banyak kombinasi valuenya, keynya akan buanyak banget, dan proses maintain indeksnya jadi lebih rumit.</p>\n<h2 id=\"4-performance--big-o-notation\"><a href=\"#4-performance--big-o-notation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. Performance &#x26; Big O Notation</h2>\n<p>Sebagai programmer yang main weaponnya PHP dan Javascript saya sebetulnya agak gimana gitu di pembahasan minggu ini. Redis kan memang diciptakan untuk masalah performa, itu kenapa dia menghadirkan solusi in-memory database ini.\nTapi di minggu ini dia bahas masalah performa seakan menggunakan bahasa C dan RAM sebagai penyimpanan masih kurang meyakinkan buat mereka hahhha.</p>\n<p>Tapi setelah saya pikir-pikir lagi, justru karena fokus mereka di performa, makanya mereka menekankan masalah performa sampai sebegininya.</p>\n<p>Pada bagian ini, pembahasannya adalah tentang performa dan big O notation untuk beberapa perintah Redis.\nSebetulnya pada dokumentasi Redis, setiap perintah itu udah dicantumin big O notationnya, tapi disini mereka menjelaskan lebih detail untuk beberapa perintah.</p>\n<p>Ini contoh perhitungan Big O Notation untuk beberapa perintah Redis:</p>\n<pre class=\"shiki\" style=\"background-color: #191d21\"><code><span style=\"color: #FFFFFF\">SET foo 10 </span><span style=\"color: #888\"># O(1)</span>\n<span style=\"color: #FFFFFF\">SET bar 12 </span><span style=\"color: #888\"># O(1)</span>\n\n<span style=\"color: #FFFFFF\">MSET foo 10 bar 12 baz 100 </span><span style=\"color: #888\"># O(N), N = 3 (foo, bar , dan baz)</span>\n\n<span style=\"color: #FFFFFF\">DEL foo </span><span style=\"color: #888\"># O(1)</span>\n<span style=\"color: #FFFFFF\">DEL bar baz </span><span style=\"color: #888\"># O(N), N = 2</span>\n\n<span style=\"color: #FFFFFF\">SADD myset 1 2 3 4 5 </span><span style=\"color: #888\"># O(N), N = 5</span>\n<span style=\"color: #FFFFFF\">DEL myset </span><span style=\"color: #888\"># O(M), M = 5</span>\n\n<span style=\"color: #FFFFFF\">SADD set:a 1 2 3 4 5 </span><span style=\"color: #888\"># O(5)</span>\n<span style=\"color: #FFFFFF\">SADD set:b 1 2 3 4 5 6 7 8 9 </span><span style=\"color: #888\"># O(9)</span>\n\n<span style=\"color: #FFFFFF\">SINTER set:b set:a </span><span style=\"color: #888\"># O(N * M), N = 5 (count set terkecil), M = 2 (set:a dan set:b) =&gt; O(5 * 2) =&gt; O(10)</span>\n\n<span style=\"color: #FFFFFF\">RPUSH numbers 1 2 3 4 5 6 7 8 9 0 </span><span style=\"color: #888\"># O(10)</span>\n<span style=\"color: #FFFFFF\">LRANGE numbers 3 5 </span><span style=\"color: #888\"># O(S + N), S = 4 (start + 1), N = 3 (end - start + 1) =&gt; O(4 + 3) =&gt; O(7) </span></code></pre>\n<hr>\n<p>Begitulah pertemuan minggu ke-2. Dah ya, saya mau lanjut ke RU102J.</p>\n","excerpt":"","description":"Catatan kelas Redis University RU101 minggu ke-2","path":"/artikel/redis-university-ru101-minggu-ke-2/","cover":"/images/posts/ru101-w2-cover.png","icon":"/images/icons/redis.png","tags":[{"id":"Redis University","title":"Redis University","path":"/tag/Redis%20University/"},{"id":"Course","title":"Course","path":"/tag/Course/"},{"id":"RU101","title":"RU101","path":"/tag/RU101/"}],"author":{"id":"Muhammad Syifa","title":"Muhammad Syifa","path":"/author/Muhammad%20Syifa/"}}}]}},"context":{}}