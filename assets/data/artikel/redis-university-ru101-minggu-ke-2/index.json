{"hash":"6de0a4c76786ea2ab36e4142bc3730c3472dda85","data":{"post":{"title":"Redis University RU101 - Minggu Ke-2","slug":"redis-university-ru101-minggu-ke-2","datetime":"2019-08-17 08:00:00","content":"<p>Ini adalah catatan minggu ke-2 dari kelas RU101 (Introduction to Redis Data Structure) di Redis University.\nBuat yang belum tau apa itu Redis University, saya sudah bahas di catatan <a href=\"/redis-university-ru101-minggu-pertama/\">minggu pertama</a>.</p>\n<p>Pada minggu pertama yang dibahas adalah tentang data struktur apa saja yang terdapat pada Redis,\npada minggu ke-2 ini pembahasannya adalah:</p>\n<ol>\n<li>Cardinality and Capped Collections</li>\n<li>Set Operations</li>\n<li>Faceted Search</li>\n<li>Performance &#x26; Big O Notation</li>\n</ol>\n<h2 id=\"1-cardinality-and-capped-collections\"><a href=\"#1-cardinality-and-capped-collections\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Cardinality and Capped Collections</h2>\n<h4 id=\"cardinality\"><a href=\"#cardinality\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cardinality</h4>\n<p>Untuk mengecek cardinality dari data di Redis, perintah yang dapat digunakan adalah:</p>\n<ul>\n<li><code>LLEN</code>: untuk list</li>\n<li><code>SCARD</code>: untuk set</li>\n<li><code>ZCARD</code>: untuk sorted set</li>\n</ul>\n<p>Contoh:</p>\n<pre class=\"shiki\" style=\"background-color: #191d21\"><code><span style=\"color: #FFFFFF\">RPUSH mylist 1 2 3 4 5  </span><span style=\"color: #888\"># set 5 item ke mylist</span>\n<span style=\"color: #FFFFFF\">LLEN mylist             </span><span style=\"color: #888\"># mengambil banyak item di mylist</span>\n<span style=\"color: #EFEFEF\">(</span><span style=\"color: #FFFFFF\">integer</span><span style=\"color: #EFEFEF\">)</span><span style=\"color: #FFFFFF\"> 5 </span>\n\n<span style=\"color: #FFFFFF\">SADD myset foo bar baz qux qux </span><span style=\"color: #888\"># menambahkan item ke myset</span>\n<span style=\"color: #FFFFFF\">SCARD myset                    </span><span style=\"color: #888\"># mengambil banyak item di myset</span>\n<span style=\"color: #EFEFEF\">(</span><span style=\"color: #FFFFFF\">integer</span><span style=\"color: #EFEFEF\">)</span><span style=\"color: #FFFFFF\"> 4 </span><span style=\"color: #888\"># hasilnya 4 karena set hanya menyimpan string unik, jadi qux ke2 tidak ditambahkan</span>\n\n<span style=\"color: #FFFFFF\">ZADD mysortedset 1 foo 2 bar 3 baz 4 qux 5 qux </span><span style=\"color: #888\"># menambahkan item ke mysortedset</span>\n<span style=\"color: #FFFFFF\">ZCARD mysortedset                              </span><span style=\"color: #888\"># mengambil banyak item di mysortedset</span>\n<span style=\"color: #EFEFEF\">(</span><span style=\"color: #FFFFFF\">integer</span><span style=\"color: #EFEFEF\">)</span><span style=\"color: #FFFFFF\"> 4 </span><span style=\"color: #888\"># hasilnya 4 karena alasan yg sama dengan set</span></code></pre>\n<h4 id=\"capped-collections\"><a href=\"#capped-collections\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Capped Collections</h4>\n<p>Capped collections adalah list/sorted set yang sebagian nilainya telah dihapus/dipotong.</p>\n<p>Ada beberapa perintah untuk memotong sebagian item didalam list dan sorted set:</p>\n<ul>\n<li><code>LTRIM</code>: untuk <strong>mengambil</strong> item di range index tertentu pada list (sisanya dihapus).</li>\n<li><code>ZREMRANGEBYRANK</code>: untuk <strong>menghapus</strong> item di range index tertentu pada sorted set.</li>\n</ul>\n<p>Contoh <code>LTRIM</code>:</p>\n<pre class=\"shiki\" style=\"background-color: #191d21\"><code><span style=\"color: #FFFFFF\">RPUSH numbers 1 2 3 4 5 6 7 8 9 10 </span><span style=\"color: #888\"># set numbers</span>\n<span style=\"color: #FFFFFF\">LTRIM numbers 0 -3                 </span><span style=\"color: #888\"># ambil dari index 0 sampai dengan index terakhir - 3</span>\n<span style=\"color: #FFFFFF\">LRANGE numbers 0 -1                </span><span style=\"color: #888\"># ambil semua numbers (setelah dipotong)</span>\n<span style=\"color: #FFFFFF\">1) </span><span style=\"color: #50E3C2\">\"1\"</span>\n<span style=\"color: #FFFFFF\">2) </span><span style=\"color: #50E3C2\">\"2\"</span>\n<span style=\"color: #FFFFFF\">3) </span><span style=\"color: #50E3C2\">\"3\"</span>\n<span style=\"color: #FFFFFF\">4) </span><span style=\"color: #50E3C2\">\"4\"</span>\n<span style=\"color: #FFFFFF\">5) </span><span style=\"color: #50E3C2\">\"5\"</span>\n<span style=\"color: #FFFFFF\">6) </span><span style=\"color: #50E3C2\">\"6\"</span>\n<span style=\"color: #FFFFFF\">7) </span><span style=\"color: #50E3C2\">\"7\"</span>\n<span style=\"color: #FFFFFF\">8) </span><span style=\"color: #50E3C2\">\"8\"</span>\n\n<span style=\"color: #FFFFFF\">LTRIM -5 -1 </span><span style=\"color: #888\"># mengambil 5 item terakhir</span>\n<span style=\"color: #FFFFFF\">LRANGE numbers 0 -1</span>\n<span style=\"color: #FFFFFF\">1) </span><span style=\"color: #50E3C2\">\"4\"</span>\n<span style=\"color: #FFFFFF\">2) </span><span style=\"color: #50E3C2\">\"5\"</span>\n<span style=\"color: #FFFFFF\">3) </span><span style=\"color: #50E3C2\">\"6\"</span>\n<span style=\"color: #FFFFFF\">4) </span><span style=\"color: #50E3C2\">\"7\"</span>\n<span style=\"color: #FFFFFF\">5) </span><span style=\"color: #50E3C2\">\"8\"</span></code></pre>\n<p>Contoh <code>ZREMRANGEBYRANK</code>:</p>\n<pre class=\"shiki\" style=\"background-color: #191d21\"><code><span style=\"color: #FFFFFF\">ZADD letters 1 a 2 b 3 c 4 d 5 f 6 g 7 h  </span><span style=\"color: #888\"># set letters</span>\n<span style=\"color: #FFFFFF\">ZREMRANGEBYRANK letters -2 -1             </span><span style=\"color: #888\"># hapus 2 item terakhir</span>\n<span style=\"color: #FFFFFF\">ZRANGE letters 0 -1</span>\n<span style=\"color: #FFFFFF\">1) </span><span style=\"color: #50E3C2\">\"a\"</span>\n<span style=\"color: #FFFFFF\">2) </span><span style=\"color: #50E3C2\">\"b\"</span>\n<span style=\"color: #FFFFFF\">3) </span><span style=\"color: #50E3C2\">\"c\"</span>\n<span style=\"color: #FFFFFF\">4) </span><span style=\"color: #50E3C2\">\"d\"</span>\n<span style=\"color: #FFFFFF\">5) </span><span style=\"color: #50E3C2\">\"f\"</span>\n\n<span style=\"color: #FFFFFF\">ZREMRANGEBYRANK letters 0 2 </span><span style=\"color: #888\"># hapus 3 item pertama (index: 0, 1, 2)</span>\n<span style=\"color: #FFFFFF\">1) </span><span style=\"color: #50E3C2\">\"d\"</span><span style=\"color: #FFFFFF\">                                                                                                             2) </span><span style=\"color: #50E3C2\">\"f\"</span></code></pre>\n<h2 id=\"2-set-operations-with-sets-and-sorted-sets\"><a href=\"#2-set-operations-with-sets-and-sorted-sets\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Set Operations with Sets and Sorted Sets</h2>\n<p>Pada bagian ini dicontohkan cara menggunakan <code>ZINTERSTORE</code> dan <code>ZETUNIONSTORE</code> untuk menyimpan hasil <em>intersect</em> dan <em>union</em> kedalam key lain.</p>\n<p>Contoh <code>ZINTERSTORE</code>: </p>\n<pre class=\"shiki\" style=\"background-color: #191d21\"><code><span style=\"color: #FFFFFF\">ZADD l1 1 a 2 b 3 c 4 d 5 f </span><span style=\"color: #888\"># buat sorted set l1</span>\n<span style=\"color: #FFFFFF\">ZADD l2 1 a 2 b 3 e 5 x 6 z </span><span style=\"color: #888\"># buat sorted set l2</span>\n\n<span style=\"color: #FFFFFF\">ZINTERSTORE l3 2 l1 l2      </span><span style=\"color: #888\"># simpan hasil intersect l1 dan l2 kedalam l3</span>\n<span style=\"color: #FFFFFF\">ZRANGE l3 0 -1 WITHSCORES </span><span style=\"color: #888\"># melihat semua isi l3</span>\n<span style=\"color: #FFFFFF\">1) </span><span style=\"color: #50E3C2\">\"a\"</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\"># nilai i(0)</span>\n<span style=\"color: #FFFFFF\">2) </span><span style=\"color: #50E3C2\">\"2\"</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\"># score i(0)</span>\n<span style=\"color: #FFFFFF\">3) </span><span style=\"color: #50E3C2\">\"b\"</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\"># nilai i(1)</span>\n<span style=\"color: #FFFFFF\">4) </span><span style=\"color: #50E3C2\">\"4\"</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\"># score i(1)</span></code></pre>\n<p>Sebagai catatan <code>l3 2 l1 l2</code>, <code>2</code> yang dimaksud disitu adalah banyak key yang mau di-<em>intersect</em>,\nkarena disitu yang di-<em>intersect</em> adalah <code>l1</code> dan <code>l2</code>, berarti banyak keynya adalah 2.</p>\n<p>Dokumentasi selengkapnya <code>ZINTERSTORE</code> bisa dilihat <a href=\"https://redis.io/commands/zinterstore\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">disini</a>.</p>\n<p>Contoh <code>ZUNIONSTORE</code>:</p>\n<pre class=\"shiki\" style=\"background-color: #191d21\"><code><span style=\"color: #FFFFFF\">ZADD l1 1 a 2 b 3 c 4 d 5 f </span><span style=\"color: #888\"># buat sorted set l1</span>\n<span style=\"color: #FFFFFF\">ZADD l2 1 a 2 b 3 e 5 x 6 z </span><span style=\"color: #888\"># buat sorted set l2</span>\n\n<span style=\"color: #FFFFFF\">ZUNIONSTORE l3 2 l1 l2      </span><span style=\"color: #888\"># simpan hasil union l1 dan l2 kedalam l3</span>\n<span style=\"color: #FFFFFF\">ZRANGE l3 0 -1 WITHSCORES </span><span style=\"color: #888\"># melihat semua isi l3</span>\n<span style=\"color: #FFFFFF\"> 1) </span><span style=\"color: #50E3C2\">\"a\"</span>\n<span style=\"color: #FFFFFF\"> 2) </span><span style=\"color: #50E3C2\">\"2\"</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\"># skor si a, jadi 2 karena skornya ditambahkan antara skor a di l1 dan skor a di l2</span>\n<span style=\"color: #FFFFFF\"> 3) </span><span style=\"color: #50E3C2\">\"c\"</span>\n<span style=\"color: #FFFFFF\"> 4) </span><span style=\"color: #50E3C2\">\"3\"</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\"># skor si c</span>\n<span style=\"color: #FFFFFF\"> 5) </span><span style=\"color: #50E3C2\">\"e\"</span>\n<span style=\"color: #FFFFFF\"> 6) </span><span style=\"color: #50E3C2\">\"3\"</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\"># skor si d</span>\n<span style=\"color: #FFFFFF\"> 7) </span><span style=\"color: #50E3C2\">\"b\"</span>\n<span style=\"color: #FFFFFF\"> 8) </span><span style=\"color: #50E3C2\">\"4\"</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\"># skor si b</span>\n<span style=\"color: #FFFFFF\"> 9) </span><span style=\"color: #50E3C2\">\"d\"</span>\n<span style=\"color: #FFFFFF\">10) </span><span style=\"color: #50E3C2\">\"4\"</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\"># skor si d</span>\n<span style=\"color: #FFFFFF\">11) </span><span style=\"color: #50E3C2\">\"f\"</span>\n<span style=\"color: #FFFFFF\">12) </span><span style=\"color: #50E3C2\">\"5\"</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\"># skor si f</span>\n<span style=\"color: #FFFFFF\">13) </span><span style=\"color: #50E3C2\">\"x\"</span>\n<span style=\"color: #FFFFFF\">14) </span><span style=\"color: #50E3C2\">\"5\"</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\"># skor si x</span>\n<span style=\"color: #FFFFFF\">15) </span><span style=\"color: #50E3C2\">\"z\"</span>\n<span style=\"color: #FFFFFF\">16) </span><span style=\"color: #50E3C2\">\"6\"</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\"># skor si y</span>\n\n<span style=\"color: #FFFFFF\">ZUNIONSTORE l3 2 l1 l2 AGGREGATE MIN  </span><span style=\"color: #888\"># simpan hasil union l1 dan l2 kedalam l3</span>\n<span style=\"color: #FFFFFF\">ZRANGE l3 0 -1 WITHSCORES </span><span style=\"color: #888\"># melihat semua isi l3</span>\n<span style=\"color: #FFFFFF\"> 1) </span><span style=\"color: #50E3C2\">\"a\"</span>\n<span style=\"color: #FFFFFF\"> 2) </span><span style=\"color: #50E3C2\">\"1\"</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\"># skor si a, paling kecilnya 1</span>\n<span style=\"color: #FFFFFF\"> 3) </span><span style=\"color: #50E3C2\">\"b\"</span>\n<span style=\"color: #FFFFFF\"> 4) </span><span style=\"color: #50E3C2\">\"2\"</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\"># skor si b</span>\n<span style=\"color: #FFFFFF\"> 5) </span><span style=\"color: #50E3C2\">\"c\"</span>\n<span style=\"color: #FFFFFF\"> 6) </span><span style=\"color: #50E3C2\">\"3\"</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\"># skor si c</span>\n<span style=\"color: #FFFFFF\"> 7) </span><span style=\"color: #50E3C2\">\"e\"</span><span style=\"color: #FFFFFF\"> </span>\n<span style=\"color: #FFFFFF\"> 8) </span><span style=\"color: #50E3C2\">\"3\"</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\"># skor si e</span>\n<span style=\"color: #FFFFFF\"> 9) </span><span style=\"color: #50E3C2\">\"d\"</span>\n<span style=\"color: #FFFFFF\">10) </span><span style=\"color: #50E3C2\">\"4\"</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\"># skor si d</span>\n<span style=\"color: #FFFFFF\">11) </span><span style=\"color: #50E3C2\">\"f\"</span>\n<span style=\"color: #FFFFFF\">12) </span><span style=\"color: #50E3C2\">\"5\"</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\"># skor si f</span>\n<span style=\"color: #FFFFFF\">13) </span><span style=\"color: #50E3C2\">\"x\"</span>\n<span style=\"color: #FFFFFF\">14) </span><span style=\"color: #50E3C2\">\"5\"</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\"># skor si x</span>\n<span style=\"color: #FFFFFF\">15) </span><span style=\"color: #50E3C2\">\"z\"</span>\n<span style=\"color: #FFFFFF\">16) </span><span style=\"color: #50E3C2\">\"6\"</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #888\"># skor si z</span></code></pre>\n<p>Dokumentasi selengkapnya <code>ZUNIONSTORE</code> bisa dilihat <a href=\"https://redis.io/commands/zunionstore\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">disini</a>.</p>\n<h2 id=\"3-faceted-search\"><a href=\"#3-faceted-search\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. Faceted Search</h2>\n<p>Selanjutnya pembahasa menuju ke <em>faceted search</em>. Untuk definisi <em>faceted search</em> sendiri nggak begitu dijelaskan disini, jadi silahkan aja ke <a href=\"https://en.wikipedia.org/wiki/Faceted_search\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">wikipedia</a>. Yang dibahas disini hanya contoh kasus menerapkan teknik <em>faceted search</em> pada Redis menggunakan bahasa pemrograman tertentu, untuk mengurangi <em>time complexity</em> saat melakukan pencarian.</p>\n<p>Sebagai contoh, kita memiliki data customers berupa JSON sebagai berikut:</p>\n<pre class=\"shiki\" style=\"background-color: #191d21\"><code><span style=\"color: #EFEFEF\">[</span>\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #EFEFEF\">{</span>\n<span style=\"color: #FFFFFF\">        </span><span style=\"color: #2BA8FF\">\"ID\"</span><span style=\"color: #EFEFEF\">:</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #FFF\">\"001\"</span><span style=\"color: #EFEFEF\">,</span>\n<span style=\"color: #FFFFFF\">        </span><span style=\"color: #2BA8FF\">\"name\"</span><span style=\"color: #EFEFEF\">:</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #FFF\">\"John Doe\"</span><span style=\"color: #EFEFEF\">,</span>\n<span style=\"color: #FFFFFF\">        </span><span style=\"color: #2BA8FF\">\"age\"</span><span style=\"color: #EFEFEF\">:</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #2BA8FF\">20</span><span style=\"color: #EFEFEF\">,</span>\n<span style=\"color: #FFFFFF\">        </span><span style=\"color: #2BA8FF\">\"city\"</span><span style=\"color: #EFEFEF\">:</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #FFF\">\"Jakarta\"</span><span style=\"color: #EFEFEF\">,</span>\n<span style=\"color: #FFFFFF\">        </span><span style=\"color: #2BA8FF\">\"sex\"</span><span style=\"color: #EFEFEF\">:</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #FFF\">\"male\"</span>\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #EFEFEF\">},</span>\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #EFEFEF\">{</span>\n<span style=\"color: #FFFFFF\">        </span><span style=\"color: #2BA8FF\">\"ID\"</span><span style=\"color: #EFEFEF\">:</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #FFF\">\"002\"</span><span style=\"color: #EFEFEF\">,</span>\n<span style=\"color: #FFFFFF\">        </span><span style=\"color: #2BA8FF\">\"name\"</span><span style=\"color: #EFEFEF\">:</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #FFF\">\"Jane Doe\"</span><span style=\"color: #EFEFEF\">,</span>\n<span style=\"color: #FFFFFF\">        </span><span style=\"color: #2BA8FF\">\"age\"</span><span style=\"color: #EFEFEF\">:</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #2BA8FF\">20</span><span style=\"color: #EFEFEF\">,</span>\n<span style=\"color: #FFFFFF\">        </span><span style=\"color: #2BA8FF\">\"city\"</span><span style=\"color: #EFEFEF\">:</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #FFF\">\"Bandung\"</span><span style=\"color: #EFEFEF\">,</span>\n<span style=\"color: #FFFFFF\">        </span><span style=\"color: #2BA8FF\">\"sex\"</span><span style=\"color: #EFEFEF\">:</span><span style=\"color: #FFFFFF\"> </span><span style=\"color: #FFF\">\"female\"</span>\n<span style=\"color: #FFFFFF\">    </span><span style=\"color: #EFEFEF\">}</span>\n<span style=\"color: #EFEFEF\">]</span></code></pre>\n<p>Jika kita ingin melakukan pencarian terhadap kolom <code>age</code>, <code>city</code>, dan <code>sex</code>.\nSelain menyimpan data customer tersebut, kita juga meyimpan indeks untuk <code>age</code>, <code>city</code>, dan <code>sex</code> berupa <code>sets</code>.</p>\n<p>Sebagai contoh:</p>\n<pre class=\"shiki\" style=\"background-color: #191d21\"><code><span style=\"color: #888\"># simpan data lengkap</span>\n<span style=\"color: #FFFFFF\">SET customer:001 </span><span style=\"color: #50E3C2\">\"{json string data john doe}\"</span>\n<span style=\"color: #FFFFFF\">SET customer:002 </span><span style=\"color: #50E3C2\">\"{json string data jane doe}\"</span>\n\n<span style=\"color: #FFFFFF\">SADD fs:customer:age:20 001 002     </span><span style=\"color: #888\"># menambahkan 001 dan 002 kedalam set dengan age 20</span>\n<span style=\"color: #FFFFFF\">SADD fs:customer:city:</span><span style=\"color: #50E3C2\">\"Jakarta\"</span><span style=\"color: #FFFFFF\"> 001 </span><span style=\"color: #888\"># menambahkan customer 001 kedalam set dengan city Jakarta</span>\n<span style=\"color: #FFFFFF\">SADD fs:customer:city:</span><span style=\"color: #50E3C2\">\"Bandung\"</span><span style=\"color: #FFFFFF\"> 002 </span><span style=\"color: #888\"># menambahkan customer 002 kedalam set dengan city Bandung</span>\n<span style=\"color: #FFFFFF\">SADD fs:customer:sex:male 001</span>\n<span style=\"color: #FFFFFF\">SADD fs:customer:sex:female 002</span></code></pre>\n<blockquote>\n<p>Prefix 'fs' disana maksudnya <em>faceted search</em>. Bisa diganti dengan apapun.</p>\n</blockquote>\n<p>Dengan begitu, jika kita ingin melakukan pencarian dengan kriteria umur 20 dan jenis kelamin pria,\nhal yang pertama kita lakukan adalah mengambil <em>intersect</em> daftar ID dari <code>fs:customer:age:20</code> dan <code>fs:customer:sex:male</code>. Setelah ID didapat, barulah kita mengambil masing-masing data menggunakan <code>GET</code>.</p>\n<p>Contoh:</p>\n<pre class=\"shiki\" style=\"background-color: #191d21\"><code><span style=\"color: #FFFFFF\">SINTER fs:customer:age:20 fs:customer:sex:male</span>\n<span style=\"color: #FFFFFF\">1) </span><span style=\"color: #50E3C2\">\"001\"</span>\n\n<span style=\"color: #FFFFFF\">GET customer:001</span>\n<span style=\"color: #50E3C2\">\"json string data john doe\"</span></code></pre>\n<p>Sebetulnya di kelas pakainya python, jadi hasil dari <code>SINTER</code> di looping untuk mendapatkan detail masing-masing datanya, tapi disini saya catat konsepnya aja. Pokoknya kayak gitulah tekniknya.</p>\n<h4 id=\"hashed-key\"><a href=\"#hashed-key\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Hashed Key</h4>\n<p>Materi selanjutnya adalah membandingkan <em>faceted search</em> diatas dengan tambahan <em>hashed key</em>.\nJadi pada teknik ini, <em>time complexity</em> lebih rendah karena kita tidak perlu melakukan <code>SINTER</code> ke banyak kriteria, karena kombinasi kriterianya dibungkus menjadi hash.</p>\n<p>Sebagai contoh pada data JSON sebelumnya, jika kita ingin melakukan pencarian terhadap <code>age</code>, <code>city</code>, dan <code>sex</code>.\nKita perlu membuat <code>sets</code> sebanyak kombinasi dari ke-3 kolom tersebut. Untuk algoritma hashnya sendiri bisa pakai apapun, entah md5, sha1, sha256, dsb.</p>\n<p>Contoh aja nih ya, dari data JSON diatas kita akan membuat <code>list</code> kurang lebih seperti ini:</p>\n<pre class=\"shiki\" style=\"background-color: #191d21\"><code><span style=\"color: #888\"># indeks untuk John Doe (001)</span>\n<span style=\"color: #FFFFFF\">RPUSH </span><span style=\"color: #50E3C2\">\"hfs:customer:md5(20|Jakarta|male)\"</span><span style=\"color: #FFFFFF\"> 001</span>\n<span style=\"color: #FFFFFF\">RPUSH </span><span style=\"color: #50E3C2\">\"hfs:customer:md5(20|*|male)\"</span><span style=\"color: #FFFFFF\"> 001</span>\n<span style=\"color: #FFFFFF\">RPUSH </span><span style=\"color: #50E3C2\">\"hfs:customer:md5(20|Jakarta|*)\"</span><span style=\"color: #FFFFFF\"> 001</span>\n<span style=\"color: #FFFFFF\">RPUSH </span><span style=\"color: #50E3C2\">\"hfs:customer:md5(*|Jakarta|male)\"</span><span style=\"color: #FFFFFF\"> 001</span>\n<span style=\"color: #FFFFFF\">RPUSH </span><span style=\"color: #50E3C2\">\"hfs:customer:md5(20|*|*)\"</span><span style=\"color: #FFFFFF\"> 001</span>\n<span style=\"color: #FFFFFF\">RPUSH </span><span style=\"color: #50E3C2\">\"hfs:customer:md5(*|Jakarta|*)\"</span><span style=\"color: #FFFFFF\"> 001</span>\n<span style=\"color: #FFFFFF\">RPUSH </span><span style=\"color: #50E3C2\">\"hfs:customer:md5(*|*|male)\"</span><span style=\"color: #FFFFFF\"> 001</span>\n\n<span style=\"color: #888\"># indeks untuk Jane Doe (002)</span>\n<span style=\"color: #FFFFFF\">RPUSH </span><span style=\"color: #50E3C2\">\"hfs:customer:md5(20|Bandung|female)\"</span><span style=\"color: #FFFFFF\"> 002</span>\n<span style=\"color: #FFFFFF\">RPUSH </span><span style=\"color: #50E3C2\">\"hfs:customer:md5(20|*|female)\"</span><span style=\"color: #FFFFFF\"> 002</span>\n<span style=\"color: #FFFFFF\">RPUSH </span><span style=\"color: #50E3C2\">\"hfs:customer:md5(20|Bandung|*)\"</span><span style=\"color: #FFFFFF\"> 002</span>\n<span style=\"color: #FFFFFF\">RPUSH </span><span style=\"color: #50E3C2\">\"hfs:customer:md5(*|Bandung|female)\"</span><span style=\"color: #FFFFFF\"> 002</span>\n<span style=\"color: #FFFFFF\">RPUSH </span><span style=\"color: #50E3C2\">\"hfs:customer:md5(20|*|*)\"</span><span style=\"color: #FFFFFF\"> 002</span>\n<span style=\"color: #FFFFFF\">RPUSH </span><span style=\"color: #50E3C2\">\"hfs:customer:md5(*|Bandung|*)\"</span><span style=\"color: #FFFFFF\"> 002</span>\n<span style=\"color: #FFFFFF\">RPUSH </span><span style=\"color: #50E3C2\">\"hfs:customer:md5(*|*|female)\"</span><span style=\"color: #FFFFFF\"> 002</span></code></pre>\n<p>Itu <code>md5(age,city,sex)</code> contoh aja ya, sebetulnya itu seharusnya hasil dari md5-nya, bukan plain text kayak gitu.</p>\n<p>Intinya pada teknik <em>hashed key</em> ini kita menyimpan <strong>seluruh</strong> kombinasi key yang dimungkinkan, sehingga suatu saat kita ingin mencari data pria umur 20, kita bisa gunakan <code>LRANGE</code> sebagai berikut:</p>\n<pre class=\"shiki\" style=\"background-color: #191d21\"><code><span style=\"color: #FFFFFF\">LRANGE </span><span style=\"color: #50E3C2\">\"hfs:customer:md5(20|*|male)\"</span><span style=\"color: #FFFFFF\"> 0 -1</span>\n<span style=\"color: #FFFFFF\">1) </span><span style=\"color: #50E3C2\">\"001\"</span></code></pre>\n<p>Dari hasil itu baru deh di loop pakai bahasa pemrograman buat dapatin detail masing-masing datanya.\nMenggunakan teknik seperti ini akan mengurangi <em>time complexity</em> untuk melakukan pencarian karena tidak perlu melakukan <em>intersect</em>, hanya saja semakin banyak kombinasi valuenya, keynya akan buanyak banget, dan proses maintain indeksnya jadi lebih rumit.</p>\n<h2 id=\"4-performance--big-o-notation\"><a href=\"#4-performance--big-o-notation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. Performance &#x26; Big O Notation</h2>\n<p>Sebagai programmer yang main weaponnya PHP dan Javascript saya sebetulnya agak gimana gitu di pembahasan minggu ini. Redis kan memang diciptakan untuk masalah performa, itu kenapa dia menghadirkan solusi in-memory database ini.\nTapi di minggu ini dia bahas masalah performa seakan menggunakan bahasa C dan RAM sebagai penyimpanan masih kurang meyakinkan buat mereka hahhha.</p>\n<p>Tapi setelah saya pikir-pikir lagi, justru karena fokus mereka di performa, makanya mereka menekankan masalah performa sampai sebegininya.</p>\n<p>Pada bagian ini, pembahasannya adalah tentang performa dan big O notation untuk beberapa perintah Redis.\nSebetulnya pada dokumentasi Redis, setiap perintah itu udah dicantumin big O notationnya, tapi disini mereka menjelaskan lebih detail untuk beberapa perintah.</p>\n<p>Ini contoh perhitungan Big O Notation untuk beberapa perintah Redis:</p>\n<pre class=\"shiki\" style=\"background-color: #191d21\"><code><span style=\"color: #FFFFFF\">SET foo 10 </span><span style=\"color: #888\"># O(1)</span>\n<span style=\"color: #FFFFFF\">SET bar 12 </span><span style=\"color: #888\"># O(1)</span>\n\n<span style=\"color: #FFFFFF\">MSET foo 10 bar 12 baz 100 </span><span style=\"color: #888\"># O(N), N = 3 (foo, bar , dan baz)</span>\n\n<span style=\"color: #FFFFFF\">DEL foo </span><span style=\"color: #888\"># O(1)</span>\n<span style=\"color: #FFFFFF\">DEL bar baz </span><span style=\"color: #888\"># O(N), N = 2</span>\n\n<span style=\"color: #FFFFFF\">SADD myset 1 2 3 4 5 </span><span style=\"color: #888\"># O(N), N = 5</span>\n<span style=\"color: #FFFFFF\">DEL myset </span><span style=\"color: #888\"># O(M), M = 5</span>\n\n<span style=\"color: #FFFFFF\">SADD set:a 1 2 3 4 5 </span><span style=\"color: #888\"># O(5)</span>\n<span style=\"color: #FFFFFF\">SADD set:b 1 2 3 4 5 6 7 8 9 </span><span style=\"color: #888\"># O(9)</span>\n\n<span style=\"color: #FFFFFF\">SINTER set:b set:a </span><span style=\"color: #888\"># O(N * M), N = 5 (count set terkecil), M = 2 (set:a dan set:b) =&gt; O(5 * 2) =&gt; O(10)</span>\n\n<span style=\"color: #FFFFFF\">RPUSH numbers 1 2 3 4 5 6 7 8 9 0 </span><span style=\"color: #888\"># O(10)</span>\n<span style=\"color: #FFFFFF\">LRANGE numbers 3 5 </span><span style=\"color: #888\"># O(S + N), S = 4 (start + 1), N = 3 (end - start + 1) =&gt; O(4 + 3) =&gt; O(7) </span></code></pre>\n<hr>\n<p>Begitulah pertemuan minggu ke-2. Dah ya, saya mau lanjut ke RU102J.</p>\n","description":"Catatan kelas Redis University RU101 minggu ke-2","timeToRead":7,"cover":"/images/posts/ru101-w2-cover.png","coverThumb":"/images/posts/ru101-w2-cover.png","fullscreen":false,"author":{"id":"Muhammad Syifa","title":"Muhammad Syifa","path":"/author/Muhammad%20Syifa/"},"tags":[{"id":"Redis University","title":"Redis University","path":"/tag/Redis%20University/"},{"id":"Course","title":"Course","path":"/tag/Course/"},{"id":"RU101","title":"RU101","path":"/tag/RU101/"}]}},"context":{}}